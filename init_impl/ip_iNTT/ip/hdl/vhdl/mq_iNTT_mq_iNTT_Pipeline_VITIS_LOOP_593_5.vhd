-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mq_iNTT_mq_iNTT_Pipeline_VITIS_LOOP_593_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmemo_AWVALID : OUT STD_LOGIC;
    m_axi_gmemo_AWREADY : IN STD_LOGIC;
    m_axi_gmemo_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmemo_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmemo_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_WVALID : OUT STD_LOGIC;
    m_axi_gmemo_WREADY : IN STD_LOGIC;
    m_axi_gmemo_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmemo_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_WLAST : OUT STD_LOGIC;
    m_axi_gmemo_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_ARVALID : OUT STD_LOGIC;
    m_axi_gmemo_ARREADY : IN STD_LOGIC;
    m_axi_gmemo_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmemo_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmemo_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_RVALID : IN STD_LOGIC;
    m_axi_gmemo_RREADY : OUT STD_LOGIC;
    m_axi_gmemo_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmemo_RLAST : IN STD_LOGIC;
    m_axi_gmemo_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmemo_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_BVALID : IN STD_LOGIC;
    m_axi_gmemo_BREADY : OUT STD_LOGIC;
    m_axi_gmemo_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_9 : IN STD_LOGIC_VECTOR (63 downto 0);
    a : IN STD_LOGIC_VECTOR (63 downto 0);
    ni_2_cast7_reload : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of mq_iNTT_mq_iNTT_Pipeline_VITIS_LOOP_593_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln593_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmemo_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmemo_blk_n_R : STD_LOGIC;
    signal gmemo_blk_n_AW : STD_LOGIC;
    signal gmemo_blk_n_W : STD_LOGIC;
    signal gmemo_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ni_2_cast7_reload_cast_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ni_2_cast7_reload_cast_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmemo_addr_reg_276 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_reg_276_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_read_reg_283 : STD_LOGIC_VECTOR (15 downto 0);
    signal z_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_reg_288_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal z_reg_288_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal z_reg_288_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal z_reg_288_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln594_1_fu_229_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln594_1_reg_303 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln594_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal m_fu_76 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_137_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal shl_ln594_fu_143_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln594_fu_149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_154_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal z_fu_182_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal z_fu_182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln406_fu_191_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln396_1_fu_194_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln396_1_fu_203_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal z_1_fu_207_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln594_fu_221_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_242_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_242_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_235_ce : STD_LOGIC;
    signal grp_fu_242_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_242_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal z_fu_182_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mq_iNTT_mul_31ns_16ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mq_iNTT_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mq_iNTT_mac_muladd_16ns_14ns_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mq_iNTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_31ns_16ns_32_1_1_U15 : component mq_iNTT_mul_31ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => z_fu_182_p0,
        din1 => z_fu_182_p1,
        dout => z_fu_182_p2);

    mul_mul_16s_14ns_16_4_1_U16 : component mq_iNTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_235_p0,
        din1 => grp_fu_235_p1,
        ce => grp_fu_235_ce,
        dout => grp_fu_235_p2);

    mac_muladd_16ns_14ns_32ns_32_4_1_U17 : component mq_iNTT_mac_muladd_16ns_14ns_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_242_p0,
        din1 => grp_fu_242_p1,
        din2 => z_reg_288_pp0_iter14_reg,
        ce => grp_fu_242_ce,
        dout => grp_fu_242_p3);

    flow_control_loop_pipe_sequential_init_U : component mq_iNTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    m_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    m_fu_76 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln593_fu_132_p2 = ap_const_lv1_0))) then 
                    m_fu_76 <= m_2_fu_137_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln594_1_reg_303 <= add_ln594_1_fu_229_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmemo_addr_read_reg_283 <= m_axi_gmemo_RDATA;
                gmemo_addr_reg_276_pp0_iter10_reg <= gmemo_addr_reg_276_pp0_iter9_reg;
                gmemo_addr_reg_276_pp0_iter11_reg <= gmemo_addr_reg_276_pp0_iter10_reg;
                gmemo_addr_reg_276_pp0_iter12_reg <= gmemo_addr_reg_276_pp0_iter11_reg;
                gmemo_addr_reg_276_pp0_iter13_reg <= gmemo_addr_reg_276_pp0_iter12_reg;
                gmemo_addr_reg_276_pp0_iter14_reg <= gmemo_addr_reg_276_pp0_iter13_reg;
                gmemo_addr_reg_276_pp0_iter15_reg <= gmemo_addr_reg_276_pp0_iter14_reg;
                gmemo_addr_reg_276_pp0_iter2_reg <= gmemo_addr_reg_276;
                gmemo_addr_reg_276_pp0_iter3_reg <= gmemo_addr_reg_276_pp0_iter2_reg;
                gmemo_addr_reg_276_pp0_iter4_reg <= gmemo_addr_reg_276_pp0_iter3_reg;
                gmemo_addr_reg_276_pp0_iter5_reg <= gmemo_addr_reg_276_pp0_iter4_reg;
                gmemo_addr_reg_276_pp0_iter6_reg <= gmemo_addr_reg_276_pp0_iter5_reg;
                gmemo_addr_reg_276_pp0_iter7_reg <= gmemo_addr_reg_276_pp0_iter6_reg;
                gmemo_addr_reg_276_pp0_iter8_reg <= gmemo_addr_reg_276_pp0_iter7_reg;
                gmemo_addr_reg_276_pp0_iter9_reg <= gmemo_addr_reg_276_pp0_iter8_reg;
                z_reg_288 <= z_fu_182_p2;
                z_reg_288_pp0_iter11_reg <= z_reg_288;
                z_reg_288_pp0_iter12_reg <= z_reg_288_pp0_iter11_reg;
                z_reg_288_pp0_iter13_reg <= z_reg_288_pp0_iter12_reg;
                z_reg_288_pp0_iter14_reg <= z_reg_288_pp0_iter13_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                    ni_2_cast7_reload_cast_reg_267(30 downto 0) <= ni_2_cast7_reload_cast_fu_120_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln593_fu_132_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmemo_addr_reg_276 <= sext_ln594_fu_164_p1;
            end if;
        end if;
    end process;
    ni_2_cast7_reload_cast_reg_267(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln594_1_fu_229_p2 <= std_logic_vector(unsigned(select_ln594_fu_221_p3) + unsigned(trunc_ln396_1_fu_194_p4));
    add_ln594_fu_149_p2 <= std_logic_vector(unsigned(shl_ln594_fu_143_p2) + unsigned(a));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter22, m_axi_gmemo_RVALID, m_axi_gmemo_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (m_axi_gmemo_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (m_axi_gmemo_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter22, m_axi_gmemo_AWREADY, m_axi_gmemo_WREADY, m_axi_gmemo_ARREADY, m_axi_gmemo_RVALID, m_axi_gmemo_BVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (m_axi_gmemo_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (m_axi_gmemo_WREADY = ap_const_logic_0)) or ((m_axi_gmemo_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (m_axi_gmemo_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmemo_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter22, m_axi_gmemo_AWREADY, m_axi_gmemo_WREADY, m_axi_gmemo_ARREADY, m_axi_gmemo_RVALID, m_axi_gmemo_BVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (m_axi_gmemo_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (m_axi_gmemo_WREADY = ap_const_logic_0)) or ((m_axi_gmemo_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (m_axi_gmemo_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmemo_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_gmemo_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter9 <= (m_axi_gmemo_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_pp0_stage0_iter22_assign_proc : process(m_axi_gmemo_BVALID)
    begin
                ap_block_state23_pp0_stage0_iter22 <= (m_axi_gmemo_BVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln593_fu_132_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln593_fu_132_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter21_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    gmemo_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmemo_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmemo_blk_n_AR <= m_axi_gmemo_ARREADY;
        else 
            gmemo_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmemo_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter16, m_axi_gmemo_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmemo_blk_n_AW <= m_axi_gmemo_AWREADY;
        else 
            gmemo_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmemo_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter22, m_axi_gmemo_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmemo_blk_n_B <= m_axi_gmemo_BVALID;
        else 
            gmemo_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmemo_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmemo_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmemo_blk_n_R <= m_axi_gmemo_RVALID;
        else 
            gmemo_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmemo_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter17, m_axi_gmemo_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmemo_blk_n_W <= m_axi_gmemo_WREADY;
        else 
            gmemo_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_235_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_235_ce <= ap_const_logic_1;
        else 
            grp_fu_235_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_235_p0 <= z_fu_182_p2(16 - 1 downto 0);
    grp_fu_235_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);

    grp_fu_242_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_242_ce <= ap_const_logic_1;
        else 
            grp_fu_242_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_242_p0 <= grp_fu_242_p00(16 - 1 downto 0);
    grp_fu_242_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln406_fu_191_p0),30));
    grp_fu_242_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    icmp_ln593_fu_132_p2 <= "1" when (m_fu_76 = m_9) else "0";
    m_2_fu_137_p2 <= std_logic_vector(unsigned(m_fu_76) + unsigned(ap_const_lv64_1));
    m_axi_gmemo_ARADDR <= gmemo_addr_reg_276;
    m_axi_gmemo_ARBURST <= ap_const_lv2_0;
    m_axi_gmemo_ARCACHE <= ap_const_lv4_0;
    m_axi_gmemo_ARID <= ap_const_lv1_0;
    m_axi_gmemo_ARLEN <= ap_const_lv32_1;
    m_axi_gmemo_ARLOCK <= ap_const_lv2_0;
    m_axi_gmemo_ARPROT <= ap_const_lv3_0;
    m_axi_gmemo_ARQOS <= ap_const_lv4_0;
    m_axi_gmemo_ARREGION <= ap_const_lv4_0;
    m_axi_gmemo_ARSIZE <= ap_const_lv3_0;
    m_axi_gmemo_ARUSER <= ap_const_lv1_0;

    m_axi_gmemo_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmemo_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmemo_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmemo_AWADDR <= gmemo_addr_reg_276_pp0_iter15_reg;
    m_axi_gmemo_AWBURST <= ap_const_lv2_0;
    m_axi_gmemo_AWCACHE <= ap_const_lv4_0;
    m_axi_gmemo_AWID <= ap_const_lv1_0;
    m_axi_gmemo_AWLEN <= ap_const_lv32_1;
    m_axi_gmemo_AWLOCK <= ap_const_lv2_0;
    m_axi_gmemo_AWPROT <= ap_const_lv3_0;
    m_axi_gmemo_AWQOS <= ap_const_lv4_0;
    m_axi_gmemo_AWREGION <= ap_const_lv4_0;
    m_axi_gmemo_AWSIZE <= ap_const_lv3_0;
    m_axi_gmemo_AWUSER <= ap_const_lv1_0;

    m_axi_gmemo_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmemo_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmemo_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmemo_BREADY_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmemo_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmemo_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmemo_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmemo_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmemo_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmemo_WDATA <= add_ln594_1_reg_303;
    m_axi_gmemo_WID <= ap_const_lv1_0;
    m_axi_gmemo_WLAST <= ap_const_logic_0;
    m_axi_gmemo_WSTRB <= ap_const_lv2_3;
    m_axi_gmemo_WUSER <= ap_const_lv1_0;

    m_axi_gmemo_WVALID_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmemo_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmemo_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    ni_2_cast7_reload_cast_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ni_2_cast7_reload),32));
    select_ln594_fu_221_p3 <= 
        ap_const_lv16_0 when (tmp_fu_213_p3(0) = '1') else 
        ap_const_lv16_CFFF;
        sext_ln594_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_154_p4),64));

    shl_ln594_fu_143_p2 <= std_logic_vector(shift_left(unsigned(m_fu_76),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_fu_213_p3 <= z_1_fu_207_p2(16 downto 16);
    trunc_ln396_1_fu_194_p4 <= grp_fu_242_p3(31 downto 16);
    trunc_ln_fu_154_p4 <= add_ln594_fu_149_p2(63 downto 1);
    z_1_fu_207_p2 <= std_logic_vector(unsigned(zext_ln396_1_fu_203_p1) + unsigned(ap_const_lv17_1CFFF));
    z_fu_182_p0 <= ni_2_cast7_reload_cast_reg_267(31 - 1 downto 0);
    z_fu_182_p1 <= z_fu_182_p10(16 - 1 downto 0);
    z_fu_182_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmemo_addr_read_reg_283),32));
    zext_ln396_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln396_1_fu_194_p4),17));
    zext_ln406_fu_191_p0 <= grp_fu_235_p2;
end behav;
