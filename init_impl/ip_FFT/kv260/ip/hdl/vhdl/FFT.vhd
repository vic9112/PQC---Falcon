-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of FFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFT_FFT,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=18.250000,HLS_SYN_LAT=100922,HLS_SYN_TPT=100922,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=4705,HLS_SYN_LUT=4671,HLS_VERSION=2022_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal f : STD_LOGIC_VECTOR (63 downto 0);
    signal logn : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_f_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_f_c_write : STD_LOGIC;
    signal Block_entry24_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry24_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry24_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry24_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry24_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry24_proc_U0_logn_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry24_proc_U0_logn_c_write : STD_LOGIC;
    signal Block_entry24_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_entry24_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_channel_done_hn_cast_loc_channel : STD_LOGIC;
    signal hn_cast_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hn_cast_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_hn_cast_loc_channel : STD_LOGIC;
    signal ap_channel_done_hn_loc_channel : STD_LOGIC;
    signal hn_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hn_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_hn_loc_channel : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_logn_read : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_f_read : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal f_c_full_n : STD_LOGIC;
    signal f_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal f_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal f_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal f_c_empty_n : STD_LOGIC;
    signal logn_c_full_n : STD_LOGIC;
    signal logn_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal logn_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal logn_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal logn_c_empty_n : STD_LOGIC;
    signal hn_loc_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal hn_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hn_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hn_loc_channel_empty_n : STD_LOGIC;
    signal hn_cast_loc_channel_dout : STD_LOGIC_VECTOR (62 downto 0);
    signal hn_cast_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hn_cast_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hn_cast_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Block_entry24_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_entry24_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f : IN STD_LOGIC_VECTOR (63 downto 0);
        f_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        f_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        f_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        f_c_full_n : IN STD_LOGIC;
        f_c_write : OUT STD_LOGIC );
    end component;


    component FFT_Block_entry24_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        logn : IN STD_LOGIC_VECTOR (31 downto 0);
        logn_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        logn_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        logn_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        logn_c_full_n : IN STD_LOGIC;
        logn_c_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component FFT_Loop_VITIS_LOOP_955_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (62 downto 0);
        logn_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        logn_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        logn_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        logn_empty_n : IN STD_LOGIC;
        logn_read : OUT STD_LOGIC;
        f_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        f_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        f_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        f_empty_n : IN STD_LOGIC;
        f_read : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FFT_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FFT_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FFT_fifo_w63_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (62 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (62 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FFT_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        f : OUT STD_LOGIC_VECTOR (63 downto 0);
        logn : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component FFT_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component FFT_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        f => f,
        logn => logn,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component FFT_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_DW => 64,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARADDR,
        I_ARLEN => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWVALID,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWADDR,
        I_AWLEN => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWLEN,
        I_WVALID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WVALID,
        I_WREADY => gmem0_WREADY,
        I_WDATA => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WDATA,
        I_WSTRB => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WSTRB,
        I_BVALID => gmem0_BVALID,
        I_BREADY => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_BREADY);

    entry_proc_U0 : component FFT_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        f => f,
        f_c_din => entry_proc_U0_f_c_din,
        f_c_num_data_valid => f_c_num_data_valid,
        f_c_fifo_cap => f_c_fifo_cap,
        f_c_full_n => f_c_full_n,
        f_c_write => entry_proc_U0_f_c_write);

    Block_entry24_proc_U0 : component FFT_Block_entry24_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry24_proc_U0_ap_start,
        ap_done => Block_entry24_proc_U0_ap_done,
        ap_continue => Block_entry24_proc_U0_ap_continue,
        ap_idle => Block_entry24_proc_U0_ap_idle,
        ap_ready => Block_entry24_proc_U0_ap_ready,
        logn => logn,
        logn_c_din => Block_entry24_proc_U0_logn_c_din,
        logn_c_num_data_valid => logn_c_num_data_valid,
        logn_c_fifo_cap => logn_c_fifo_cap,
        logn_c_full_n => logn_c_full_n,
        logn_c_write => Block_entry24_proc_U0_logn_c_write,
        ap_return_0 => Block_entry24_proc_U0_ap_return_0,
        ap_return_1 => Block_entry24_proc_U0_ap_return_1);

    Loop_VITIS_LOOP_955_1_proc_U0 : component FFT_Loop_VITIS_LOOP_955_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_VITIS_LOOP_955_1_proc_U0_ap_start,
        ap_done => Loop_VITIS_LOOP_955_1_proc_U0_ap_done,
        ap_continue => Loop_VITIS_LOOP_955_1_proc_U0_ap_continue,
        ap_idle => Loop_VITIS_LOOP_955_1_proc_U0_ap_idle,
        ap_ready => Loop_VITIS_LOOP_955_1_proc_U0_ap_ready,
        p_read => hn_cast_loc_channel_dout,
        logn_dout => logn_c_dout,
        logn_num_data_valid => logn_c_num_data_valid,
        logn_fifo_cap => logn_c_fifo_cap,
        logn_empty_n => logn_c_empty_n,
        logn_read => Loop_VITIS_LOOP_955_1_proc_U0_logn_read,
        f_dout => f_c_dout,
        f_num_data_valid => f_c_num_data_valid,
        f_fifo_cap => f_c_fifo_cap,
        f_empty_n => f_c_empty_n,
        f_read => Loop_VITIS_LOOP_955_1_proc_U0_f_read,
        m_axi_gmem0_AWVALID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => gmem0_AWREADY,
        m_axi_gmem0_AWADDR => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => gmem0_WREADY,
        m_axi_gmem0_WDATA => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => gmem0_BVALID,
        m_axi_gmem0_BREADY => Loop_VITIS_LOOP_955_1_proc_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => gmem0_BRESP,
        m_axi_gmem0_BID => gmem0_BID,
        m_axi_gmem0_BUSER => gmem0_BUSER,
        p_read1 => hn_loc_channel_dout);

    f_c_U : component FFT_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_f_c_din,
        if_full_n => f_c_full_n,
        if_write => entry_proc_U0_f_c_write,
        if_dout => f_c_dout,
        if_num_data_valid => f_c_num_data_valid,
        if_fifo_cap => f_c_fifo_cap,
        if_empty_n => f_c_empty_n,
        if_read => Loop_VITIS_LOOP_955_1_proc_U0_f_read);

    logn_c_U : component FFT_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry24_proc_U0_logn_c_din,
        if_full_n => logn_c_full_n,
        if_write => Block_entry24_proc_U0_logn_c_write,
        if_dout => logn_c_dout,
        if_num_data_valid => logn_c_num_data_valid,
        if_fifo_cap => logn_c_fifo_cap,
        if_empty_n => logn_c_empty_n,
        if_read => Loop_VITIS_LOOP_955_1_proc_U0_logn_read);

    hn_loc_channel_U : component FFT_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry24_proc_U0_ap_return_0,
        if_full_n => hn_loc_channel_full_n,
        if_write => ap_channel_done_hn_loc_channel,
        if_dout => hn_loc_channel_dout,
        if_num_data_valid => hn_loc_channel_num_data_valid,
        if_fifo_cap => hn_loc_channel_fifo_cap,
        if_empty_n => hn_loc_channel_empty_n,
        if_read => Loop_VITIS_LOOP_955_1_proc_U0_ap_ready);

    hn_cast_loc_channel_U : component FFT_fifo_w63_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry24_proc_U0_ap_return_1,
        if_full_n => hn_cast_loc_channel_full_n,
        if_write => ap_channel_done_hn_cast_loc_channel,
        if_dout => hn_cast_loc_channel_dout,
        if_num_data_valid => hn_cast_loc_channel_num_data_valid,
        if_fifo_cap => hn_cast_loc_channel_fifo_cap,
        if_empty_n => hn_cast_loc_channel_empty_n,
        if_read => Loop_VITIS_LOOP_955_1_proc_U0_ap_ready);





    ap_sync_reg_Block_entry24_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_entry24_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_entry24_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_entry24_proc_U0_ap_ready <= ap_sync_Block_entry24_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready <= ap_sync_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hn_cast_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_hn_cast_loc_channel <= ap_const_logic_0;
            else
                if (((Block_entry24_proc_U0_ap_done and Block_entry24_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hn_cast_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hn_cast_loc_channel <= ap_sync_channel_write_hn_cast_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hn_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_hn_loc_channel <= ap_const_logic_0;
            else
                if (((Block_entry24_proc_U0_ap_done and Block_entry24_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hn_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hn_loc_channel <= ap_sync_channel_write_hn_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_entry24_proc_U0_ap_continue <= (ap_sync_channel_write_hn_loc_channel and ap_sync_channel_write_hn_cast_loc_channel);
    Block_entry24_proc_U0_ap_start <= ((ap_sync_reg_Block_entry24_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_VITIS_LOOP_955_1_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_VITIS_LOOP_955_1_proc_U0_ap_start <= (hn_loc_channel_empty_n and hn_cast_loc_channel_empty_n and (ap_sync_reg_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ap_channel_done_hn_cast_loc_channel <= ((ap_sync_reg_channel_write_hn_cast_loc_channel xor ap_const_logic_1) and Block_entry24_proc_U0_ap_done);
    ap_channel_done_hn_loc_channel <= ((ap_sync_reg_channel_write_hn_loc_channel xor ap_const_logic_1) and Block_entry24_proc_U0_ap_done);
    ap_done <= Loop_VITIS_LOOP_955_1_proc_U0_ap_done;
    ap_idle <= ((hn_cast_loc_channel_empty_n xor ap_const_logic_1) and (hn_loc_channel_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle and Loop_VITIS_LOOP_955_1_proc_U0_ap_idle and Block_entry24_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_entry24_proc_U0_ap_ready <= (ap_sync_reg_Block_entry24_proc_U0_ap_ready or Block_entry24_proc_U0_ap_ready);
    ap_sync_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready <= (ap_sync_reg_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready or Loop_VITIS_LOOP_955_1_proc_U0_ap_ready);
    ap_sync_channel_write_hn_cast_loc_channel <= ((hn_cast_loc_channel_full_n and ap_channel_done_hn_cast_loc_channel) or ap_sync_reg_channel_write_hn_cast_loc_channel);
    ap_sync_channel_write_hn_loc_channel <= ((hn_loc_channel_full_n and ap_channel_done_hn_loc_channel) or ap_sync_reg_channel_write_hn_loc_channel);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_Loop_VITIS_LOOP_955_1_proc_U0_ap_ready and ap_sync_Block_entry24_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    gmem0_BID <= ap_const_lv1_0;
    gmem0_BRESP <= ap_const_lv2_0;
    gmem0_BUSER <= ap_const_lv1_0;
    gmem0_RID <= ap_const_lv1_0;
    gmem0_RLAST <= ap_const_logic_0;
    gmem0_RRESP <= ap_const_lv2_0;
    gmem0_RUSER <= ap_const_lv1_0;
end behav;
