-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stage0_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_4_ce0 : OUT STD_LOGIC;
    stage0_4_we0 : OUT STD_LOGIC;
    stage0_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_4_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_4_ce1 : OUT STD_LOGIC;
    stage0_4_we1 : OUT STD_LOGIC;
    stage0_4_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_6_ce0 : OUT STD_LOGIC;
    stage0_6_we0 : OUT STD_LOGIC;
    stage0_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_6_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_6_ce1 : OUT STD_LOGIC;
    stage0_6_we1 : OUT STD_LOGIC;
    stage0_6_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_buf_ce0 : OUT STD_LOGIC;
    in_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_buf_ce1 : OUT STD_LOGIC;
    in_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_ce0 : OUT STD_LOGIC;
    stage0_we0 : OUT STD_LOGIC;
    stage0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_ce1 : OUT STD_LOGIC;
    stage0_we1 : OUT STD_LOGIC;
    stage0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_5_ce0 : OUT STD_LOGIC;
    stage0_5_we0 : OUT STD_LOGIC;
    stage0_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_5_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_5_ce1 : OUT STD_LOGIC;
    stage0_5_we1 : OUT STD_LOGIC;
    stage0_5_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_E130 : STD_LOGIC_VECTOR (15 downto 0) := "1110000100110000";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";
    constant ap_const_lv29_1ED0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001111011010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_241_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_684 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln_reg_694 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_reg_694_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_reg_694_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_reg_694_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln64_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_700_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_700_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_700_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_278_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_9_reg_704 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln64_4_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_4_reg_714 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_4_reg_714_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_4_reg_714_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_4_reg_714_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_4_reg_714_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal in_buf_load_reg_723 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_load_reg_723_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_load_2_reg_734 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_load_2_reg_734_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_load_2_reg_734_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal u_reg_740 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_reg_740_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal u_reg_740_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal u_7_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_7_reg_747_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal u_7_reg_747_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal u_7_reg_747_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_649_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp1_49_reg_779 : STD_LOGIC_VECTOR (29 downto 0);
    signal stage0_4_addr_reg_789 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_reg_794 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_4_addr_8_reg_799 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_8_reg_804 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln54_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln54_19_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln52_2_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_84 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_15_fu_309_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_14 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln64_fu_431_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_fu_472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_4_fu_586_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_2_fu_620_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln54_cast_fu_245_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln64_fu_268_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln54_4_cast_fu_284_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln64_fu_297_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln55_fu_328_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_628_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln55_2_fu_331_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_635_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_642_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_655_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln_fu_349_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_66_fu_358_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_56_fu_368_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_fu_364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_72_fu_384_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_1_fu_346_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_fu_394_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_fu_400_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_1_fu_390_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_47_fu_404_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_57_fu_410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_423_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_20_fu_418_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_fu_343_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_48_fu_446_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_58_fu_452_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_fu_464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_fu_460_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln69_cast_fu_480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_664_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_2_fu_504_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_69_fu_513_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_59_fu_523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_10_fu_531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_4_fu_519_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_71_fu_539_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_5_fu_501_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_4_fu_549_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_2_fu_555_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_5_fu_545_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_50_fu_559_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_60_fu_565_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_10_fu_578_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_21_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_4_fu_498_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_51_fu_594_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_61_fu_600_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_10_fu_612_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_10_fu_608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_628_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_635_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_642_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_642_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_649_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_649_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_655_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_655_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_655_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_664_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_664_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_664_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_642_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_649_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_655_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_655_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_664_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_664_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NTT_mul_mul_16ns_14s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component NTT_mac_muladd_16ns_13ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16ns_14s_16_4_1_U5 : component NTT_mul_mul_16ns_14s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_buf_q1,
        din1 => grp_fu_628_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_628_p2);

    mul_mul_16ns_14s_16_4_1_U6 : component NTT_mul_mul_16ns_14s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_buf_q0,
        din1 => grp_fu_635_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_635_p2);

    mul_mul_16ns_14ns_30_4_1_U7 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_642_p0,
        din1 => grp_fu_642_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_642_p2);

    mul_mul_16ns_14ns_30_4_1_U8 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_649_p0,
        din1 => grp_fu_649_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_649_p2);

    mac_muladd_16ns_13ns_30ns_31_4_1_U9 : component NTT_mac_muladd_16ns_13ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_655_p0,
        din1 => grp_fu_655_p1,
        din2 => grp_fu_655_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_655_p3);

    mac_muladd_16ns_13ns_30ns_31_4_1_U10 : component NTT_mac_muladd_16ns_13ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_664_p0,
        din1 => grp_fu_664_p1,
        din2 => grp_fu_664_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_664_p3);

    flow_control_loop_pipe_sequential_init_U : component NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    n_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_233_p3 = ap_const_lv1_0))) then 
                    n_fu_84 <= n_15_fu_309_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_84 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                in_buf_load_2_reg_734_pp0_iter1_reg <= in_buf_load_2_reg_734;
                in_buf_load_2_reg_734_pp0_iter2_reg <= in_buf_load_2_reg_734_pp0_iter1_reg;
                in_buf_load_reg_723_pp0_iter1_reg <= in_buf_load_reg_723;
                tmp1_49_reg_779 <= grp_fu_649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_233_p3 = ap_const_lv1_0))) then
                    i_9_reg_704(8 downto 1) <= i_9_fu_278_p2(8 downto 1);
                i_reg_684 <= i_fu_241_p1;
                icmp_ln64_4_reg_714 <= icmp_ln64_4_fu_303_p2;
                icmp_ln64_reg_700 <= icmp_ln64_fu_272_p2;
                lshr_ln_reg_694 <= ap_sig_allocacmp_n_14(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln64_4_reg_714_pp0_iter1_reg <= icmp_ln64_4_reg_714;
                icmp_ln64_4_reg_714_pp0_iter2_reg <= icmp_ln64_4_reg_714_pp0_iter1_reg;
                icmp_ln64_4_reg_714_pp0_iter3_reg <= icmp_ln64_4_reg_714_pp0_iter2_reg;
                icmp_ln64_4_reg_714_pp0_iter4_reg <= icmp_ln64_4_reg_714_pp0_iter3_reg;
                icmp_ln64_reg_700_pp0_iter1_reg <= icmp_ln64_reg_700;
                icmp_ln64_reg_700_pp0_iter2_reg <= icmp_ln64_reg_700_pp0_iter1_reg;
                icmp_ln64_reg_700_pp0_iter3_reg <= icmp_ln64_reg_700_pp0_iter2_reg;
                lshr_ln_reg_694_pp0_iter1_reg <= lshr_ln_reg_694;
                lshr_ln_reg_694_pp0_iter2_reg <= lshr_ln_reg_694_pp0_iter1_reg;
                lshr_ln_reg_694_pp0_iter3_reg <= lshr_ln_reg_694_pp0_iter2_reg;
                    stage0_4_addr_8_reg_799(6 downto 0) <= zext_ln69_fu_487_p1(8 - 1 downto 0)(6 downto 0);
                    stage0_4_addr_reg_789(6 downto 0) <= zext_ln64_fu_439_p1(8 - 1 downto 0)(6 downto 0);
                    stage0_6_addr_8_reg_804(6 downto 0) <= zext_ln69_fu_487_p1(8 - 1 downto 0)(6 downto 0);
                    stage0_6_addr_reg_794(6 downto 0) <= zext_ln64_fu_439_p1(8 - 1 downto 0)(6 downto 0);
                tmp_reg_680 <= ap_sig_allocacmp_n_14(9 downto 9);
                u_7_reg_747_pp0_iter2_reg <= u_7_reg_747;
                u_7_reg_747_pp0_iter3_reg <= u_7_reg_747_pp0_iter2_reg;
                u_7_reg_747_pp0_iter4_reg <= u_7_reg_747_pp0_iter3_reg;
                u_reg_740_pp0_iter2_reg <= u_reg_740;
                u_reg_740_pp0_iter3_reg <= u_reg_740_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_680 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                in_buf_load_2_reg_734 <= in_buf_q0;
                in_buf_load_reg_723 <= in_buf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                u_7_reg_747 <= in_buf_q0;
                u_reg_740 <= in_buf_q1;
            end if;
        end if;
    end process;
    i_9_reg_704(0) <= '1';
    stage0_4_addr_reg_789(7) <= '0';
    stage0_6_addr_reg_794(7) <= '0';
    stage0_4_addr_8_reg_799(7) <= '1';
    stage0_6_addr_8_reg_804(7) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln62_4_fu_549_p2 <= std_logic_vector(unsigned(zext_ln42_5_fu_501_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln62_fu_394_p2 <= std_logic_vector(unsigned(zext_ln42_1_fu_346_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln64_20_fu_418_p2 <= std_logic_vector(unsigned(u_reg_740_pp0_iter3_reg) + unsigned(tmp2_72_fu_384_p2));
    add_ln64_21_fu_573_p2 <= std_logic_vector(unsigned(u_7_reg_747_pp0_iter4_reg) + unsigned(tmp2_71_fu_539_p2));
    add_ln64_4_fu_586_p2 <= std_logic_vector(unsigned(select_ln64_10_fu_578_p3) + unsigned(add_ln64_21_fu_573_p2));
    add_ln64_fu_431_p2 <= std_logic_vector(unsigned(select_ln64_fu_423_p3) + unsigned(add_ln64_20_fu_418_p2));
    add_ln69_2_fu_620_p2 <= std_logic_vector(unsigned(select_ln69_10_fu_612_p3) + unsigned(trunc_ln68_10_fu_608_p1));
    add_ln69_fu_472_p2 <= std_logic_vector(unsigned(select_ln69_fu_464_p3) + unsigned(trunc_ln68_fu_460_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, tmp_reg_680)
    begin
        if (((tmp_reg_680 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_14_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_14 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n_14 <= n_fu_84;
        end if; 
    end process;

    grp_fu_628_p1 <= ap_const_lv16_E130(14 - 1 downto 0);
    grp_fu_635_p1 <= ap_const_lv16_E130(14 - 1 downto 0);
    grp_fu_642_p0 <= grp_fu_642_p00(16 - 1 downto 0);
    grp_fu_642_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55_fu_328_p0),30));
    grp_fu_642_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_649_p0 <= grp_fu_649_p00(16 - 1 downto 0);
    grp_fu_649_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55_2_fu_331_p0),30));
    grp_fu_649_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_655_p0 <= grp_fu_655_p00(16 - 1 downto 0);
    grp_fu_655_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_load_reg_723_pp0_iter1_reg),29));
    grp_fu_655_p1 <= ap_const_lv29_1ED0(13 - 1 downto 0);
    grp_fu_655_p2 <= grp_fu_655_p20(30 - 1 downto 0);
    grp_fu_655_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_642_p2),31));
    grp_fu_664_p0 <= grp_fu_664_p00(16 - 1 downto 0);
    grp_fu_664_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_load_2_reg_734_pp0_iter2_reg),29));
    grp_fu_664_p1 <= ap_const_lv29_1ED0(13 - 1 downto 0);
    grp_fu_664_p2 <= grp_fu_664_p20(30 - 1 downto 0);
    grp_fu_664_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_49_reg_779),31));
    i_9_fu_278_p2 <= (i_fu_241_p1 or ap_const_lv9_1);
    i_fu_241_p1 <= ap_sig_allocacmp_n_14(9 - 1 downto 0);
    icmp_ln64_4_fu_303_p2 <= "1" when (or_ln64_fu_297_p2 = ap_const_lv2_1) else "0";
    icmp_ln64_fu_272_p2 <= "1" when (trunc_ln64_fu_268_p1 = ap_const_lv2_0) else "0";

    in_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln54_19_fu_292_p1, ap_block_pp0_stage1, zext_ln52_2_fu_324_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                in_buf_address0 <= zext_ln52_2_fu_324_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                in_buf_address0 <= zext_ln54_19_fu_292_p1(10 - 1 downto 0);
            else 
                in_buf_address0 <= "XXXXXXXXXX";
            end if;
        else 
            in_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln54_fu_253_p1, ap_block_pp0_stage0, zext_ln52_fu_320_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                in_buf_address1 <= zext_ln52_fu_320_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                in_buf_address1 <= zext_ln54_fu_253_p1(10 - 1 downto 0);
            else 
                in_buf_address1 <= "XXXXXXXXXX";
            end if;
        else 
            in_buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_buf_ce0 <= ap_const_logic_1;
        else 
            in_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_buf_ce1 <= ap_const_logic_1;
        else 
            in_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    n_15_fu_309_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_14) + unsigned(ap_const_lv10_2));
    or_ln64_fu_297_p2 <= (trunc_ln64_fu_268_p1 or ap_const_lv2_1);
    select_ln58_10_fu_531_p3 <= 
        ap_const_lv16_3001 when (tmp_59_fu_523_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln58_fu_376_p3 <= 
        ap_const_lv16_3001 when (tmp_56_fu_368_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln64_10_fu_578_p3 <= 
        ap_const_lv16_0 when (tmp_60_fu_565_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln64_fu_423_p3 <= 
        ap_const_lv16_0 when (tmp_57_fu_410_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln69_10_fu_612_p3 <= 
        ap_const_lv16_3001 when (tmp_61_fu_600_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln69_fu_464_p3 <= 
        ap_const_lv16_3001 when (tmp_58_fu_452_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln43_1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_72_fu_384_p2),18));

        sext_ln43_4_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_69_fu_513_p2),16));

        sext_ln43_5_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_71_fu_539_p2),18));

        sext_ln43_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_66_fu_358_p2),16));

        sext_ln62_2_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_4_fu_549_p2),18));

        sext_ln62_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_fu_394_p2),18));

    stage0_4_address0 <= stage0_4_addr_8_reg_799;
    stage0_4_address1 <= stage0_4_addr_reg_789;

    stage0_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_4_ce0 <= ap_const_logic_1;
        else 
            stage0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_4_ce1 <= ap_const_logic_1;
        else 
            stage0_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_4_d0 <= add_ln69_2_fu_620_p2;
    stage0_4_d1 <= add_ln64_4_fu_586_p2;

    stage0_4_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, icmp_ln64_4_reg_714_pp0_iter4_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_4_reg_714_pp0_iter4_reg = ap_const_lv1_1))) then 
            stage0_4_we0 <= ap_const_logic_1;
        else 
            stage0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_4_we1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, icmp_ln64_4_reg_714_pp0_iter4_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_4_reg_714_pp0_iter4_reg = ap_const_lv1_1))) then 
            stage0_4_we1 <= ap_const_logic_1;
        else 
            stage0_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_5_address0 <= zext_ln69_fu_487_p1(8 - 1 downto 0);
    stage0_5_address1 <= zext_ln64_fu_439_p1(8 - 1 downto 0);

    stage0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_5_ce0 <= ap_const_logic_1;
        else 
            stage0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_5_ce1 <= ap_const_logic_1;
        else 
            stage0_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_5_d0 <= add_ln69_fu_472_p2;
    stage0_5_d1 <= add_ln64_fu_431_p2;

    stage0_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln64_reg_700_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_reg_700_pp0_iter3_reg = ap_const_lv1_0))) then 
            stage0_5_we0 <= ap_const_logic_1;
        else 
            stage0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_5_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln64_reg_700_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_reg_700_pp0_iter3_reg = ap_const_lv1_0))) then 
            stage0_5_we1 <= ap_const_logic_1;
        else 
            stage0_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_6_address0 <= stage0_6_addr_8_reg_804;
    stage0_6_address1 <= stage0_6_addr_reg_794;

    stage0_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_6_ce0 <= ap_const_logic_1;
        else 
            stage0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_6_ce1 <= ap_const_logic_1;
        else 
            stage0_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_6_d0 <= add_ln69_2_fu_620_p2;
    stage0_6_d1 <= add_ln64_4_fu_586_p2;

    stage0_6_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, icmp_ln64_4_reg_714_pp0_iter4_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_4_reg_714_pp0_iter4_reg = ap_const_lv1_0))) then 
            stage0_6_we0 <= ap_const_logic_1;
        else 
            stage0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_6_we1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, icmp_ln64_4_reg_714_pp0_iter4_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_4_reg_714_pp0_iter4_reg = ap_const_lv1_0))) then 
            stage0_6_we1 <= ap_const_logic_1;
        else 
            stage0_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_address0 <= zext_ln69_fu_487_p1(8 - 1 downto 0);
    stage0_address1 <= zext_ln64_fu_439_p1(8 - 1 downto 0);

    stage0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_ce0 <= ap_const_logic_1;
        else 
            stage0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_ce1 <= ap_const_logic_1;
        else 
            stage0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_d0 <= add_ln69_fu_472_p2;
    stage0_d1 <= add_ln64_fu_431_p2;

    stage0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln64_reg_700_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_reg_700_pp0_iter3_reg = ap_const_lv1_1))) then 
            stage0_we0 <= ap_const_logic_1;
        else 
            stage0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln64_reg_700_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_reg_700_pp0_iter3_reg = ap_const_lv1_1))) then 
            stage0_we1 <= ap_const_logic_1;
        else 
            stage0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_47_fu_404_p2 <= std_logic_vector(signed(sext_ln62_fu_400_p1) + signed(sext_ln43_1_fu_390_p1));
    tmp1_48_fu_446_p2 <= std_logic_vector(unsigned(zext_ln42_fu_343_p1) - unsigned(sext_ln43_1_fu_390_p1));
    tmp1_50_fu_559_p2 <= std_logic_vector(signed(sext_ln62_2_fu_555_p1) + signed(sext_ln43_5_fu_545_p1));
    tmp1_51_fu_594_p2 <= std_logic_vector(unsigned(zext_ln42_4_fu_498_p1) - unsigned(sext_ln43_5_fu_545_p1));
    tmp2_66_fu_358_p2 <= std_logic_vector(unsigned(trunc_ln_fu_349_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_69_fu_513_p2 <= std_logic_vector(unsigned(trunc_ln43_2_fu_504_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_71_fu_539_p2 <= std_logic_vector(unsigned(select_ln58_10_fu_531_p3) + unsigned(sext_ln43_4_fu_519_p1));
    tmp2_72_fu_384_p2 <= std_logic_vector(unsigned(select_ln58_fu_376_p3) + unsigned(sext_ln43_fu_364_p1));
    tmp_56_fu_368_p3 <= tmp2_66_fu_358_p2(14 downto 14);
    tmp_57_fu_410_p3 <= tmp1_47_fu_404_p2(17 downto 17);
    tmp_58_fu_452_p3 <= tmp1_48_fu_446_p2(17 downto 17);
    tmp_59_fu_523_p3 <= tmp2_69_fu_513_p2(14 downto 14);
    tmp_60_fu_565_p3 <= tmp1_50_fu_559_p2(17 downto 17);
    tmp_61_fu_600_p3 <= tmp1_51_fu_594_p2(17 downto 17);
    tmp_fu_233_p3 <= ap_sig_allocacmp_n_14(9 downto 9);
    trunc_ln43_2_fu_504_p4 <= grp_fu_664_p3(30 downto 16);
    trunc_ln64_fu_268_p1 <= ap_sig_allocacmp_n_14(2 - 1 downto 0);
    trunc_ln68_10_fu_608_p1 <= tmp1_51_fu_594_p2(16 - 1 downto 0);
    trunc_ln68_fu_460_p1 <= tmp1_48_fu_446_p2(16 - 1 downto 0);
    trunc_ln_fu_349_p4 <= grp_fu_655_p3(30 downto 16);
    zext_ln42_1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_740_pp0_iter3_reg),17));
    zext_ln42_4_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_7_reg_747_pp0_iter4_reg),18));
    zext_ln42_5_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_7_reg_747_pp0_iter4_reg),17));
    zext_ln42_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_740_pp0_iter3_reg),18));
    zext_ln52_2_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_704),64));
    zext_ln52_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_684),64));
    zext_ln54_19_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln54_4_cast_fu_284_p3),64));
    zext_ln54_4_cast_fu_284_p3 <= (ap_const_lv1_1 & i_9_fu_278_p2);
    zext_ln54_cast_fu_245_p3 <= (ap_const_lv1_1 & i_fu_241_p1);
    zext_ln54_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln54_cast_fu_245_p3),64));
    zext_ln55_2_fu_331_p0 <= grp_fu_635_p2;
    zext_ln55_fu_328_p0 <= grp_fu_628_p2;
    zext_ln64_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_694_pp0_iter3_reg),64));
    zext_ln69_cast_fu_480_p3 <= (ap_const_lv1_1 & lshr_ln_reg_694_pp0_iter3_reg);
    zext_ln69_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln69_cast_fu_480_p3),64));
end behav;
