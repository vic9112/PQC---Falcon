// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stage1_1_address0,
        stage1_1_ce0,
        stage1_1_we0,
        stage1_1_d0,
        stage1_3_address0,
        stage1_3_ce0,
        stage1_3_we0,
        stage1_3_d0,
        stage0_4_address0,
        stage0_4_ce0,
        stage0_4_q0,
        stage0_4_address1,
        stage0_4_ce1,
        stage0_4_q1,
        stage0_6_address0,
        stage0_6_ce0,
        stage0_6_q0,
        stage0_6_address1,
        stage0_6_ce1,
        stage0_6_q1,
        stage1_address0,
        stage1_ce0,
        stage1_we0,
        stage1_d0,
        stage1_2_address0,
        stage1_2_ce0,
        stage1_2_we0,
        stage1_2_d0,
        stage0_address0,
        stage0_ce0,
        stage0_q0,
        stage0_address1,
        stage0_ce1,
        stage0_q1,
        stage0_5_address0,
        stage0_5_ce0,
        stage0_5_q0,
        stage0_5_address1,
        stage0_5_ce1,
        stage0_5_q1,
        GMb_address0,
        GMb_ce0,
        GMb_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] stage1_1_address0;
output   stage1_1_ce0;
output   stage1_1_we0;
output  [15:0] stage1_1_d0;
output  [7:0] stage1_3_address0;
output   stage1_3_ce0;
output   stage1_3_we0;
output  [15:0] stage1_3_d0;
output  [7:0] stage0_4_address0;
output   stage0_4_ce0;
input  [15:0] stage0_4_q0;
output  [7:0] stage0_4_address1;
output   stage0_4_ce1;
input  [15:0] stage0_4_q1;
output  [7:0] stage0_6_address0;
output   stage0_6_ce0;
input  [15:0] stage0_6_q0;
output  [7:0] stage0_6_address1;
output   stage0_6_ce1;
input  [15:0] stage0_6_q1;
output  [7:0] stage1_address0;
output   stage1_ce0;
output   stage1_we0;
output  [15:0] stage1_d0;
output  [7:0] stage1_2_address0;
output   stage1_2_ce0;
output   stage1_2_we0;
output  [15:0] stage1_2_d0;
output  [7:0] stage0_address0;
output   stage0_ce0;
input  [15:0] stage0_q0;
output  [7:0] stage0_address1;
output   stage0_ce1;
input  [15:0] stage0_q1;
output  [7:0] stage0_5_address0;
output   stage0_5_ce0;
input  [15:0] stage0_5_q0;
output  [7:0] stage0_5_address1;
output   stage0_5_ce1;
input  [15:0] stage0_5_q1;
output  [9:0] GMb_address0;
output   GMb_ce0;
input  [13:0] GMb_q0;

reg ap_idle;
reg[7:0] stage1_1_address0;
reg stage1_1_ce0;
reg stage1_1_we0;
reg[15:0] stage1_1_d0;
reg[7:0] stage1_3_address0;
reg stage1_3_ce0;
reg stage1_3_we0;
reg[15:0] stage1_3_d0;
reg stage0_4_ce0;
reg stage0_4_ce1;
reg stage0_6_ce0;
reg stage0_6_ce1;
reg[7:0] stage1_address0;
reg stage1_ce0;
reg stage1_we0;
reg[15:0] stage1_d0;
reg[7:0] stage1_2_address0;
reg stage1_2_ce0;
reg stage1_2_we0;
reg[15:0] stage1_2_d0;
reg stage0_ce0;
reg stage0_ce1;
reg stage0_5_ce0;
reg stage0_5_ce1;
reg GMb_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] tmp_reg_876;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] tmp_fu_301_p3;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_876_pp0_iter1_reg;
reg   [0:0] tmp_reg_876_pp0_iter2_reg;
reg   [0:0] tmp_reg_876_pp0_iter3_reg;
reg   [0:0] tmp_reg_876_pp0_iter4_reg;
wire   [1:0] trunc_ln48_fu_313_p1;
reg   [1:0] trunc_ln48_reg_880;
reg   [1:0] trunc_ln48_reg_880_pp0_iter1_reg;
reg   [1:0] trunc_ln48_reg_880_pp0_iter2_reg;
reg   [1:0] trunc_ln48_reg_880_pp0_iter3_reg;
reg   [1:0] trunc_ln48_reg_880_pp0_iter4_reg;
reg   [7:0] lshr_ln2_reg_892;
reg   [7:0] lshr_ln2_reg_892_pp0_iter1_reg;
reg   [7:0] lshr_ln2_reg_892_pp0_iter2_reg;
reg   [7:0] lshr_ln2_reg_892_pp0_iter3_reg;
wire   [0:0] icmp_ln64_1_fu_394_p2;
reg   [0:0] icmp_ln64_1_reg_907;
reg   [0:0] icmp_ln64_1_reg_907_pp0_iter1_reg;
reg   [0:0] icmp_ln64_1_reg_907_pp0_iter2_reg;
reg   [0:0] icmp_ln64_1_reg_907_pp0_iter3_reg;
reg   [0:0] icmp_ln64_1_reg_907_pp0_iter4_reg;
reg   [0:0] icmp_ln64_1_reg_907_pp0_iter5_reg;
reg   [7:0] stage1_addr_2_reg_911;
reg   [7:0] stage1_addr_2_reg_911_pp0_iter1_reg;
reg   [7:0] stage1_addr_2_reg_911_pp0_iter2_reg;
reg   [7:0] stage1_addr_2_reg_911_pp0_iter3_reg;
reg   [7:0] stage1_addr_2_reg_911_pp0_iter4_reg;
reg   [7:0] stage1_addr_2_reg_911_pp0_iter5_reg;
reg   [7:0] stage1_2_addr_2_reg_916;
reg   [7:0] stage1_2_addr_2_reg_916_pp0_iter1_reg;
reg   [7:0] stage1_2_addr_2_reg_916_pp0_iter2_reg;
reg   [7:0] stage1_2_addr_2_reg_916_pp0_iter3_reg;
reg   [7:0] stage1_2_addr_2_reg_916_pp0_iter4_reg;
reg   [7:0] stage1_2_addr_2_reg_916_pp0_iter5_reg;
reg   [7:0] lshr_ln52_2_reg_921;
reg   [7:0] lshr_ln52_2_reg_921_pp0_iter1_reg;
reg   [7:0] lshr_ln52_2_reg_921_pp0_iter2_reg;
reg   [7:0] lshr_ln52_2_reg_921_pp0_iter3_reg;
reg   [7:0] lshr_ln52_2_reg_921_pp0_iter4_reg;
reg   [7:0] stage1_1_addr_2_reg_936;
reg   [7:0] stage1_1_addr_2_reg_936_pp0_iter1_reg;
reg   [7:0] stage1_1_addr_2_reg_936_pp0_iter2_reg;
reg   [7:0] stage1_1_addr_2_reg_936_pp0_iter3_reg;
reg   [7:0] stage1_1_addr_2_reg_936_pp0_iter4_reg;
reg   [7:0] stage1_1_addr_2_reg_936_pp0_iter5_reg;
reg   [7:0] stage1_3_addr_2_reg_941;
reg   [7:0] stage1_3_addr_2_reg_941_pp0_iter1_reg;
reg   [7:0] stage1_3_addr_2_reg_941_pp0_iter2_reg;
reg   [7:0] stage1_3_addr_2_reg_941_pp0_iter3_reg;
reg   [7:0] stage1_3_addr_2_reg_941_pp0_iter4_reg;
reg   [7:0] stage1_3_addr_2_reg_941_pp0_iter5_reg;
wire   [29:0] zext_ln41_fu_461_p1;
wire    ap_block_pp0_stage1_11001;
wire   [1:0] or_ln48_fu_480_p2;
reg   [1:0] or_ln48_reg_957;
reg   [1:0] or_ln48_reg_957_pp0_iter1_reg;
reg   [1:0] or_ln48_reg_957_pp0_iter2_reg;
reg   [1:0] or_ln48_reg_957_pp0_iter3_reg;
reg   [1:0] or_ln48_reg_957_pp0_iter4_reg;
wire   [0:0] icmp_ln64_fu_503_p2;
reg   [0:0] icmp_ln64_reg_967;
reg   [0:0] icmp_ln64_reg_967_pp0_iter1_reg;
reg   [0:0] icmp_ln64_reg_967_pp0_iter2_reg;
reg   [0:0] icmp_ln64_reg_967_pp0_iter3_reg;
reg   [0:0] icmp_ln64_reg_967_pp0_iter4_reg;
reg   [0:0] icmp_ln64_reg_967_pp0_iter5_reg;
wire   [29:0] grp_fu_824_p2;
reg   [29:0] tmp2_reg_971;
reg   [29:0] tmp2_reg_971_pp0_iter3_reg;
reg   [29:0] tmp2_reg_971_pp0_iter4_reg;
wire   [29:0] grp_fu_831_p2;
reg   [29:0] tmp2_54_reg_981;
reg   [29:0] tmp2_54_reg_981_pp0_iter3_reg;
reg   [29:0] tmp2_54_reg_981_pp0_iter4_reg;
wire   [15:0] grp_fu_845_p2;
reg  signed [15:0] mul_ln55_8_reg_996;
reg   [7:0] stage1_addr_reg_1011;
reg   [7:0] stage1_2_addr_reg_1016;
wire   [15:0] u_1_fu_528_p5;
reg   [15:0] u_1_reg_1026;
wire   [15:0] add_ln69_1_fu_664_p2;
reg   [15:0] add_ln69_1_reg_1038;
reg   [7:0] stage1_1_addr_reg_1059;
reg   [7:0] stage1_3_addr_reg_1064;
wire   [15:0] add_ln69_5_fu_818_p2;
reg   [15:0] add_ln69_5_reg_1069;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln50_fu_355_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln54_2_fu_386_p1;
wire   [63:0] zext_ln54_8_fu_442_p1;
wire   [63:0] zext_ln52_1_fu_518_p1;
wire   [63:0] zext_ln52_4_fu_670_p1;
reg   [9:0] n_1_fu_100;
wire   [9:0] n_11_fu_450_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_n;
wire   [15:0] add_ln64_1_fu_630_p2;
wire    ap_block_pp0_stage1;
wire   [15:0] add_ln64_6_fu_784_p2;
wire   [8:0] trunc_ln44_fu_309_p1;
wire   [0:0] tmp_43_fu_321_p3;
wire   [8:0] and_ln_fu_329_p3;
wire   [9:0] zext_ln48_1_fu_337_p1;
wire   [9:0] zext_ln48_fu_317_p1;
wire   [1:0] zext_ln50_cast_fu_347_p3;
wire   [9:0] i_fu_341_p2;
wire   [9:0] add_ln54_fu_370_p2;
wire   [7:0] lshr_ln3_fu_376_p4;
wire   [8:0] or_ln48_1_fu_400_p2;
wire   [9:0] zext_ln48_4_fu_406_p1;
wire   [9:0] i_7_fu_410_p2;
wire   [9:0] add_ln54_2_fu_426_p2;
wire   [7:0] lshr_ln54_2_fu_432_p4;
wire   [15:0] tmp_1_fu_465_p5;
wire   [15:0] tmp_5_fu_485_p6;
wire  signed [15:0] zext_ln55_1_fu_515_p0;
wire   [15:0] grp_fu_838_p2;
wire   [30:0] grp_fu_851_p3;
wire   [14:0] trunc_ln43_1_fu_548_p4;
wire  signed [14:0] tmp2_52_fu_557_p2;
wire   [0:0] tmp_44_fu_567_p3;
wire   [15:0] select_ln58_fu_575_p3;
wire  signed [15:0] sext_ln43_2_fu_563_p1;
wire  signed [15:0] tmp2_58_fu_583_p2;
wire   [16:0] zext_ln42_3_fu_545_p1;
wire   [16:0] add_ln62_2_fu_593_p2;
wire  signed [17:0] sext_ln62_1_fu_599_p1;
wire  signed [17:0] sext_ln43_3_fu_589_p1;
wire   [17:0] tmp1_37_fu_603_p2;
wire   [0:0] tmp_45_fu_609_p3;
wire   [15:0] select_ln64_fu_622_p3;
wire   [15:0] add_ln64_fu_617_p2;
wire   [17:0] zext_ln42_2_fu_542_p1;
wire   [17:0] tmp1_38_fu_638_p2;
wire   [0:0] tmp_46_fu_644_p3;
wire   [15:0] select_ln69_fu_656_p3;
wire   [15:0] trunc_ln68_fu_652_p1;
wire   [15:0] u_4_fu_680_p6;
wire   [30:0] grp_fu_860_p3;
wire   [14:0] trunc_ln43_4_fu_701_p4;
wire  signed [14:0] tmp2_55_fu_710_p2;
wire   [0:0] tmp_47_fu_720_p3;
wire   [15:0] select_ln58_8_fu_728_p3;
wire  signed [15:0] sext_ln43_8_fu_716_p1;
wire  signed [15:0] tmp2_57_fu_736_p2;
wire   [16:0] zext_ln42_9_fu_697_p1;
wire   [16:0] add_ln62_8_fu_746_p2;
wire  signed [17:0] sext_ln62_4_fu_752_p1;
wire  signed [17:0] sext_ln43_9_fu_742_p1;
wire   [17:0] tmp1_40_fu_756_p2;
wire   [0:0] tmp_48_fu_762_p3;
wire   [15:0] select_ln64_8_fu_776_p3;
wire   [15:0] add_ln64_16_fu_770_p2;
wire   [17:0] zext_ln42_8_fu_693_p1;
wire   [17:0] tmp1_41_fu_792_p2;
wire   [0:0] tmp_49_fu_798_p3;
wire   [15:0] select_ln69_8_fu_810_p3;
wire   [15:0] trunc_ln68_8_fu_806_p1;
wire   [15:0] grp_fu_824_p0;
wire   [13:0] grp_fu_824_p1;
wire   [15:0] grp_fu_831_p0;
wire   [13:0] grp_fu_831_p1;
wire  signed [15:0] grp_fu_838_p0;
wire   [13:0] grp_fu_838_p1;
wire  signed [15:0] grp_fu_845_p0;
wire   [13:0] grp_fu_845_p1;
wire   [15:0] grp_fu_851_p0;
wire   [13:0] grp_fu_851_p1;
wire   [29:0] grp_fu_851_p2;
wire   [15:0] grp_fu_860_p0;
wire   [13:0] grp_fu_860_p1;
wire   [29:0] grp_fu_860_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage0;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to6;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [29:0] grp_fu_824_p00;
wire   [29:0] grp_fu_831_p00;
wire   [29:0] grp_fu_851_p00;
wire   [30:0] grp_fu_851_p20;
wire   [29:0] grp_fu_860_p00;
wire   [30:0] grp_fu_860_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

NTT_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_32_16_1_1_U19(
    .din0(stage0_q1),
    .din1(16'd0),
    .din2(stage0_5_q1),
    .din3(trunc_ln48_reg_880),
    .dout(tmp_1_fu_465_p5)
);

NTT_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U20(
    .din0(16'd0),
    .din1(stage0_4_q1),
    .din2(16'd0),
    .din3(stage0_6_q1),
    .din4(or_ln48_fu_480_p2),
    .dout(tmp_5_fu_485_p6)
);

NTT_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_32_16_1_1_U21(
    .din0(stage0_q0),
    .din1(16'd0),
    .din2(stage0_5_q0),
    .din3(trunc_ln48_reg_880_pp0_iter4_reg),
    .dout(u_1_fu_528_p5)
);

NTT_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U22(
    .din0(16'd0),
    .din1(stage0_4_q0),
    .din2(16'd0),
    .din3(stage0_6_q0),
    .din4(or_ln48_reg_957_pp0_iter4_reg),
    .dout(u_4_fu_680_p6)
);

NTT_mul_mul_16ns_14ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
mul_mul_16ns_14ns_30_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_824_p0),
    .din1(grp_fu_824_p1),
    .ce(1'b1),
    .dout(grp_fu_824_p2)
);

NTT_mul_mul_16ns_14ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
mul_mul_16ns_14ns_30_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_831_p0),
    .din1(grp_fu_831_p1),
    .ce(1'b1),
    .dout(grp_fu_831_p2)
);

NTT_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_838_p0),
    .din1(grp_fu_838_p1),
    .ce(1'b1),
    .dout(grp_fu_838_p2)
);

NTT_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_845_p0),
    .din1(grp_fu_845_p1),
    .ce(1'b1),
    .dout(grp_fu_845_p2)
);

NTT_mac_muladd_16ns_14ns_30ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 30 ),
    .dout_WIDTH( 31 ))
mac_muladd_16ns_14ns_30ns_31_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_851_p0),
    .din1(grp_fu_851_p1),
    .din2(grp_fu_851_p2),
    .ce(1'b1),
    .dout(grp_fu_851_p3)
);

NTT_mac_muladd_16ns_14ns_30ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 30 ),
    .dout_WIDTH( 31 ))
mac_muladd_16ns_14ns_30ns_31_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_860_p0),
    .din1(grp_fu_860_p1),
    .din2(grp_fu_860_p2),
    .ce(1'b1),
    .dout(grp_fu_860_p3)
);

NTT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_fu_301_p3 == 1'd0))) begin
            n_1_fu_100 <= n_11_fu_450_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_1_fu_100 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln69_1_reg_1038 <= add_ln69_1_fu_664_p2;
        icmp_ln64_1_reg_907_pp0_iter1_reg <= icmp_ln64_1_reg_907;
        icmp_ln64_1_reg_907_pp0_iter2_reg <= icmp_ln64_1_reg_907_pp0_iter1_reg;
        icmp_ln64_1_reg_907_pp0_iter3_reg <= icmp_ln64_1_reg_907_pp0_iter2_reg;
        icmp_ln64_1_reg_907_pp0_iter4_reg <= icmp_ln64_1_reg_907_pp0_iter3_reg;
        icmp_ln64_1_reg_907_pp0_iter5_reg <= icmp_ln64_1_reg_907_pp0_iter4_reg;
        lshr_ln2_reg_892_pp0_iter1_reg <= lshr_ln2_reg_892;
        lshr_ln2_reg_892_pp0_iter2_reg <= lshr_ln2_reg_892_pp0_iter1_reg;
        lshr_ln2_reg_892_pp0_iter3_reg <= lshr_ln2_reg_892_pp0_iter2_reg;
        lshr_ln52_2_reg_921_pp0_iter1_reg <= lshr_ln52_2_reg_921;
        lshr_ln52_2_reg_921_pp0_iter2_reg <= lshr_ln52_2_reg_921_pp0_iter1_reg;
        lshr_ln52_2_reg_921_pp0_iter3_reg <= lshr_ln52_2_reg_921_pp0_iter2_reg;
        lshr_ln52_2_reg_921_pp0_iter4_reg <= lshr_ln52_2_reg_921_pp0_iter3_reg;
        stage1_1_addr_2_reg_936_pp0_iter1_reg <= stage1_1_addr_2_reg_936;
        stage1_1_addr_2_reg_936_pp0_iter2_reg <= stage1_1_addr_2_reg_936_pp0_iter1_reg;
        stage1_1_addr_2_reg_936_pp0_iter3_reg <= stage1_1_addr_2_reg_936_pp0_iter2_reg;
        stage1_1_addr_2_reg_936_pp0_iter4_reg <= stage1_1_addr_2_reg_936_pp0_iter3_reg;
        stage1_1_addr_2_reg_936_pp0_iter5_reg <= stage1_1_addr_2_reg_936_pp0_iter4_reg;
        stage1_1_addr_reg_1059 <= zext_ln52_4_fu_670_p1;
        stage1_2_addr_2_reg_916_pp0_iter1_reg <= stage1_2_addr_2_reg_916;
        stage1_2_addr_2_reg_916_pp0_iter2_reg <= stage1_2_addr_2_reg_916_pp0_iter1_reg;
        stage1_2_addr_2_reg_916_pp0_iter3_reg <= stage1_2_addr_2_reg_916_pp0_iter2_reg;
        stage1_2_addr_2_reg_916_pp0_iter4_reg <= stage1_2_addr_2_reg_916_pp0_iter3_reg;
        stage1_2_addr_2_reg_916_pp0_iter5_reg <= stage1_2_addr_2_reg_916_pp0_iter4_reg;
        stage1_2_addr_reg_1016 <= zext_ln52_1_fu_518_p1;
        stage1_3_addr_2_reg_941_pp0_iter1_reg <= stage1_3_addr_2_reg_941;
        stage1_3_addr_2_reg_941_pp0_iter2_reg <= stage1_3_addr_2_reg_941_pp0_iter1_reg;
        stage1_3_addr_2_reg_941_pp0_iter3_reg <= stage1_3_addr_2_reg_941_pp0_iter2_reg;
        stage1_3_addr_2_reg_941_pp0_iter4_reg <= stage1_3_addr_2_reg_941_pp0_iter3_reg;
        stage1_3_addr_2_reg_941_pp0_iter5_reg <= stage1_3_addr_2_reg_941_pp0_iter4_reg;
        stage1_3_addr_reg_1064 <= zext_ln52_4_fu_670_p1;
        stage1_addr_2_reg_911_pp0_iter1_reg <= stage1_addr_2_reg_911;
        stage1_addr_2_reg_911_pp0_iter2_reg <= stage1_addr_2_reg_911_pp0_iter1_reg;
        stage1_addr_2_reg_911_pp0_iter3_reg <= stage1_addr_2_reg_911_pp0_iter2_reg;
        stage1_addr_2_reg_911_pp0_iter4_reg <= stage1_addr_2_reg_911_pp0_iter3_reg;
        stage1_addr_2_reg_911_pp0_iter5_reg <= stage1_addr_2_reg_911_pp0_iter4_reg;
        stage1_addr_reg_1011 <= zext_ln52_1_fu_518_p1;
        tmp2_54_reg_981 <= grp_fu_831_p2;
        tmp2_54_reg_981_pp0_iter3_reg <= tmp2_54_reg_981;
        tmp2_54_reg_981_pp0_iter4_reg <= tmp2_54_reg_981_pp0_iter3_reg;
        tmp2_reg_971 <= grp_fu_824_p2;
        tmp2_reg_971_pp0_iter3_reg <= tmp2_reg_971;
        tmp2_reg_971_pp0_iter4_reg <= tmp2_reg_971_pp0_iter3_reg;
        tmp_reg_876 <= ap_sig_allocacmp_n[32'd9];
        tmp_reg_876_pp0_iter1_reg <= tmp_reg_876;
        tmp_reg_876_pp0_iter2_reg <= tmp_reg_876_pp0_iter1_reg;
        tmp_reg_876_pp0_iter3_reg <= tmp_reg_876_pp0_iter2_reg;
        tmp_reg_876_pp0_iter4_reg <= tmp_reg_876_pp0_iter3_reg;
        trunc_ln48_reg_880_pp0_iter1_reg <= trunc_ln48_reg_880;
        trunc_ln48_reg_880_pp0_iter2_reg <= trunc_ln48_reg_880_pp0_iter1_reg;
        trunc_ln48_reg_880_pp0_iter3_reg <= trunc_ln48_reg_880_pp0_iter2_reg;
        trunc_ln48_reg_880_pp0_iter4_reg <= trunc_ln48_reg_880_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln69_5_reg_1069 <= add_ln69_5_fu_818_p2;
        icmp_ln64_reg_967_pp0_iter1_reg <= icmp_ln64_reg_967;
        icmp_ln64_reg_967_pp0_iter2_reg <= icmp_ln64_reg_967_pp0_iter1_reg;
        icmp_ln64_reg_967_pp0_iter3_reg <= icmp_ln64_reg_967_pp0_iter2_reg;
        icmp_ln64_reg_967_pp0_iter4_reg <= icmp_ln64_reg_967_pp0_iter3_reg;
        icmp_ln64_reg_967_pp0_iter5_reg <= icmp_ln64_reg_967_pp0_iter4_reg;
        mul_ln55_8_reg_996 <= grp_fu_845_p2;
        or_ln48_reg_957_pp0_iter1_reg[1] <= or_ln48_reg_957[1];
        or_ln48_reg_957_pp0_iter2_reg[1] <= or_ln48_reg_957_pp0_iter1_reg[1];
        or_ln48_reg_957_pp0_iter3_reg[1] <= or_ln48_reg_957_pp0_iter2_reg[1];
        or_ln48_reg_957_pp0_iter4_reg[1] <= or_ln48_reg_957_pp0_iter3_reg[1];
        u_1_reg_1026 <= u_1_fu_528_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_301_p3 == 1'd0))) begin
        icmp_ln64_1_reg_907 <= icmp_ln64_1_fu_394_p2;
        lshr_ln2_reg_892 <= {{i_fu_341_p2[9:2]}};
        lshr_ln52_2_reg_921 <= {{i_7_fu_410_p2[9:2]}};
        stage1_1_addr_2_reg_936 <= zext_ln54_8_fu_442_p1;
        stage1_2_addr_2_reg_916 <= zext_ln54_2_fu_386_p1;
        stage1_3_addr_2_reg_941 <= zext_ln54_8_fu_442_p1;
        stage1_addr_2_reg_911 <= zext_ln54_2_fu_386_p1;
        trunc_ln48_reg_880 <= trunc_ln48_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_876 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln64_reg_967 <= icmp_ln64_fu_503_p2;
        or_ln48_reg_957[1] <= or_ln48_fu_480_p2[1];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        GMb_ce0 = 1'b1;
    end else begin
        GMb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_876 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_876_pp0_iter4_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n = 10'd0;
    end else begin
        ap_sig_allocacmp_n = n_1_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage0_4_ce0 = 1'b1;
    end else begin
        stage0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage0_4_ce1 = 1'b1;
    end else begin
        stage0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage0_5_ce0 = 1'b1;
    end else begin
        stage0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage0_5_ce1 = 1'b1;
    end else begin
        stage0_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage0_6_ce0 = 1'b1;
    end else begin
        stage0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage0_6_ce1 = 1'b1;
    end else begin
        stage0_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage0_ce0 = 1'b1;
    end else begin
        stage0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage0_ce1 = 1'b1;
    end else begin
        stage0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage1_1_address0 = stage1_1_addr_2_reg_936_pp0_iter5_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stage1_1_address0 = stage1_1_addr_reg_1059;
    end else begin
        stage1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stage1_1_ce0 = 1'b1;
    end else begin
        stage1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage1_1_d0 = add_ln69_5_reg_1069;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stage1_1_d0 = add_ln64_6_fu_784_p2;
    end else begin
        stage1_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln64_reg_967_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln64_reg_967_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stage1_1_we0 = 1'b1;
    end else begin
        stage1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            stage1_2_address0 = stage1_2_addr_2_reg_916_pp0_iter5_reg;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            stage1_2_address0 = stage1_2_addr_reg_1016;
        end else begin
            stage1_2_address0 = 'bx;
        end
    end else begin
        stage1_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stage1_2_ce0 = 1'b1;
    end else begin
        stage1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            stage1_2_d0 = add_ln69_1_reg_1038;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            stage1_2_d0 = add_ln64_1_fu_630_p2;
        end else begin
            stage1_2_d0 = 'bx;
        end
    end else begin
        stage1_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln64_1_reg_907_pp0_iter5_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_1_reg_907_pp0_iter4_reg == 1'd0)))) begin
        stage1_2_we0 = 1'b1;
    end else begin
        stage1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage1_3_address0 = stage1_3_addr_2_reg_941_pp0_iter5_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stage1_3_address0 = stage1_3_addr_reg_1064;
    end else begin
        stage1_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stage1_3_ce0 = 1'b1;
    end else begin
        stage1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stage1_3_d0 = add_ln69_5_reg_1069;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stage1_3_d0 = add_ln64_6_fu_784_p2;
    end else begin
        stage1_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln64_reg_967_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln64_reg_967_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stage1_3_we0 = 1'b1;
    end else begin
        stage1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            stage1_address0 = stage1_addr_2_reg_911_pp0_iter5_reg;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            stage1_address0 = stage1_addr_reg_1011;
        end else begin
            stage1_address0 = 'bx;
        end
    end else begin
        stage1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stage1_ce0 = 1'b1;
    end else begin
        stage1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            stage1_d0 = add_ln69_1_reg_1038;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            stage1_d0 = add_ln64_1_fu_630_p2;
        end else begin
            stage1_d0 = 'bx;
        end
    end else begin
        stage1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln64_1_reg_907_pp0_iter5_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_1_reg_907_pp0_iter4_reg == 1'd1)))) begin
        stage1_we0 = 1'b1;
    end else begin
        stage1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GMb_address0 = zext_ln50_fu_355_p1;

assign add_ln54_2_fu_426_p2 = (i_7_fu_410_p2 + 10'd256);

assign add_ln54_fu_370_p2 = (i_fu_341_p2 + 10'd256);

assign add_ln62_2_fu_593_p2 = ($signed(zext_ln42_3_fu_545_p1) + $signed(17'd118783));

assign add_ln62_8_fu_746_p2 = ($signed(zext_ln42_9_fu_697_p1) + $signed(17'd118783));

assign add_ln64_16_fu_770_p2 = ($signed(tmp2_57_fu_736_p2) + $signed(u_4_fu_680_p6));

assign add_ln64_1_fu_630_p2 = (select_ln64_fu_622_p3 + add_ln64_fu_617_p2);

assign add_ln64_6_fu_784_p2 = (select_ln64_8_fu_776_p3 + add_ln64_16_fu_770_p2);

assign add_ln64_fu_617_p2 = ($signed(tmp2_58_fu_583_p2) + $signed(u_1_reg_1026));

assign add_ln69_1_fu_664_p2 = (select_ln69_fu_656_p3 + trunc_ln68_fu_652_p1);

assign add_ln69_5_fu_818_p2 = (select_ln69_8_fu_810_p3 + trunc_ln68_8_fu_806_p1);

assign and_ln_fu_329_p3 = {{tmp_43_fu_321_p3}, {8'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_824_p0 = grp_fu_824_p00;

assign grp_fu_824_p00 = tmp_1_fu_465_p5;

assign grp_fu_824_p1 = zext_ln41_fu_461_p1;

assign grp_fu_831_p0 = grp_fu_831_p00;

assign grp_fu_831_p00 = tmp_5_fu_485_p6;

assign grp_fu_831_p1 = zext_ln41_fu_461_p1;

assign grp_fu_838_p0 = grp_fu_824_p2[15:0];

assign grp_fu_838_p1 = 16'd12287;

assign grp_fu_845_p0 = grp_fu_831_p2[15:0];

assign grp_fu_845_p1 = 16'd12287;

assign grp_fu_851_p0 = grp_fu_851_p00;

assign grp_fu_851_p00 = $unsigned(zext_ln55_1_fu_515_p0);

assign grp_fu_851_p1 = 30'd12289;

assign grp_fu_851_p2 = grp_fu_851_p20;

assign grp_fu_851_p20 = tmp2_reg_971_pp0_iter4_reg;

assign grp_fu_860_p0 = grp_fu_860_p00;

assign grp_fu_860_p00 = $unsigned(mul_ln55_8_reg_996);

assign grp_fu_860_p1 = 30'd12289;

assign grp_fu_860_p2 = grp_fu_860_p20;

assign grp_fu_860_p20 = tmp2_54_reg_981_pp0_iter4_reg;

assign i_7_fu_410_p2 = (zext_ln48_4_fu_406_p1 + zext_ln48_1_fu_337_p1);

assign i_fu_341_p2 = (zext_ln48_1_fu_337_p1 + zext_ln48_fu_317_p1);

assign icmp_ln64_1_fu_394_p2 = ((trunc_ln48_fu_313_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_503_p2 = ((or_ln48_fu_480_p2 == 2'd1) ? 1'b1 : 1'b0);

assign lshr_ln3_fu_376_p4 = {{add_ln54_fu_370_p2[9:2]}};

assign lshr_ln54_2_fu_432_p4 = {{add_ln54_2_fu_426_p2[9:2]}};

assign n_11_fu_450_p2 = (ap_sig_allocacmp_n + 10'd2);

assign or_ln48_1_fu_400_p2 = (trunc_ln44_fu_309_p1 | 9'd1);

assign or_ln48_fu_480_p2 = (trunc_ln48_reg_880 | 2'd1);

assign select_ln58_8_fu_728_p3 = ((tmp_47_fu_720_p3[0:0] == 1'b1) ? 16'd12289 : 16'd0);

assign select_ln58_fu_575_p3 = ((tmp_44_fu_567_p3[0:0] == 1'b1) ? 16'd12289 : 16'd0);

assign select_ln64_8_fu_776_p3 = ((tmp_48_fu_762_p3[0:0] == 1'b1) ? 16'd0 : 16'd53247);

assign select_ln64_fu_622_p3 = ((tmp_45_fu_609_p3[0:0] == 1'b1) ? 16'd0 : 16'd53247);

assign select_ln69_8_fu_810_p3 = ((tmp_49_fu_798_p3[0:0] == 1'b1) ? 16'd12289 : 16'd0);

assign select_ln69_fu_656_p3 = ((tmp_46_fu_644_p3[0:0] == 1'b1) ? 16'd12289 : 16'd0);

assign sext_ln43_2_fu_563_p1 = tmp2_52_fu_557_p2;

assign sext_ln43_3_fu_589_p1 = tmp2_58_fu_583_p2;

assign sext_ln43_8_fu_716_p1 = tmp2_55_fu_710_p2;

assign sext_ln43_9_fu_742_p1 = tmp2_57_fu_736_p2;

assign sext_ln62_1_fu_599_p1 = $signed(add_ln62_2_fu_593_p2);

assign sext_ln62_4_fu_752_p1 = $signed(add_ln62_8_fu_746_p2);

assign stage0_4_address0 = zext_ln52_4_fu_670_p1;

assign stage0_4_address1 = zext_ln54_8_fu_442_p1;

assign stage0_5_address0 = zext_ln52_1_fu_518_p1;

assign stage0_5_address1 = zext_ln54_2_fu_386_p1;

assign stage0_6_address0 = zext_ln52_4_fu_670_p1;

assign stage0_6_address1 = zext_ln54_8_fu_442_p1;

assign stage0_address0 = zext_ln52_1_fu_518_p1;

assign stage0_address1 = zext_ln54_2_fu_386_p1;

assign tmp1_37_fu_603_p2 = ($signed(sext_ln62_1_fu_599_p1) + $signed(sext_ln43_3_fu_589_p1));

assign tmp1_38_fu_638_p2 = ($signed(zext_ln42_2_fu_542_p1) - $signed(sext_ln43_3_fu_589_p1));

assign tmp1_40_fu_756_p2 = ($signed(sext_ln62_4_fu_752_p1) + $signed(sext_ln43_9_fu_742_p1));

assign tmp1_41_fu_792_p2 = ($signed(zext_ln42_8_fu_693_p1) - $signed(sext_ln43_9_fu_742_p1));

assign tmp2_52_fu_557_p2 = ($signed(trunc_ln43_1_fu_548_p4) + $signed(15'd20479));

assign tmp2_55_fu_710_p2 = ($signed(trunc_ln43_4_fu_701_p4) + $signed(15'd20479));

assign tmp2_57_fu_736_p2 = ($signed(select_ln58_8_fu_728_p3) + $signed(sext_ln43_8_fu_716_p1));

assign tmp2_58_fu_583_p2 = ($signed(select_ln58_fu_575_p3) + $signed(sext_ln43_2_fu_563_p1));

assign tmp_43_fu_321_p3 = ap_sig_allocacmp_n[32'd8];

assign tmp_44_fu_567_p3 = tmp2_52_fu_557_p2[32'd14];

assign tmp_45_fu_609_p3 = tmp1_37_fu_603_p2[32'd17];

assign tmp_46_fu_644_p3 = tmp1_38_fu_638_p2[32'd17];

assign tmp_47_fu_720_p3 = tmp2_55_fu_710_p2[32'd14];

assign tmp_48_fu_762_p3 = tmp1_40_fu_756_p2[32'd17];

assign tmp_49_fu_798_p3 = tmp1_41_fu_792_p2[32'd17];

assign tmp_fu_301_p3 = ap_sig_allocacmp_n[32'd9];

assign trunc_ln43_1_fu_548_p4 = {{grp_fu_851_p3[30:16]}};

assign trunc_ln43_4_fu_701_p4 = {{grp_fu_860_p3[30:16]}};

assign trunc_ln44_fu_309_p1 = ap_sig_allocacmp_n[8:0];

assign trunc_ln48_fu_313_p1 = ap_sig_allocacmp_n[1:0];

assign trunc_ln68_8_fu_806_p1 = tmp1_41_fu_792_p2[15:0];

assign trunc_ln68_fu_652_p1 = tmp1_38_fu_638_p2[15:0];

assign zext_ln41_fu_461_p1 = GMb_q0;

assign zext_ln42_2_fu_542_p1 = u_1_reg_1026;

assign zext_ln42_3_fu_545_p1 = u_1_reg_1026;

assign zext_ln42_8_fu_693_p1 = u_4_fu_680_p6;

assign zext_ln42_9_fu_697_p1 = u_4_fu_680_p6;

assign zext_ln48_1_fu_337_p1 = and_ln_fu_329_p3;

assign zext_ln48_4_fu_406_p1 = or_ln48_1_fu_400_p2;

assign zext_ln48_fu_317_p1 = trunc_ln44_fu_309_p1;

assign zext_ln50_cast_fu_347_p3 = {{1'd1}, {tmp_43_fu_321_p3}};

assign zext_ln50_fu_355_p1 = zext_ln50_cast_fu_347_p3;

assign zext_ln52_1_fu_518_p1 = lshr_ln2_reg_892_pp0_iter3_reg;

assign zext_ln52_4_fu_670_p1 = lshr_ln52_2_reg_921_pp0_iter4_reg;

assign zext_ln54_2_fu_386_p1 = lshr_ln3_fu_376_p4;

assign zext_ln54_8_fu_442_p1 = lshr_ln54_2_fu_432_p4;

assign zext_ln55_1_fu_515_p0 = grp_fu_838_p2;

always @ (posedge ap_clk) begin
    or_ln48_reg_957[0] <= 1'b1;
    or_ln48_reg_957_pp0_iter1_reg[0] <= 1'b1;
    or_ln48_reg_957_pp0_iter2_reg[0] <= 1'b1;
    or_ln48_reg_957_pp0_iter3_reg[0] <= 1'b1;
    or_ln48_reg_957_pp0_iter4_reg[0] <= 1'b1;
end

endmodule //NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_12
