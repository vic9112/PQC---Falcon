-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mq_NTT_mq_NTT_Pipeline_VITIS_LOOP_525_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmemo_AWVALID : OUT STD_LOGIC;
    m_axi_gmemo_AWREADY : IN STD_LOGIC;
    m_axi_gmemo_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmemo_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmemo_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_WVALID : OUT STD_LOGIC;
    m_axi_gmemo_WREADY : IN STD_LOGIC;
    m_axi_gmemo_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmemo_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_WLAST : OUT STD_LOGIC;
    m_axi_gmemo_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_ARVALID : OUT STD_LOGIC;
    m_axi_gmemo_ARREADY : IN STD_LOGIC;
    m_axi_gmemo_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmemo_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmemo_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_RVALID : IN STD_LOGIC;
    m_axi_gmemo_RREADY : OUT STD_LOGIC;
    m_axi_gmemo_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmemo_RLAST : IN STD_LOGIC;
    m_axi_gmemo_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmemo_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_BVALID : IN STD_LOGIC;
    m_axi_gmemo_BREADY : OUT STD_LOGIC;
    m_axi_gmemo_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmemo_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    j1_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    indvars_iv : IN STD_LOGIC_VECTOR (63 downto 0);
    a : IN STD_LOGIC_VECTOR (63 downto 0);
    ht : IN STD_LOGIC_VECTOR (62 downto 0);
    zext_ln520 : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of mq_NTT_mq_NTT_Pipeline_VITIS_LOOP_525_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_9FFE : STD_LOGIC_VECTOR (15 downto 0) := "1001111111111110";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln525_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage25 : signal is "none";
    signal ap_block_state26_pp0_stage25_iter0 : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal gmemo_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln525_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmemo_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal gmemo_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal gmemo_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal gmemo_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_pp0_stage22 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln520_cast_fu_174_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln520_cast_reg_468 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal gmemo_addr_reg_477 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_addr_1_reg_484 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_491 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal gmemo_addr_1_read_reg_498 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal z_reg_508 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal add_ln530_fu_385_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln530_reg_528 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal add_ln531_fu_417_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln531_reg_533 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal sext_ln528_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln529_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_state22_io : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_block_pp0_stage21_01001 : BOOLEAN;
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_block_pp0_stage22_01001 : BOOLEAN;
    signal j_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_fu_264_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal shl_ln528_fu_195_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln528_fu_201_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_206_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln528_fu_191_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln529_fu_226_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1_fu_231_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln529_1_fu_239_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln529_2_fu_244_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal zext_ln406_fu_281_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal grp_fu_436_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln5_fu_293_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal z_1_fu_306_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln422_fu_324_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln396_fu_312_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal z_3_fu_332_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln526_1_fu_290_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln356_fu_342_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln356_fu_348_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln396_1_fu_338_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal d_fu_352_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln421_fu_302_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln530_1_fu_366_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln530_fu_377_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln530_2_fu_372_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln526_fu_287_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal d_1_fu_391_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln531_fu_409_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln374_fu_405_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_423_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_429_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_436_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_436_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_423_ce : STD_LOGIC;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal grp_fu_429_ce : STD_LOGIC;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal grp_fu_436_ce : STD_LOGIC;
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_state24_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_state25_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_423_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_436_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_436_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mq_NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component mq_NTT_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mq_NTT_mac_muladd_16ns_14ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component mq_NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16ns_14ns_30_4_1_U1 : component mq_NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_423_p0,
        din1 => grp_fu_423_p1,
        ce => grp_fu_423_ce,
        dout => grp_fu_423_p2);

    mul_mul_16s_14ns_16_4_1_U2 : component mq_NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_429_p0,
        din1 => grp_fu_429_p1,
        ce => grp_fu_429_ce,
        dout => grp_fu_429_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U3 : component mq_NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_436_p0,
        din1 => grp_fu_436_p1,
        din2 => grp_fu_436_p2,
        ce => grp_fu_436_ce,
        dout => grp_fu_436_p3);

    flow_control_loop_pipe_sequential_init_U : component mq_NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_fu_96 <= j1_2;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln525_fu_186_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                j_fu_96 <= j_2_fu_264_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001))) then
                add_ln530_reg_528 <= add_ln530_fu_385_p2;
                add_ln531_reg_533 <= add_ln531_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                gmemo_addr_1_read_reg_498 <= m_axi_gmemo_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln525_fu_186_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmemo_addr_1_reg_484 <= sext_ln529_fu_254_p1;
                gmemo_addr_reg_477 <= sext_ln528_fu_216_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln525_reg_473 <= icmp_ln525_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001))) then
                u_reg_491 <= m_axi_gmemo_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then
                z_reg_508 <= grp_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln520_cast_reg_468(13 downto 0) <= zext_ln520_cast_fu_174_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln520_cast_reg_468(29 downto 14) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage25_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln356_fu_342_p2 <= std_logic_vector(unsigned(zext_ln526_1_fu_290_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln528_fu_201_p2 <= std_logic_vector(unsigned(shl_ln528_fu_195_p2) + unsigned(a));
    add_ln529_1_fu_239_p2 <= std_logic_vector(unsigned(shl_ln1_fu_231_p3) + unsigned(a));
    add_ln529_fu_226_p2 <= std_logic_vector(unsigned(trunc_ln528_fu_191_p1) + unsigned(ht));
    add_ln530_1_fu_366_p2 <= std_logic_vector(unsigned(zext_ln421_fu_302_p1) + unsigned(select_ln422_fu_324_p3));
    add_ln530_2_fu_372_p2 <= std_logic_vector(unsigned(add_ln530_1_fu_366_p2) + unsigned(u_reg_491));
    add_ln530_fu_385_p2 <= std_logic_vector(unsigned(select_ln530_fu_377_p3) + unsigned(add_ln530_2_fu_372_p2));
    add_ln531_fu_417_p2 <= std_logic_vector(unsigned(select_ln531_fu_409_p3) + unsigned(trunc_ln374_fu_405_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage25 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmemo_BVALID, icmp_ln525_reg_473)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (m_axi_gmemo_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmemo_BVALID, icmp_ln525_reg_473)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (m_axi_gmemo_BVALID = ap_const_logic_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmemo_RVALID, icmp_ln525_reg_473)
    begin
                ap_block_pp0_stage10_11001 <= ((m_axi_gmemo_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmemo_RVALID, icmp_ln525_reg_473)
    begin
                ap_block_pp0_stage10_subdone <= ((m_axi_gmemo_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmemo_BVALID)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmemo_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmemo_BVALID)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmemo_BVALID = ap_const_logic_0));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage20_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state21_io)
    begin
                ap_block_pp0_stage20_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state21_io));
    end process;


    ap_block_pp0_stage20_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state21_io)
    begin
                ap_block_pp0_stage20_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state21_io));
    end process;

        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage21_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state22_io)
    begin
                ap_block_pp0_stage21_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io));
    end process;


    ap_block_pp0_stage21_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state22_io)
    begin
                ap_block_pp0_stage21_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io));
    end process;

        ap_block_pp0_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage22_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state23_io)
    begin
                ap_block_pp0_stage22_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io));
    end process;


    ap_block_pp0_stage22_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state23_io)
    begin
                ap_block_pp0_stage22_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io));
    end process;

        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;

        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmemo_RVALID, icmp_ln525_reg_473)
    begin
                ap_block_pp0_stage9_11001 <= ((m_axi_gmemo_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmemo_RVALID, icmp_ln525_reg_473)
    begin
                ap_block_pp0_stage9_subdone <= ((m_axi_gmemo_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;


    ap_block_state10_pp0_stage9_iter0_assign_proc : process(m_axi_gmemo_RVALID, icmp_ln525_reg_473)
    begin
                ap_block_state10_pp0_stage9_iter0 <= ((m_axi_gmemo_RVALID = ap_const_logic_0) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;


    ap_block_state11_pp0_stage10_iter0_assign_proc : process(m_axi_gmemo_RVALID, icmp_ln525_reg_473)
    begin
                ap_block_state11_pp0_stage10_iter0 <= ((m_axi_gmemo_RVALID = ap_const_logic_0) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;

        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_io_assign_proc : process(m_axi_gmemo_AWREADY, icmp_ln525_reg_473)
    begin
                ap_block_state21_io <= ((m_axi_gmemo_AWREADY = ap_const_logic_0) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;

        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_io_assign_proc : process(m_axi_gmemo_AWREADY, m_axi_gmemo_WREADY, icmp_ln525_reg_473)
    begin
                ap_block_state22_io <= (((m_axi_gmemo_WREADY = ap_const_logic_0) and (icmp_ln525_reg_473 = ap_const_lv1_1)) or ((m_axi_gmemo_AWREADY = ap_const_logic_0) and (icmp_ln525_reg_473 = ap_const_lv1_1)));
    end process;

        ap_block_state22_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(m_axi_gmemo_WREADY, icmp_ln525_reg_473)
    begin
                ap_block_state23_io <= ((m_axi_gmemo_WREADY = ap_const_logic_0) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;

        ap_block_state23_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_pp0_stage0_iter1_assign_proc : process(m_axi_gmemo_BVALID, icmp_ln525_reg_473)
    begin
                ap_block_state27_pp0_stage0_iter1 <= ((icmp_ln525_reg_473 = ap_const_lv1_1) and (m_axi_gmemo_BVALID = ap_const_logic_0));
    end process;


    ap_block_state28_pp0_stage1_iter1_assign_proc : process(m_axi_gmemo_BVALID)
    begin
                ap_block_state28_pp0_stage1_iter1 <= (m_axi_gmemo_BVALID = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_gmemo_ARREADY, icmp_ln525_reg_473)
    begin
                ap_block_state3_io <= ((m_axi_gmemo_ARREADY = ap_const_logic_0) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmemo_ARREADY, icmp_ln525_reg_473)
    begin
                ap_block_state4_io <= ((m_axi_gmemo_ARREADY = ap_const_logic_0) and (icmp_ln525_reg_473 = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln525_fu_186_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln525_fu_186_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    d_1_fu_391_p2 <= std_logic_vector(unsigned(zext_ln526_fu_287_p1) - unsigned(sext_ln396_1_fu_338_p1));
    d_fu_352_p2 <= std_logic_vector(signed(sext_ln356_fu_348_p1) + signed(sext_ln396_1_fu_338_p1));

    gmemo_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmemo_ARREADY, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            gmemo_blk_n_AR <= m_axi_gmemo_ARREADY;
        else 
            gmemo_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmemo_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmemo_AWREADY, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage21)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage20)))) then 
            gmemo_blk_n_AW <= m_axi_gmemo_AWREADY;
        else 
            gmemo_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmemo_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_gmemo_BVALID, icmp_ln525_reg_473, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmemo_blk_n_B <= m_axi_gmemo_BVALID;
        else 
            gmemo_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmemo_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmemo_RVALID, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage9)))) then 
            gmemo_blk_n_R <= m_axi_gmemo_RVALID;
        else 
            gmemo_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmemo_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_gmemo_WREADY, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage22)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage21)))) then 
            gmemo_blk_n_W <= m_axi_gmemo_WREADY;
        else 
            gmemo_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_423_ce_assign_proc : process(ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)))) then 
            grp_fu_423_ce <= ap_const_logic_1;
        else 
            grp_fu_423_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_423_p0 <= grp_fu_423_p00(16 - 1 downto 0);
    grp_fu_423_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmemo_addr_1_read_reg_498),30));
    grp_fu_423_p1 <= zext_ln520_cast_reg_468(14 - 1 downto 0);

    grp_fu_429_ce_assign_proc : process(ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage16_11001, ap_CS_fsm_pp0_stage16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)))) then 
            grp_fu_429_ce <= ap_const_logic_1;
        else 
            grp_fu_429_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_429_p0 <= grp_fu_423_p2(16 - 1 downto 0);
    grp_fu_429_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);

    grp_fu_436_ce_assign_proc : process(ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)))) then 
            grp_fu_436_ce <= ap_const_logic_1;
        else 
            grp_fu_436_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_436_p0 <= grp_fu_436_p00(16 - 1 downto 0);
    grp_fu_436_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln406_fu_281_p0),30));
    grp_fu_436_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_436_p2 <= grp_fu_436_p20(30 - 1 downto 0);
    grp_fu_436_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_reg_508),31));
    icmp_ln525_fu_186_p2 <= "1" when (unsigned(j_fu_96) < unsigned(indvars_iv)) else "0";
    j_2_fu_264_p2 <= std_logic_vector(unsigned(j_fu_96) + unsigned(ap_const_lv64_1));

    m_axi_gmemo_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage3, gmemo_addr_reg_477, gmemo_addr_1_reg_484, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1))) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                m_axi_gmemo_ARADDR <= gmemo_addr_1_reg_484;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                m_axi_gmemo_ARADDR <= gmemo_addr_reg_477;
            else 
                m_axi_gmemo_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmemo_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmemo_ARBURST <= ap_const_lv2_0;
    m_axi_gmemo_ARCACHE <= ap_const_lv4_0;
    m_axi_gmemo_ARID <= ap_const_lv1_0;
    m_axi_gmemo_ARLEN <= ap_const_lv32_1;
    m_axi_gmemo_ARLOCK <= ap_const_lv2_0;
    m_axi_gmemo_ARPROT <= ap_const_lv3_0;
    m_axi_gmemo_ARQOS <= ap_const_lv4_0;
    m_axi_gmemo_ARREGION <= ap_const_lv4_0;
    m_axi_gmemo_ARSIZE <= ap_const_lv3_0;
    m_axi_gmemo_ARUSER <= ap_const_lv1_0;

    m_axi_gmemo_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            m_axi_gmemo_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmemo_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmemo_AWADDR_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, gmemo_addr_reg_477, gmemo_addr_1_reg_484, ap_block_pp0_stage20_11001, ap_block_pp0_stage21_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1))) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001))) then 
                m_axi_gmemo_AWADDR <= gmemo_addr_1_reg_484;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001))) then 
                m_axi_gmemo_AWADDR <= gmemo_addr_reg_477;
            else 
                m_axi_gmemo_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmemo_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmemo_AWBURST <= ap_const_lv2_0;
    m_axi_gmemo_AWCACHE <= ap_const_lv4_0;
    m_axi_gmemo_AWID <= ap_const_lv1_0;
    m_axi_gmemo_AWLEN <= ap_const_lv32_1;
    m_axi_gmemo_AWLOCK <= ap_const_lv2_0;
    m_axi_gmemo_AWPROT <= ap_const_lv3_0;
    m_axi_gmemo_AWQOS <= ap_const_lv4_0;
    m_axi_gmemo_AWREGION <= ap_const_lv4_0;
    m_axi_gmemo_AWSIZE <= ap_const_lv3_0;
    m_axi_gmemo_AWUSER <= ap_const_lv1_0;

    m_axi_gmemo_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage20_11001, ap_block_pp0_stage21_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)))) then 
            m_axi_gmemo_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmemo_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmemo_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln525_reg_473, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmemo_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmemo_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmemo_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)))) then 
            m_axi_gmemo_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmemo_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmemo_WDATA_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, add_ln530_reg_528, add_ln531_reg_533, ap_block_pp0_stage21_01001, ap_block_pp0_stage22_01001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln525_reg_473 = ap_const_lv1_1))) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_01001))) then 
                m_axi_gmemo_WDATA <= add_ln531_reg_533;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_01001))) then 
                m_axi_gmemo_WDATA <= add_ln530_reg_528;
            else 
                m_axi_gmemo_WDATA <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmemo_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmemo_WID <= ap_const_lv1_0;
    m_axi_gmemo_WLAST <= ap_const_logic_0;
    m_axi_gmemo_WSTRB <= ap_const_lv2_3;
    m_axi_gmemo_WUSER <= ap_const_lv1_0;

    m_axi_gmemo_WVALID_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln525_reg_473, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage21_11001, ap_block_pp0_stage22_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (icmp_ln525_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)))) then 
            m_axi_gmemo_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmemo_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln422_fu_324_p3 <= 
        ap_const_lv16_3001 when (tmp_fu_316_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln530_fu_377_p3 <= 
        ap_const_lv16_CFFF when (tmp_1_fu_358_p3(0) = '1') else 
        ap_const_lv16_9FFE;
    select_ln531_fu_409_p3 <= 
        ap_const_lv16_3001 when (tmp_2_fu_397_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln356_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln356_fu_342_p2),18));

        sext_ln396_1_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_3_fu_332_p2),18));

        sext_ln396_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(z_1_fu_306_p2),16));

        sext_ln528_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_206_p4),64));

        sext_ln529_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln529_2_fu_244_p4),64));

    shl_ln1_fu_231_p3 <= (add_ln529_fu_226_p2 & ap_const_lv1_0);
    shl_ln528_fu_195_p2 <= std_logic_vector(shift_left(unsigned(j_fu_96),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_1_fu_358_p3 <= d_fu_352_p2(17 downto 17);
    tmp_2_fu_397_p3 <= d_1_fu_391_p2(17 downto 17);
    tmp_fu_316_p3 <= z_1_fu_306_p2(14 downto 14);
    trunc_ln374_fu_405_p1 <= d_1_fu_391_p2(16 - 1 downto 0);
    trunc_ln3_fu_206_p4 <= add_ln528_fu_201_p2(63 downto 1);
    trunc_ln528_fu_191_p1 <= j_fu_96(63 - 1 downto 0);
    trunc_ln529_2_fu_244_p4 <= add_ln529_1_fu_239_p2(63 downto 1);
    trunc_ln5_fu_293_p4 <= grp_fu_436_p3(30 downto 16);
    z_1_fu_306_p2 <= std_logic_vector(unsigned(trunc_ln5_fu_293_p4) + unsigned(ap_const_lv15_4FFF));
    z_3_fu_332_p2 <= std_logic_vector(unsigned(select_ln422_fu_324_p3) + unsigned(sext_ln396_fu_312_p1));
    zext_ln406_fu_281_p0 <= grp_fu_429_p2;
    zext_ln421_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln5_fu_293_p4),16));
    zext_ln520_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln520),30));
    zext_ln526_1_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_491),17));
    zext_ln526_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_491),18));
end behav;
