// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_Block_entry24_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        logn,
        logn_c_din,
        logn_c_num_data_valid,
        logn_c_fifo_cap,
        logn_c_full_n,
        logn_c_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] logn;
output  [31:0] logn_c_din;
input  [1:0] logn_c_num_data_valid;
input  [1:0] logn_c_fifo_cap;
input   logn_c_full_n;
output   logn_c_write;
output  [63:0] ap_return_0;
output  [62:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg logn_c_write;
reg[63:0] ap_return_0;
reg[62:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    logn_c_blk_n;
reg    ap_block_state1;
wire   [63:0] zext_ln951_fu_48_p1;
wire   [63:0] n_fu_52_p2;
wire   [62:0] hn_fu_58_p4;
wire   [63:0] zext_ln952_fu_68_p1;
reg   [63:0] ap_return_0_preg;
reg   [62:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 63'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
        ap_return_0_preg[1] <= 1'b0;
        ap_return_0_preg[2] <= 1'b0;
        ap_return_0_preg[3] <= 1'b0;
        ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
        ap_return_0_preg[10] <= 1'b0;
        ap_return_0_preg[11] <= 1'b0;
        ap_return_0_preg[12] <= 1'b0;
        ap_return_0_preg[13] <= 1'b0;
        ap_return_0_preg[14] <= 1'b0;
        ap_return_0_preg[15] <= 1'b0;
        ap_return_0_preg[16] <= 1'b0;
        ap_return_0_preg[17] <= 1'b0;
        ap_return_0_preg[18] <= 1'b0;
        ap_return_0_preg[19] <= 1'b0;
        ap_return_0_preg[20] <= 1'b0;
        ap_return_0_preg[21] <= 1'b0;
        ap_return_0_preg[22] <= 1'b0;
        ap_return_0_preg[23] <= 1'b0;
        ap_return_0_preg[24] <= 1'b0;
        ap_return_0_preg[25] <= 1'b0;
        ap_return_0_preg[26] <= 1'b0;
        ap_return_0_preg[27] <= 1'b0;
        ap_return_0_preg[28] <= 1'b0;
        ap_return_0_preg[29] <= 1'b0;
        ap_return_0_preg[30] <= 1'b0;
        ap_return_0_preg[31] <= 1'b0;
        ap_return_0_preg[32] <= 1'b0;
        ap_return_0_preg[33] <= 1'b0;
        ap_return_0_preg[34] <= 1'b0;
        ap_return_0_preg[35] <= 1'b0;
        ap_return_0_preg[36] <= 1'b0;
        ap_return_0_preg[37] <= 1'b0;
        ap_return_0_preg[38] <= 1'b0;
        ap_return_0_preg[39] <= 1'b0;
        ap_return_0_preg[40] <= 1'b0;
        ap_return_0_preg[41] <= 1'b0;
        ap_return_0_preg[42] <= 1'b0;
        ap_return_0_preg[43] <= 1'b0;
        ap_return_0_preg[44] <= 1'b0;
        ap_return_0_preg[45] <= 1'b0;
        ap_return_0_preg[46] <= 1'b0;
        ap_return_0_preg[47] <= 1'b0;
        ap_return_0_preg[48] <= 1'b0;
        ap_return_0_preg[49] <= 1'b0;
        ap_return_0_preg[50] <= 1'b0;
        ap_return_0_preg[51] <= 1'b0;
        ap_return_0_preg[52] <= 1'b0;
        ap_return_0_preg[53] <= 1'b0;
        ap_return_0_preg[54] <= 1'b0;
        ap_return_0_preg[55] <= 1'b0;
        ap_return_0_preg[56] <= 1'b0;
        ap_return_0_preg[57] <= 1'b0;
        ap_return_0_preg[58] <= 1'b0;
        ap_return_0_preg[59] <= 1'b0;
        ap_return_0_preg[60] <= 1'b0;
        ap_return_0_preg[61] <= 1'b0;
        ap_return_0_preg[62] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[62 : 0] <= zext_ln952_fu_68_p1[62 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 63'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= {{n_fu_52_p2[63:1]}};
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = zext_ln952_fu_68_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = {{n_fu_52_p2[63:1]}};
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        logn_c_blk_n = logn_c_full_n;
    end else begin
        logn_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        logn_c_write = 1'b1;
    end else begin
        logn_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (logn_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign hn_fu_58_p4 = {{n_fu_52_p2[63:1]}};

assign logn_c_din = logn;

assign n_fu_52_p2 = 64'd1 << zext_ln951_fu_48_p1;

assign zext_ln951_fu_48_p1 = logn;

assign zext_ln952_fu_68_p1 = hn_fu_58_p4;

always @ (posedge ap_clk) begin
    ap_return_0_preg[63] <= 1'b0;
end

endmodule //FFT_Block_entry24_proc
