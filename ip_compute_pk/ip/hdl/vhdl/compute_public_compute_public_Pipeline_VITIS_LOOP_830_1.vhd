-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_public_compute_public_Pipeline_VITIS_LOOP_830_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_10 : IN STD_LOGIC_VECTOR (63 downto 0);
    f : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln831_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    tmp : IN STD_LOGIC_VECTOR (63 downto 0);
    g : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln832_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    h : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of compute_public_compute_public_Pipeline_VITIS_LOOP_830_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv15_3001 : STD_LOGIC_VECTOR (14 downto 0) := "011000000000001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln830_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln830_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln831_fu_203_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln831_reg_474_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_486 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_486_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_486_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_486_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_486_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_492_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_492_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_492_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_492_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_492_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_492_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_492_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_498_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_504 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln831_1_fu_363_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln831_1_reg_509 : STD_LOGIC_VECTOR (14 downto 0);
    signal gmem_addr_3_read_reg_514 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln832_1_fu_418_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln832_1_reg_519 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal sext_ln831_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln831_1_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln832_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln832_1_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln831_2_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal sext_ln832_2_fu_424_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal u_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_4_fu_197_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal add_ln831_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln831_4_fu_212_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln831_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln831_2_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_243_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln832_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln832_3_fu_268_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln832_2_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_293_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln831_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_322_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln831_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln831_fu_334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln831_1_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln831_fu_355_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln337_fu_351_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln832_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_377_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln832_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln832_fu_389_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln832_fu_394_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln832_fu_410_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln337_1_fu_406_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to15 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component compute_public_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component compute_public_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    u_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                u_fu_82 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln830_fu_192_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                u_fu_82 <= u_4_fu_197_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln831_1_reg_509 <= add_ln831_1_fu_363_p2;
                gmem_addr_3_read_reg_514 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln832_1_reg_519 <= add_ln832_1_fu_418_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_2_reg_486_pp0_iter1_reg <= gmem_addr_2_reg_486;
                gmem_addr_2_reg_486_pp0_iter2_reg <= gmem_addr_2_reg_486_pp0_iter1_reg;
                gmem_addr_2_reg_486_pp0_iter3_reg <= gmem_addr_2_reg_486_pp0_iter2_reg;
                gmem_addr_2_reg_486_pp0_iter4_reg <= gmem_addr_2_reg_486_pp0_iter3_reg;
                gmem_addr_3_reg_492_pp0_iter1_reg <= gmem_addr_3_reg_492;
                gmem_addr_3_reg_492_pp0_iter2_reg <= gmem_addr_3_reg_492_pp0_iter1_reg;
                gmem_addr_3_reg_492_pp0_iter3_reg <= gmem_addr_3_reg_492_pp0_iter2_reg;
                gmem_addr_3_reg_492_pp0_iter4_reg <= gmem_addr_3_reg_492_pp0_iter3_reg;
                gmem_addr_3_reg_492_pp0_iter5_reg <= gmem_addr_3_reg_492_pp0_iter4_reg;
                gmem_addr_3_reg_492_pp0_iter6_reg <= gmem_addr_3_reg_492_pp0_iter5_reg;
                gmem_addr_3_reg_492_pp0_iter7_reg <= gmem_addr_3_reg_492_pp0_iter6_reg;
                gmem_addr_4_reg_498_pp0_iter10_reg <= gmem_addr_4_reg_498_pp0_iter9_reg;
                gmem_addr_4_reg_498_pp0_iter11_reg <= gmem_addr_4_reg_498_pp0_iter10_reg;
                gmem_addr_4_reg_498_pp0_iter1_reg <= gmem_addr_4_reg_498;
                gmem_addr_4_reg_498_pp0_iter2_reg <= gmem_addr_4_reg_498_pp0_iter1_reg;
                gmem_addr_4_reg_498_pp0_iter3_reg <= gmem_addr_4_reg_498_pp0_iter2_reg;
                gmem_addr_4_reg_498_pp0_iter4_reg <= gmem_addr_4_reg_498_pp0_iter3_reg;
                gmem_addr_4_reg_498_pp0_iter5_reg <= gmem_addr_4_reg_498_pp0_iter4_reg;
                gmem_addr_4_reg_498_pp0_iter6_reg <= gmem_addr_4_reg_498_pp0_iter5_reg;
                gmem_addr_4_reg_498_pp0_iter7_reg <= gmem_addr_4_reg_498_pp0_iter6_reg;
                gmem_addr_4_reg_498_pp0_iter8_reg <= gmem_addr_4_reg_498_pp0_iter7_reg;
                gmem_addr_4_reg_498_pp0_iter9_reg <= gmem_addr_4_reg_498_pp0_iter8_reg;
                gmem_addr_read_reg_504 <= m_axi_gmem_RDATA;
                icmp_ln830_reg_470 <= icmp_ln830_fu_192_p2;
                trunc_ln831_reg_474_pp0_iter10_reg <= trunc_ln831_reg_474_pp0_iter9_reg;
                trunc_ln831_reg_474_pp0_iter11_reg <= trunc_ln831_reg_474_pp0_iter10_reg;
                trunc_ln831_reg_474_pp0_iter1_reg <= trunc_ln831_reg_474;
                trunc_ln831_reg_474_pp0_iter2_reg <= trunc_ln831_reg_474_pp0_iter1_reg;
                trunc_ln831_reg_474_pp0_iter3_reg <= trunc_ln831_reg_474_pp0_iter2_reg;
                trunc_ln831_reg_474_pp0_iter4_reg <= trunc_ln831_reg_474_pp0_iter3_reg;
                trunc_ln831_reg_474_pp0_iter5_reg <= trunc_ln831_reg_474_pp0_iter4_reg;
                trunc_ln831_reg_474_pp0_iter6_reg <= trunc_ln831_reg_474_pp0_iter5_reg;
                trunc_ln831_reg_474_pp0_iter7_reg <= trunc_ln831_reg_474_pp0_iter6_reg;
                trunc_ln831_reg_474_pp0_iter8_reg <= trunc_ln831_reg_474_pp0_iter7_reg;
                trunc_ln831_reg_474_pp0_iter9_reg <= trunc_ln831_reg_474_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln830_fu_192_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmem_addr_2_reg_486 <= sext_ln831_1_fu_253_p1;
                gmem_addr_3_reg_492 <= sext_ln832_fu_278_p1;
                gmem_addr_4_reg_498 <= sext_ln832_1_fu_303_p1;
                gmem_addr_reg_480 <= sext_ln831_fu_222_p1;
                trunc_ln831_reg_474 <= trunc_ln831_fu_203_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to15, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to15 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln831_1_fu_363_p2 <= std_logic_vector(unsigned(select_ln831_fu_355_p3) + unsigned(sext_ln337_fu_351_p1));
    add_ln831_2_fu_238_p2 <= std_logic_vector(unsigned(shl_ln831_fu_232_p2) + unsigned(tmp));
    add_ln831_fu_207_p2 <= std_logic_vector(unsigned(u_fu_82) + unsigned(f));
    add_ln832_1_fu_418_p2 <= std_logic_vector(unsigned(select_ln832_fu_410_p3) + unsigned(sext_ln337_1_fu_406_p1));
    add_ln832_2_fu_288_p2 <= std_logic_vector(unsigned(shl_ln831_fu_232_p2) + unsigned(h));
    add_ln832_fu_263_p2 <= std_logic_vector(unsigned(u_fu_82) + unsigned(g));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter12, m_axi_gmem_RVALID, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter15, m_axi_gmem_RVALID, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage1_01001 <= (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter15, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter15, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (m_axi_gmem_BVALID = ap_const_logic_0)) or ((m_axi_gmem_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)) or ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_state10_pp0_stage1_iter4_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state10_pp0_stage1_iter4 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter8_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state17_pp0_stage0_iter8 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;

        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp0_stage0_iter12_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state25_pp0_stage0_iter12 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp0_stage1_iter15_assign_proc : process(m_axi_gmem_BVALID)
    begin
                ap_block_state32_pp0_stage1_iter15 <= (m_axi_gmem_BVALID = ap_const_logic_0);
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln830_reg_470)
    begin
                ap_block_state3_io <= ((icmp_ln830_reg_470 = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln830_fu_192_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln830_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_loop_exit_ready_pp0_iter13_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to15_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to15 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to15 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, m_axi_gmem_ARREADY, ap_block_pp0_stage0, icmp_ln830_reg_470, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln830_reg_470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, m_axi_gmem_AWREADY, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage1, m_axi_gmem_BVALID, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, m_axi_gmem_RVALID, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage1, m_axi_gmem_WREADY, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln830_fu_192_p2 <= "1" when (u_fu_82 = m_10) else "0";
    lshr_ln831_fu_334_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_read_reg_504),to_integer(unsigned('0' & zext_ln831_fu_330_p1(16-1 downto 0)))));
    lshr_ln832_fu_389_p2 <= std_logic_vector(shift_right(unsigned(gmem_addr_3_read_reg_514),to_integer(unsigned('0' & zext_ln832_fu_385_p1(16-1 downto 0)))));

    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, icmp_ln830_reg_470, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, gmem_addr_reg_480, gmem_addr_3_reg_492_pp0_iter7_reg)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_3_reg_492_pp0_iter7_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln830_reg_470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_480;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, icmp_ln830_reg_470, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln830_reg_470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_AWADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, gmem_addr_2_reg_486_pp0_iter4_reg, gmem_addr_4_reg_498_pp0_iter11_reg)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_AWADDR <= gmem_addr_4_reg_498_pp0_iter11_reg;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_AWADDR <= gmem_addr_2_reg_486_pp0_iter4_reg;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage1, sext_ln831_2_fu_369_p1, ap_block_pp0_stage1_01001, sext_ln832_2_fu_424_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            m_axi_gmem_WDATA <= sext_ln832_2_fu_424_p1;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            m_axi_gmem_WDATA <= sext_ln831_2_fu_369_p1;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv2_3;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln831_fu_355_p3 <= 
        ap_const_lv15_3001 when (tmp_12_fu_343_p3(0) = '1') else 
        ap_const_lv15_0;
    select_ln832_fu_410_p3 <= 
        ap_const_lv15_3001 when (tmp_13_fu_398_p3(0) = '1') else 
        ap_const_lv15_0;
        sext_ln337_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln832_fu_394_p1),15));

        sext_ln337_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln831_1_fu_339_p1),15));

        sext_ln831_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_243_p4),64));

        sext_ln831_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln831_1_reg_509),16));

        sext_ln831_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln831_4_fu_212_p4),64));

        sext_ln832_1_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_293_p4),64));

        sext_ln832_2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln832_1_reg_519),16));

        sext_ln832_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln832_3_fu_268_p4),64));

    shl_ln2_fu_377_p3 <= (xor_ln832_fu_373_p2 & ap_const_lv3_0);
    shl_ln831_fu_232_p2 <= std_logic_vector(shift_left(unsigned(u_fu_82),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    shl_ln_fu_322_p3 <= (xor_ln831_fu_318_p2 & ap_const_lv3_0);
    tmp_12_fu_343_p3 <= lshr_ln831_fu_334_p2(7 downto 7);
    tmp_13_fu_398_p3 <= lshr_ln832_fu_389_p2(7 downto 7);
    trunc_ln3_fu_293_p4 <= add_ln832_2_fu_288_p2(63 downto 1);
    trunc_ln831_1_fu_339_p1 <= lshr_ln831_fu_334_p2(8 - 1 downto 0);
    trunc_ln831_4_fu_212_p4 <= add_ln831_fu_207_p2(63 downto 1);
    trunc_ln831_fu_203_p1 <= u_fu_82(1 - 1 downto 0);
    trunc_ln832_3_fu_268_p4 <= add_ln832_fu_263_p2(63 downto 1);
    trunc_ln832_fu_394_p1 <= lshr_ln832_fu_389_p2(8 - 1 downto 0);
    trunc_ln_fu_243_p4 <= add_ln831_2_fu_238_p2(63 downto 1);
    u_4_fu_197_p2 <= std_logic_vector(unsigned(u_fu_82) + unsigned(ap_const_lv64_1));
    xor_ln831_fu_318_p2 <= (trunc_ln831_reg_474_pp0_iter4_reg xor trunc_ln831_2);
    xor_ln832_fu_373_p2 <= (trunc_ln832_2 xor trunc_ln831_reg_474_pp0_iter11_reg);
    zext_ln831_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_322_p3),16));
    zext_ln832_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_377_p3),16));
end behav;
