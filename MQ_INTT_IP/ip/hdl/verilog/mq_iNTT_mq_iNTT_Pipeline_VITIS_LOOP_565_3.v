// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mq_iNTT_mq_iNTT_Pipeline_VITIS_LOOP_565_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmemo_AWVALID,
        m_axi_gmemo_AWREADY,
        m_axi_gmemo_AWADDR,
        m_axi_gmemo_AWID,
        m_axi_gmemo_AWLEN,
        m_axi_gmemo_AWSIZE,
        m_axi_gmemo_AWBURST,
        m_axi_gmemo_AWLOCK,
        m_axi_gmemo_AWCACHE,
        m_axi_gmemo_AWPROT,
        m_axi_gmemo_AWQOS,
        m_axi_gmemo_AWREGION,
        m_axi_gmemo_AWUSER,
        m_axi_gmemo_WVALID,
        m_axi_gmemo_WREADY,
        m_axi_gmemo_WDATA,
        m_axi_gmemo_WSTRB,
        m_axi_gmemo_WLAST,
        m_axi_gmemo_WID,
        m_axi_gmemo_WUSER,
        m_axi_gmemo_ARVALID,
        m_axi_gmemo_ARREADY,
        m_axi_gmemo_ARADDR,
        m_axi_gmemo_ARID,
        m_axi_gmemo_ARLEN,
        m_axi_gmemo_ARSIZE,
        m_axi_gmemo_ARBURST,
        m_axi_gmemo_ARLOCK,
        m_axi_gmemo_ARCACHE,
        m_axi_gmemo_ARPROT,
        m_axi_gmemo_ARQOS,
        m_axi_gmemo_ARREGION,
        m_axi_gmemo_ARUSER,
        m_axi_gmemo_RVALID,
        m_axi_gmemo_RREADY,
        m_axi_gmemo_RDATA,
        m_axi_gmemo_RLAST,
        m_axi_gmemo_RID,
        m_axi_gmemo_RFIFONUM,
        m_axi_gmemo_RUSER,
        m_axi_gmemo_RRESP,
        m_axi_gmemo_BVALID,
        m_axi_gmemo_BREADY,
        m_axi_gmemo_BRESP,
        m_axi_gmemo_BID,
        m_axi_gmemo_BUSER,
        j1_2,
        indvars_iv,
        a,
        tmp,
        zext_ln564_1
);

parameter    ap_ST_fsm_pp0_stage0 = 25'd1;
parameter    ap_ST_fsm_pp0_stage1 = 25'd2;
parameter    ap_ST_fsm_pp0_stage2 = 25'd4;
parameter    ap_ST_fsm_pp0_stage3 = 25'd8;
parameter    ap_ST_fsm_pp0_stage4 = 25'd16;
parameter    ap_ST_fsm_pp0_stage5 = 25'd32;
parameter    ap_ST_fsm_pp0_stage6 = 25'd64;
parameter    ap_ST_fsm_pp0_stage7 = 25'd128;
parameter    ap_ST_fsm_pp0_stage8 = 25'd256;
parameter    ap_ST_fsm_pp0_stage9 = 25'd512;
parameter    ap_ST_fsm_pp0_stage10 = 25'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 25'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 25'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 25'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 25'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 25'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 25'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 25'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 25'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 25'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 25'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 25'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 25'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 25'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmemo_AWVALID;
input   m_axi_gmemo_AWREADY;
output  [63:0] m_axi_gmemo_AWADDR;
output  [0:0] m_axi_gmemo_AWID;
output  [31:0] m_axi_gmemo_AWLEN;
output  [2:0] m_axi_gmemo_AWSIZE;
output  [1:0] m_axi_gmemo_AWBURST;
output  [1:0] m_axi_gmemo_AWLOCK;
output  [3:0] m_axi_gmemo_AWCACHE;
output  [2:0] m_axi_gmemo_AWPROT;
output  [3:0] m_axi_gmemo_AWQOS;
output  [3:0] m_axi_gmemo_AWREGION;
output  [0:0] m_axi_gmemo_AWUSER;
output   m_axi_gmemo_WVALID;
input   m_axi_gmemo_WREADY;
output  [15:0] m_axi_gmemo_WDATA;
output  [1:0] m_axi_gmemo_WSTRB;
output   m_axi_gmemo_WLAST;
output  [0:0] m_axi_gmemo_WID;
output  [0:0] m_axi_gmemo_WUSER;
output   m_axi_gmemo_ARVALID;
input   m_axi_gmemo_ARREADY;
output  [63:0] m_axi_gmemo_ARADDR;
output  [0:0] m_axi_gmemo_ARID;
output  [31:0] m_axi_gmemo_ARLEN;
output  [2:0] m_axi_gmemo_ARSIZE;
output  [1:0] m_axi_gmemo_ARBURST;
output  [1:0] m_axi_gmemo_ARLOCK;
output  [3:0] m_axi_gmemo_ARCACHE;
output  [2:0] m_axi_gmemo_ARPROT;
output  [3:0] m_axi_gmemo_ARQOS;
output  [3:0] m_axi_gmemo_ARREGION;
output  [0:0] m_axi_gmemo_ARUSER;
input   m_axi_gmemo_RVALID;
output   m_axi_gmemo_RREADY;
input  [15:0] m_axi_gmemo_RDATA;
input   m_axi_gmemo_RLAST;
input  [0:0] m_axi_gmemo_RID;
input  [9:0] m_axi_gmemo_RFIFONUM;
input  [0:0] m_axi_gmemo_RUSER;
input  [1:0] m_axi_gmemo_RRESP;
input   m_axi_gmemo_BVALID;
output   m_axi_gmemo_BREADY;
input  [1:0] m_axi_gmemo_BRESP;
input  [0:0] m_axi_gmemo_BID;
input  [0:0] m_axi_gmemo_BUSER;
input  [63:0] j1_2;
input  [63:0] indvars_iv;
input  [63:0] a;
input  [62:0] tmp;
input  [13:0] zext_ln564_1;

reg ap_idle;
reg m_axi_gmemo_AWVALID;
reg[63:0] m_axi_gmemo_AWADDR;
reg m_axi_gmemo_WVALID;
reg[15:0] m_axi_gmemo_WDATA;
reg m_axi_gmemo_ARVALID;
reg[63:0] m_axi_gmemo_ARADDR;
reg m_axi_gmemo_RREADY;
reg m_axi_gmemo_BREADY;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state27_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln565_fu_182_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_subdone;
reg    gmemo_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln565_reg_446;
reg    gmemo_blk_n_R;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
reg    gmemo_blk_n_AW;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
reg    gmemo_blk_n_W;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
reg    gmemo_blk_n_B;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_pp0_stage17;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_pp0_stage20;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state26_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln564_1_cast_fu_170_p1;
reg   [31:0] zext_ln564_1_cast_reg_441;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] gmemo_addr_reg_450;
reg   [63:0] gmemo_addr_1_reg_457;
reg   [15:0] u_reg_464;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg   [15:0] v_reg_471;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
wire   [15:0] add_ln570_fu_316_p2;
reg   [15:0] add_ln570_reg_477;
wire    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage11_11001;
wire  signed [31:0] grp_fu_395_p3;
reg  signed [31:0] z_reg_482;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
reg    ap_block_state18_pp0_stage17_iter0;
reg    ap_block_pp0_stage17_11001;
wire   [15:0] add_ln572_fu_389_p2;
reg   [15:0] add_ln572_reg_497;
wire    ap_block_state21_pp0_stage20_iter0;
reg    ap_block_state21_io;
reg    ap_block_pp0_stage20_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire  signed [63:0] sext_ln568_fu_212_p1;
wire  signed [63:0] sext_ln569_fu_250_p1;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage2_11001;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage3_11001;
wire    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage12_11001;
wire    ap_block_pp0_stage12_01001;
wire    ap_block_state22_pp0_stage21_iter0;
reg    ap_block_state22_io;
reg    ap_block_pp0_stage21_11001;
wire    ap_block_pp0_stage21_01001;
reg   [63:0] j_fu_92;
wire   [63:0] j_2_fu_260_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
wire   [63:0] shl_ln568_fu_191_p2;
wire   [63:0] add_ln568_fu_197_p2;
wire   [62:0] trunc_ln4_fu_202_p4;
wire   [62:0] trunc_ln568_fu_187_p1;
wire   [62:0] add_ln569_fu_222_p2;
wire   [63:0] shl_ln1_fu_227_p3;
wire   [63:0] add_ln569_1_fu_235_p2;
wire   [62:0] trunc_ln569_2_fu_240_p4;
wire   [16:0] zext_ln566_2_fu_277_p1;
wire   [16:0] add_ln356_fu_280_p2;
wire  signed [17:0] sext_ln356_fu_286_p1;
wire   [17:0] zext_ln566_1_fu_274_p1;
wire   [17:0] d_fu_290_p2;
wire   [0:0] tmp_1_fu_296_p3;
wire   [15:0] select_ln570_fu_308_p3;
wire   [15:0] add_ln570_1_fu_304_p2;
wire   [16:0] zext_ln566_fu_271_p1;
wire  signed [16:0] d_1_fu_322_p2;
wire   [0:0] tmp_2_fu_332_p3;
wire    ap_block_pp0_stage14;
wire  signed [15:0] zext_ln406_fu_351_p0;
wire   [15:0] grp_fu_403_p2;
wire  signed [31:0] trunc_ln8_fu_354_p1;
wire   [31:0] grp_fu_410_p3;
wire   [15:0] trunc_ln8_fu_354_p4;
wire   [16:0] zext_ln396_1_fu_363_p1;
wire   [16:0] z_2_fu_367_p2;
wire   [0:0] tmp_3_fu_373_p3;
wire   [15:0] select_ln572_fu_381_p3;
wire  signed [14:0] grp_fu_395_p0;
wire   [13:0] grp_fu_395_p2;
wire  signed [15:0] grp_fu_403_p0;
wire   [13:0] grp_fu_403_p1;
wire   [15:0] grp_fu_410_p0;
wire   [13:0] grp_fu_410_p1;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_pp0_stage19;
reg    grp_fu_395_ce;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire    ap_CS_fsm_pp0_stage13;
reg    grp_fu_403_ce;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_11001;
wire    ap_CS_fsm_pp0_stage16;
reg    grp_fu_410_ce;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_11001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [24:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
reg    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
reg    ap_block_pp0_stage20_subdone;
reg    ap_block_pp0_stage21_subdone;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire  signed [17:0] grp_fu_395_p00;
wire   [29:0] grp_fu_410_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

mq_iNTT_am_addmul_15s_17s_14ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 32 ))
am_addmul_15s_17s_14ns_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_395_p0),
    .din1(d_1_fu_322_p2),
    .din2(grp_fu_395_p2),
    .ce(grp_fu_395_ce),
    .dout(grp_fu_395_p3)
);

mq_iNTT_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_403_p0),
    .din1(grp_fu_403_p1),
    .ce(grp_fu_403_ce),
    .dout(grp_fu_403_p2)
);

mq_iNTT_mac_muladd_16ns_14ns_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32s_32_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_410_p0),
    .din1(grp_fu_410_p1),
    .din2(z_reg_482),
    .ce(grp_fu_410_ce),
    .dout(grp_fu_410_p3)
);

mq_iNTT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_92 <= j1_2;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln565_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_fu_92 <= j_2_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        add_ln570_reg_477 <= add_ln570_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage20) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage20_11001))) begin
        add_ln572_reg_497 <= add_ln572_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln565_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmemo_addr_1_reg_457 <= sext_ln569_fu_250_p1;
        gmemo_addr_reg_450 <= sext_ln568_fu_212_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln565_reg_446 <= icmp_ln565_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        u_reg_464 <= m_axi_gmemo_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        v_reg_471 <= m_axi_gmemo_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        z_reg_482 <= grp_fu_395_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln564_1_cast_reg_441[13 : 0] <= zext_ln564_1_cast_fu_170_p1[13 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln565_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage2)))) begin
        gmemo_blk_n_AR = m_axi_gmemo_ARREADY;
    end else begin
        gmemo_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage20)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage11)))) begin
        gmemo_blk_n_AW = m_axi_gmemo_AWREADY;
    end else begin
        gmemo_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage17)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmemo_blk_n_B = m_axi_gmemo_BVALID;
    end else begin
        gmemo_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage9)))) begin
        gmemo_blk_n_R = m_axi_gmemo_RVALID;
    end else begin
        gmemo_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage21)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage12)))) begin
        gmemo_blk_n_W = m_axi_gmemo_WREADY;
    end else begin
        gmemo_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_395_ce = 1'b1;
    end else begin
        grp_fu_395_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)))) begin
        grp_fu_403_ce = 1'b1;
    end else begin
        grp_fu_403_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)))) begin
        grp_fu_410_ce = 1'b1;
    end else begin
        grp_fu_410_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            m_axi_gmemo_ARADDR = gmemo_addr_1_reg_457;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
            m_axi_gmemo_ARADDR = gmemo_addr_reg_450;
        end else begin
            m_axi_gmemo_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmemo_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        m_axi_gmemo_ARVALID = 1'b1;
    end else begin
        m_axi_gmemo_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001))) begin
            m_axi_gmemo_AWADDR = gmemo_addr_1_reg_457;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
            m_axi_gmemo_AWADDR = gmemo_addr_reg_450;
        end else begin
            m_axi_gmemo_AWADDR = 'bx;
        end
    end else begin
        m_axi_gmemo_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage20_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        m_axi_gmemo_AWVALID = 1'b1;
    end else begin
        m_axi_gmemo_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage17_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmemo_BREADY = 1'b1;
    end else begin
        m_axi_gmemo_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage9_11001)))) begin
        m_axi_gmemo_RREADY = 1'b1;
    end else begin
        m_axi_gmemo_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_01001))) begin
            m_axi_gmemo_WDATA = add_ln572_reg_497;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_01001))) begin
            m_axi_gmemo_WDATA = add_ln570_reg_477;
        end else begin
            m_axi_gmemo_WDATA = 'bx;
        end
    end else begin
        m_axi_gmemo_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage21_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln565_reg_446 == 1'd1) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        m_axi_gmemo_WVALID = 1'b1;
    end else begin
        m_axi_gmemo_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln356_fu_280_p2 = ($signed(zext_ln566_2_fu_277_p1) + $signed(17'd118783));

assign add_ln568_fu_197_p2 = (shl_ln568_fu_191_p2 + a);

assign add_ln569_1_fu_235_p2 = (shl_ln1_fu_227_p3 + a);

assign add_ln569_fu_222_p2 = (trunc_ln568_fu_187_p1 + tmp);

assign add_ln570_1_fu_304_p2 = (u_reg_464 + v_reg_471);

assign add_ln570_fu_316_p2 = (select_ln570_fu_308_p3 + add_ln570_1_fu_304_p2);

assign add_ln572_fu_389_p2 = (select_ln572_fu_381_p3 + trunc_ln8_fu_354_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((m_axi_gmemo_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((m_axi_gmemo_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage17_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1) & (m_axi_gmemo_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage17_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1) & (m_axi_gmemo_BVALID == 1'b0));
end

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmemo_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmemo_BVALID == 1'b0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage20_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state21_io));
end

always @ (*) begin
    ap_block_pp0_stage20_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state21_io));
end

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage21_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state22_io));
end

always @ (*) begin
    ap_block_pp0_stage21_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state22_io));
end

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((m_axi_gmemo_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((m_axi_gmemo_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln565_reg_446 == 1'd1));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((m_axi_gmemo_RVALID == 1'b0) & (icmp_ln565_reg_446 == 1'd1));
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((m_axi_gmemo_RVALID == 1'b0) & (icmp_ln565_reg_446 == 1'd1));
end

always @ (*) begin
    ap_block_state12_io = ((m_axi_gmemo_AWREADY == 1'b0) & (icmp_ln565_reg_446 == 1'd1));
end

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((m_axi_gmemo_WREADY == 1'b0) & (icmp_ln565_reg_446 == 1'd1));
end

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage17_iter0 = ((icmp_ln565_reg_446 == 1'd1) & (m_axi_gmemo_BVALID == 1'b0));
end

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((m_axi_gmemo_AWREADY == 1'b0) & (icmp_ln565_reg_446 == 1'd1));
end

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((m_axi_gmemo_WREADY == 1'b0) & (icmp_ln565_reg_446 == 1'd1));
end

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp0_stage1_iter1 = (m_axi_gmemo_BVALID == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmemo_ARREADY == 1'b0) & (icmp_ln565_reg_446 == 1'd1));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmemo_ARREADY == 1'b0) & (icmp_ln565_reg_446 == 1'd1));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign d_1_fu_322_p2 = (zext_ln566_fu_271_p1 - zext_ln566_2_fu_277_p1);

assign d_fu_290_p2 = ($signed(sext_ln356_fu_286_p1) + $signed(zext_ln566_1_fu_274_p1));

assign grp_fu_395_p0 = grp_fu_395_p00;

assign grp_fu_395_p00 = ((tmp_2_fu_332_p3[0:0] == 1'b1) ? 18'd12289 : 18'd0);

assign grp_fu_395_p2 = zext_ln564_1_cast_reg_441;

assign grp_fu_403_p0 = grp_fu_395_p3[15:0];

assign grp_fu_403_p1 = 16'd12287;

assign grp_fu_410_p0 = grp_fu_410_p00;

assign grp_fu_410_p00 = $unsigned(zext_ln406_fu_351_p0);

assign grp_fu_410_p1 = 30'd12289;

assign icmp_ln565_fu_182_p2 = ((j_fu_92 < indvars_iv) ? 1'b1 : 1'b0);

assign j_2_fu_260_p2 = (j_fu_92 + 64'd1);

assign m_axi_gmemo_ARBURST = 2'd0;

assign m_axi_gmemo_ARCACHE = 4'd0;

assign m_axi_gmemo_ARID = 1'd0;

assign m_axi_gmemo_ARLEN = 32'd1;

assign m_axi_gmemo_ARLOCK = 2'd0;

assign m_axi_gmemo_ARPROT = 3'd0;

assign m_axi_gmemo_ARQOS = 4'd0;

assign m_axi_gmemo_ARREGION = 4'd0;

assign m_axi_gmemo_ARSIZE = 3'd0;

assign m_axi_gmemo_ARUSER = 1'd0;

assign m_axi_gmemo_AWBURST = 2'd0;

assign m_axi_gmemo_AWCACHE = 4'd0;

assign m_axi_gmemo_AWID = 1'd0;

assign m_axi_gmemo_AWLEN = 32'd1;

assign m_axi_gmemo_AWLOCK = 2'd0;

assign m_axi_gmemo_AWPROT = 3'd0;

assign m_axi_gmemo_AWQOS = 4'd0;

assign m_axi_gmemo_AWREGION = 4'd0;

assign m_axi_gmemo_AWSIZE = 3'd0;

assign m_axi_gmemo_AWUSER = 1'd0;

assign m_axi_gmemo_WID = 1'd0;

assign m_axi_gmemo_WLAST = 1'b0;

assign m_axi_gmemo_WSTRB = 2'd3;

assign m_axi_gmemo_WUSER = 1'd0;

assign select_ln570_fu_308_p3 = ((tmp_1_fu_296_p3[0:0] == 1'b1) ? 16'd0 : 16'd53247);

assign select_ln572_fu_381_p3 = ((tmp_3_fu_373_p3[0:0] == 1'b1) ? 16'd0 : 16'd53247);

assign sext_ln356_fu_286_p1 = $signed(add_ln356_fu_280_p2);

assign sext_ln568_fu_212_p1 = $signed(trunc_ln4_fu_202_p4);

assign sext_ln569_fu_250_p1 = $signed(trunc_ln569_2_fu_240_p4);

assign shl_ln1_fu_227_p3 = {{add_ln569_fu_222_p2}, {1'd0}};

assign shl_ln568_fu_191_p2 = j_fu_92 << 64'd1;

assign tmp_1_fu_296_p3 = d_fu_290_p2[32'd17];

assign tmp_2_fu_332_p3 = d_1_fu_322_p2[32'd16];

assign tmp_3_fu_373_p3 = z_2_fu_367_p2[32'd16];

assign trunc_ln4_fu_202_p4 = {{add_ln568_fu_197_p2[63:1]}};

assign trunc_ln568_fu_187_p1 = j_fu_92[62:0];

assign trunc_ln569_2_fu_240_p4 = {{add_ln569_1_fu_235_p2[63:1]}};

assign trunc_ln8_fu_354_p1 = grp_fu_410_p3;

assign trunc_ln8_fu_354_p4 = {{trunc_ln8_fu_354_p1[31:16]}};

assign z_2_fu_367_p2 = ($signed(zext_ln396_1_fu_363_p1) + $signed(17'd118783));

assign zext_ln396_1_fu_363_p1 = trunc_ln8_fu_354_p4;

assign zext_ln406_fu_351_p0 = grp_fu_403_p2;

assign zext_ln564_1_cast_fu_170_p1 = zext_ln564_1;

assign zext_ln566_1_fu_274_p1 = u_reg_464;

assign zext_ln566_2_fu_277_p1 = v_reg_471;

assign zext_ln566_fu_271_p1 = u_reg_464;

always @ (posedge ap_clk) begin
    zext_ln564_1_cast_reg_441[31:14] <= 18'b000000000000000000;
end

endmodule //mq_iNTT_mq_iNTT_Pipeline_VITIS_LOOP_565_3
