// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mq_iNTT_mq_iNTT_Pipeline_VITIS_LOOP_593_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmemo_AWVALID,
        m_axi_gmemo_AWREADY,
        m_axi_gmemo_AWADDR,
        m_axi_gmemo_AWID,
        m_axi_gmemo_AWLEN,
        m_axi_gmemo_AWSIZE,
        m_axi_gmemo_AWBURST,
        m_axi_gmemo_AWLOCK,
        m_axi_gmemo_AWCACHE,
        m_axi_gmemo_AWPROT,
        m_axi_gmemo_AWQOS,
        m_axi_gmemo_AWREGION,
        m_axi_gmemo_AWUSER,
        m_axi_gmemo_WVALID,
        m_axi_gmemo_WREADY,
        m_axi_gmemo_WDATA,
        m_axi_gmemo_WSTRB,
        m_axi_gmemo_WLAST,
        m_axi_gmemo_WID,
        m_axi_gmemo_WUSER,
        m_axi_gmemo_ARVALID,
        m_axi_gmemo_ARREADY,
        m_axi_gmemo_ARADDR,
        m_axi_gmemo_ARID,
        m_axi_gmemo_ARLEN,
        m_axi_gmemo_ARSIZE,
        m_axi_gmemo_ARBURST,
        m_axi_gmemo_ARLOCK,
        m_axi_gmemo_ARCACHE,
        m_axi_gmemo_ARPROT,
        m_axi_gmemo_ARQOS,
        m_axi_gmemo_ARREGION,
        m_axi_gmemo_ARUSER,
        m_axi_gmemo_RVALID,
        m_axi_gmemo_RREADY,
        m_axi_gmemo_RDATA,
        m_axi_gmemo_RLAST,
        m_axi_gmemo_RID,
        m_axi_gmemo_RFIFONUM,
        m_axi_gmemo_RUSER,
        m_axi_gmemo_RRESP,
        m_axi_gmemo_BVALID,
        m_axi_gmemo_BREADY,
        m_axi_gmemo_BRESP,
        m_axi_gmemo_BID,
        m_axi_gmemo_BUSER,
        m_9,
        a,
        ni_2_cast7_reload
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmemo_AWVALID;
input   m_axi_gmemo_AWREADY;
output  [63:0] m_axi_gmemo_AWADDR;
output  [0:0] m_axi_gmemo_AWID;
output  [31:0] m_axi_gmemo_AWLEN;
output  [2:0] m_axi_gmemo_AWSIZE;
output  [1:0] m_axi_gmemo_AWBURST;
output  [1:0] m_axi_gmemo_AWLOCK;
output  [3:0] m_axi_gmemo_AWCACHE;
output  [2:0] m_axi_gmemo_AWPROT;
output  [3:0] m_axi_gmemo_AWQOS;
output  [3:0] m_axi_gmemo_AWREGION;
output  [0:0] m_axi_gmemo_AWUSER;
output   m_axi_gmemo_WVALID;
input   m_axi_gmemo_WREADY;
output  [15:0] m_axi_gmemo_WDATA;
output  [1:0] m_axi_gmemo_WSTRB;
output   m_axi_gmemo_WLAST;
output  [0:0] m_axi_gmemo_WID;
output  [0:0] m_axi_gmemo_WUSER;
output   m_axi_gmemo_ARVALID;
input   m_axi_gmemo_ARREADY;
output  [63:0] m_axi_gmemo_ARADDR;
output  [0:0] m_axi_gmemo_ARID;
output  [31:0] m_axi_gmemo_ARLEN;
output  [2:0] m_axi_gmemo_ARSIZE;
output  [1:0] m_axi_gmemo_ARBURST;
output  [1:0] m_axi_gmemo_ARLOCK;
output  [3:0] m_axi_gmemo_ARCACHE;
output  [2:0] m_axi_gmemo_ARPROT;
output  [3:0] m_axi_gmemo_ARQOS;
output  [3:0] m_axi_gmemo_ARREGION;
output  [0:0] m_axi_gmemo_ARUSER;
input   m_axi_gmemo_RVALID;
output   m_axi_gmemo_RREADY;
input  [15:0] m_axi_gmemo_RDATA;
input   m_axi_gmemo_RLAST;
input  [0:0] m_axi_gmemo_RID;
input  [9:0] m_axi_gmemo_RFIFONUM;
input  [0:0] m_axi_gmemo_RUSER;
input  [1:0] m_axi_gmemo_RRESP;
input   m_axi_gmemo_BVALID;
output   m_axi_gmemo_BREADY;
input  [1:0] m_axi_gmemo_BRESP;
input  [0:0] m_axi_gmemo_BID;
input  [0:0] m_axi_gmemo_BUSER;
input  [63:0] m_9;
input  [63:0] a;
input  [30:0] ni_2_cast7_reload;

reg ap_idle;
reg m_axi_gmemo_AWVALID;
reg m_axi_gmemo_WVALID;
reg m_axi_gmemo_ARVALID;
reg m_axi_gmemo_RREADY;
reg m_axi_gmemo_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
reg    ap_block_state23_pp0_stage0_iter22;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln593_fu_132_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmemo_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmemo_blk_n_R;
reg    gmemo_blk_n_AW;
reg    gmemo_blk_n_W;
reg    gmemo_blk_n_B;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] ni_2_cast7_reload_cast_fu_120_p1;
reg   [31:0] ni_2_cast7_reload_cast_reg_267;
reg   [63:0] gmemo_addr_reg_276;
reg   [63:0] gmemo_addr_reg_276_pp0_iter2_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter3_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter4_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter5_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter6_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter7_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter8_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter9_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter10_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter11_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter12_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter13_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter14_reg;
reg   [63:0] gmemo_addr_reg_276_pp0_iter15_reg;
reg   [15:0] gmemo_addr_read_reg_283;
wire   [31:0] z_fu_182_p2;
reg   [31:0] z_reg_288;
reg   [31:0] z_reg_288_pp0_iter11_reg;
reg   [31:0] z_reg_288_pp0_iter12_reg;
reg   [31:0] z_reg_288_pp0_iter13_reg;
reg   [31:0] z_reg_288_pp0_iter14_reg;
wire   [15:0] add_ln594_1_fu_229_p2;
reg   [15:0] add_ln594_1_reg_303;
wire  signed [63:0] sext_ln594_fu_164_p1;
reg    ap_block_pp0_stage0_01001;
reg   [63:0] m_fu_76;
wire   [63:0] m_2_fu_137_p2;
wire    ap_loop_init;
wire   [63:0] shl_ln594_fu_143_p2;
wire   [63:0] add_ln594_fu_149_p2;
wire   [62:0] trunc_ln_fu_154_p4;
wire   [30:0] z_fu_182_p0;
wire   [15:0] z_fu_182_p1;
wire  signed [15:0] zext_ln406_fu_191_p0;
wire   [15:0] grp_fu_235_p2;
wire   [31:0] grp_fu_242_p3;
wire   [15:0] trunc_ln396_1_fu_194_p4;
wire   [16:0] zext_ln396_1_fu_203_p1;
wire   [16:0] z_1_fu_207_p2;
wire   [0:0] tmp_fu_213_p3;
wire   [15:0] select_ln594_fu_221_p3;
wire  signed [15:0] grp_fu_235_p0;
wire   [13:0] grp_fu_235_p1;
wire   [15:0] grp_fu_242_p0;
wire   [13:0] grp_fu_242_p1;
reg    grp_fu_235_ce;
reg    grp_fu_242_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [29:0] grp_fu_242_p00;
wire   [31:0] z_fu_182_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mq_iNTT_mul_31ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_31ns_16ns_32_1_1_U15(
    .din0(z_fu_182_p0),
    .din1(z_fu_182_p1),
    .dout(z_fu_182_p2)
);

mq_iNTT_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_235_p0),
    .din1(grp_fu_235_p1),
    .ce(grp_fu_235_ce),
    .dout(grp_fu_235_p2)
);

mq_iNTT_mac_muladd_16ns_14ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16ns_14ns_32ns_32_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_242_p0),
    .din1(grp_fu_242_p1),
    .din2(z_reg_288_pp0_iter14_reg),
    .ce(grp_fu_242_ce),
    .dout(grp_fu_242_p3)
);

mq_iNTT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter21_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_fu_76 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln593_fu_132_p2 == 1'd0))) begin
            m_fu_76 <= m_2_fu_137_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln594_1_reg_303 <= add_ln594_1_fu_229_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmemo_addr_read_reg_283 <= m_axi_gmemo_RDATA;
        gmemo_addr_reg_276_pp0_iter10_reg <= gmemo_addr_reg_276_pp0_iter9_reg;
        gmemo_addr_reg_276_pp0_iter11_reg <= gmemo_addr_reg_276_pp0_iter10_reg;
        gmemo_addr_reg_276_pp0_iter12_reg <= gmemo_addr_reg_276_pp0_iter11_reg;
        gmemo_addr_reg_276_pp0_iter13_reg <= gmemo_addr_reg_276_pp0_iter12_reg;
        gmemo_addr_reg_276_pp0_iter14_reg <= gmemo_addr_reg_276_pp0_iter13_reg;
        gmemo_addr_reg_276_pp0_iter15_reg <= gmemo_addr_reg_276_pp0_iter14_reg;
        gmemo_addr_reg_276_pp0_iter2_reg <= gmemo_addr_reg_276;
        gmemo_addr_reg_276_pp0_iter3_reg <= gmemo_addr_reg_276_pp0_iter2_reg;
        gmemo_addr_reg_276_pp0_iter4_reg <= gmemo_addr_reg_276_pp0_iter3_reg;
        gmemo_addr_reg_276_pp0_iter5_reg <= gmemo_addr_reg_276_pp0_iter4_reg;
        gmemo_addr_reg_276_pp0_iter6_reg <= gmemo_addr_reg_276_pp0_iter5_reg;
        gmemo_addr_reg_276_pp0_iter7_reg <= gmemo_addr_reg_276_pp0_iter6_reg;
        gmemo_addr_reg_276_pp0_iter8_reg <= gmemo_addr_reg_276_pp0_iter7_reg;
        gmemo_addr_reg_276_pp0_iter9_reg <= gmemo_addr_reg_276_pp0_iter8_reg;
        z_reg_288 <= z_fu_182_p2;
        z_reg_288_pp0_iter11_reg <= z_reg_288;
        z_reg_288_pp0_iter12_reg <= z_reg_288_pp0_iter11_reg;
        z_reg_288_pp0_iter13_reg <= z_reg_288_pp0_iter12_reg;
        z_reg_288_pp0_iter14_reg <= z_reg_288_pp0_iter13_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        ni_2_cast7_reload_cast_reg_267[30 : 0] <= ni_2_cast7_reload_cast_fu_120_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln593_fu_132_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmemo_addr_reg_276 <= sext_ln594_fu_164_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln593_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter21_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmemo_blk_n_AR = m_axi_gmemo_ARREADY;
    end else begin
        gmemo_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmemo_blk_n_AW = m_axi_gmemo_AWREADY;
    end else begin
        gmemo_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmemo_blk_n_B = m_axi_gmemo_BVALID;
    end else begin
        gmemo_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmemo_blk_n_R = m_axi_gmemo_RVALID;
    end else begin
        gmemo_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmemo_blk_n_W = m_axi_gmemo_WREADY;
    end else begin
        gmemo_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_235_ce = 1'b1;
    end else begin
        grp_fu_235_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_242_ce = 1'b1;
    end else begin
        grp_fu_242_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmemo_ARVALID = 1'b1;
    end else begin
        m_axi_gmemo_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmemo_AWVALID = 1'b1;
    end else begin
        m_axi_gmemo_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmemo_BREADY = 1'b1;
    end else begin
        m_axi_gmemo_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmemo_RREADY = 1'b1;
    end else begin
        m_axi_gmemo_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmemo_WVALID = 1'b1;
    end else begin
        m_axi_gmemo_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln594_1_fu_229_p2 = (select_ln594_fu_221_p3 + trunc_ln396_1_fu_194_p4);

assign add_ln594_fu_149_p2 = (shl_ln594_fu_143_p2 + a);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter22 == 1'b1) & (m_axi_gmemo_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmemo_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter22 == 1'b1) & (m_axi_gmemo_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (m_axi_gmemo_WREADY == 1'b0)) | ((m_axi_gmemo_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmemo_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmemo_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter22 == 1'b1) & (m_axi_gmemo_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (m_axi_gmemo_WREADY == 1'b0)) | ((m_axi_gmemo_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmemo_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmemo_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (m_axi_gmemo_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp0_stage0_iter22 = (m_axi_gmemo_BVALID == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_235_p0 = z_fu_182_p2[15:0];

assign grp_fu_235_p1 = 16'd12287;

assign grp_fu_242_p0 = grp_fu_242_p00;

assign grp_fu_242_p00 = $unsigned(zext_ln406_fu_191_p0);

assign grp_fu_242_p1 = 30'd12289;

assign icmp_ln593_fu_132_p2 = ((m_fu_76 == m_9) ? 1'b1 : 1'b0);

assign m_2_fu_137_p2 = (m_fu_76 + 64'd1);

assign m_axi_gmemo_ARADDR = gmemo_addr_reg_276;

assign m_axi_gmemo_ARBURST = 2'd0;

assign m_axi_gmemo_ARCACHE = 4'd0;

assign m_axi_gmemo_ARID = 1'd0;

assign m_axi_gmemo_ARLEN = 32'd1;

assign m_axi_gmemo_ARLOCK = 2'd0;

assign m_axi_gmemo_ARPROT = 3'd0;

assign m_axi_gmemo_ARQOS = 4'd0;

assign m_axi_gmemo_ARREGION = 4'd0;

assign m_axi_gmemo_ARSIZE = 3'd0;

assign m_axi_gmemo_ARUSER = 1'd0;

assign m_axi_gmemo_AWADDR = gmemo_addr_reg_276_pp0_iter15_reg;

assign m_axi_gmemo_AWBURST = 2'd0;

assign m_axi_gmemo_AWCACHE = 4'd0;

assign m_axi_gmemo_AWID = 1'd0;

assign m_axi_gmemo_AWLEN = 32'd1;

assign m_axi_gmemo_AWLOCK = 2'd0;

assign m_axi_gmemo_AWPROT = 3'd0;

assign m_axi_gmemo_AWQOS = 4'd0;

assign m_axi_gmemo_AWREGION = 4'd0;

assign m_axi_gmemo_AWSIZE = 3'd0;

assign m_axi_gmemo_AWUSER = 1'd0;

assign m_axi_gmemo_WDATA = add_ln594_1_reg_303;

assign m_axi_gmemo_WID = 1'd0;

assign m_axi_gmemo_WLAST = 1'b0;

assign m_axi_gmemo_WSTRB = 2'd3;

assign m_axi_gmemo_WUSER = 1'd0;

assign ni_2_cast7_reload_cast_fu_120_p1 = ni_2_cast7_reload;

assign select_ln594_fu_221_p3 = ((tmp_fu_213_p3[0:0] == 1'b1) ? 16'd0 : 16'd53247);

assign sext_ln594_fu_164_p1 = $signed(trunc_ln_fu_154_p4);

assign shl_ln594_fu_143_p2 = m_fu_76 << 64'd1;

assign tmp_fu_213_p3 = z_1_fu_207_p2[32'd16];

assign trunc_ln396_1_fu_194_p4 = {{grp_fu_242_p3[31:16]}};

assign trunc_ln_fu_154_p4 = {{add_ln594_fu_149_p2[63:1]}};

assign z_1_fu_207_p2 = ($signed(zext_ln396_1_fu_203_p1) + $signed(17'd118783));

assign z_fu_182_p0 = ni_2_cast7_reload_cast_reg_267;

assign z_fu_182_p1 = z_fu_182_p10;

assign z_fu_182_p10 = gmemo_addr_read_reg_283;

assign zext_ln396_1_fu_203_p1 = trunc_ln396_1_fu_194_p4;

assign zext_ln406_fu_191_p0 = grp_fu_235_p2;

always @ (posedge ap_clk) begin
    ni_2_cast7_reload_cast_reg_267[31] <= 1'b0;
end

endmodule //mq_iNTT_mq_iNTT_Pipeline_VITIS_LOOP_593_5
