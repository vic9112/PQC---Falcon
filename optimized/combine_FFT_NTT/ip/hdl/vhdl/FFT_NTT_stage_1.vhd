-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_NTT_stage_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_buf_ce0 : OUT STD_LOGIC;
    in_buf_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    in_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_buf_ce1 : OUT STD_LOGIC;
    in_buf_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    stage0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    stage0_ce0 : OUT STD_LOGIC;
    stage0_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    stage0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    stage0_ce1 : OUT STD_LOGIC;
    stage0_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    t : IN STD_LOGIC_VECTOR (10 downto 0);
    m : IN STD_LOGIC_VECTOR (9 downto 0);
    mode : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of FFT_NTT_stage_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_FF : STD_LOGIC_VECTOR (9 downto 0) := "0011111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_9FFE : STD_LOGIC_VECTOR (15 downto 0) := "1001111111111110";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln99_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gm_re_tab_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal gm_re_tab_ce0 : STD_LOGIC;
    signal gm_re_tab_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gm_im_tab_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal gm_im_tab_ce0 : STD_LOGIC;
    signal gm_im_tab_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal GMb_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal GMb_ce0 : STD_LOGIC;
    signal GMb_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mode_read_read_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln_reg_654 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_1_reg_661 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_1_reg_661_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_1_reg_661_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_1_reg_661_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_1_reg_661_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_1_reg_661_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_1_reg_661_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_1_reg_661_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln75_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_667_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_671_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln81_fu_334_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln81_reg_680 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_609_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_700 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_700_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_700_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_700_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_700_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_700_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_700_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_700_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal gm_re_reg_706 : STD_LOGIC_VECTOR (63 downto 0);
    signal gm_im_reg_711 : STD_LOGIC_VECTOR (63 downto 0);
    signal gm_reg_716 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln104_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_721_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_737_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_757 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_757_pp0_iter11_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_757_pp0_iter12_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_623_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln105_reg_767 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln3_reg_782 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln3_reg_782_pp0_iter14_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln3_reg_782_pp0_iter15_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln3_reg_782_pp0_iter16_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln3_reg_782_pp0_iter17_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln102_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_788 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_788_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_reg_788_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_reg_799 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_reg_799_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_reg_799_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_reg_799_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal in_buf_load_reg_809 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_buf_load_1_reg_815 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_re_reg_820 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_im_reg_825 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_830 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_reg_830_pp0_iter17_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal x_re_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_re_reg_837 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_reg_842 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln117_fu_578_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln117_reg_847 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add1_reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_reg_857 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub1_reg_862 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_complex_mul_fu_271_ap_start : STD_LOGIC;
    signal grp_complex_mul_fu_271_ap_done : STD_LOGIC;
    signal grp_complex_mul_fu_271_ap_idle : STD_LOGIC;
    signal grp_complex_mul_fu_271_ap_ready : STD_LOGIC;
    signal grp_complex_mul_fu_271_x_re : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_complex_mul_fu_271_x_im : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_complex_mul_fu_271_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_complex_mul_fu_271_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_complex_mul_fu_271_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op112_call_state18_state17 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln81_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stage0_addr_gep_fu_236_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_fu_110 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_2_fu_311_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_543_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln94_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1_fu_589_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln95_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln97_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln98_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_279_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_fu_345_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln104_fu_345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln104_fu_345_p2 : signal is "no";
    signal xor_ln90_fu_355_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1_fu_369_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_629_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln88_fu_415_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_1_fu_459_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_468_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln108_fu_476_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_fu_464_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_3_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_1_fu_453_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln111_fu_494_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln111_fu_500_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln74_1_fu_490_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_1_fu_504_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln107_fu_456_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln113_1_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln113_fu_529_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln113_2_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln113_fu_537_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_fu_450_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_2_fu_552_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln117_fu_570_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln116_fu_566_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_616_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_616_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_623_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_623_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_629_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_629_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_629_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_279_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_283_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter20_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to19 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to20 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op194_store_state38 : BOOLEAN;
    signal ap_enable_operation_194 : BOOLEAN;
    signal ap_enable_state38_pp0_iter18_stage1 : BOOLEAN;
    signal ap_predicate_op203_store_state38 : BOOLEAN;
    signal ap_enable_operation_203 : BOOLEAN;
    signal ap_predicate_op209_store_state39 : BOOLEAN;
    signal ap_enable_operation_209 : BOOLEAN;
    signal ap_enable_state39_pp0_iter19_stage0 : BOOLEAN;
    signal ap_predicate_op213_store_state39 : BOOLEAN;
    signal ap_enable_operation_213 : BOOLEAN;
    signal ap_predicate_op218_store_state40 : BOOLEAN;
    signal ap_enable_operation_218 : BOOLEAN;
    signal ap_enable_state40_pp0_iter19_stage1 : BOOLEAN;
    signal ap_predicate_op221_store_state41 : BOOLEAN;
    signal ap_enable_operation_221 : BOOLEAN;
    signal ap_enable_state41_pp0_iter20_stage0 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_616_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_616_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_629_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_629_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_condition_792 : BOOLEAN;
    signal ap_condition_798 : BOOLEAN;
    signal ap_condition_1047 : BOOLEAN;
    signal ap_condition_1051 : BOOLEAN;
    signal ap_condition_1055 : BOOLEAN;
    signal ap_condition_1059 : BOOLEAN;
    signal ap_condition_1063 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_NTT_complex_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_re : IN STD_LOGIC_VECTOR (63 downto 0);
        x_im : IN STD_LOGIC_VECTOR (63 downto 0);
        y_re : IN STD_LOGIC_VECTOR (63 downto 0);
        y_im : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_NTT_dadddsub_64ns_64ns_64_5_full_dsp_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_NTT_udiv_10ns_10s_10_14_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component FFT_NTT_mac_muladd_10s_10s_10ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component FFT_NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component FFT_NTT_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FFT_NTT_mac_muladd_16ns_14ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component FFT_NTT_stage_1_gm_re_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_NTT_stage_1_gm_im_tab_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_NTT_stage_1_GMb_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component FFT_NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    gm_re_tab_U : component FFT_NTT_stage_1_gm_re_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gm_re_tab_address0,
        ce0 => gm_re_tab_ce0,
        q0 => gm_re_tab_q0);

    gm_im_tab_U : component FFT_NTT_stage_1_gm_im_tab_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gm_im_tab_address0,
        ce0 => gm_im_tab_ce0,
        q0 => gm_im_tab_q0);

    GMb_U : component FFT_NTT_stage_1_GMb_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GMb_address0,
        ce0 => GMb_ce0,
        q0 => GMb_q0);

    grp_complex_mul_fu_271 : component FFT_NTT_complex_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_complex_mul_fu_271_ap_start,
        ap_done => grp_complex_mul_fu_271_ap_done,
        ap_idle => grp_complex_mul_fu_271_ap_idle,
        ap_ready => grp_complex_mul_fu_271_ap_ready,
        x_re => grp_complex_mul_fu_271_x_re,
        x_im => grp_complex_mul_fu_271_x_im,
        y_re => gm_re_reg_706,
        y_im => gm_im_reg_711,
        ap_return_0 => grp_complex_mul_fu_271_ap_return_0,
        ap_return_1 => grp_complex_mul_fu_271_ap_return_1);

    dadddsub_64ns_64ns_64_5_full_dsp_1_x_U19 : component FFT_NTT_dadddsub_64ns_64ns_64_5_full_dsp_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_279_p0,
        din1 => y_re_reg_820,
        opcode => grp_fu_279_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_279_p2);

    dadddsub_64ns_64ns_64_5_full_dsp_1_x_U20 : component FFT_NTT_dadddsub_64ns_64ns_64_5_full_dsp_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        din1 => y_im_reg_825,
        opcode => grp_fu_283_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    udiv_10ns_10s_10_14_1_U21 : component FFT_NTT_udiv_10ns_10s_10_14_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_n_1,
        din1 => grp_fu_317_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_317_p2);

    mac_muladd_10s_10s_10ns_10_4_1_U22 : component FFT_NTT_mac_muladd_10s_10s_10ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_317_p2,
        din1 => trunc_ln_reg_654,
        din2 => n_1_reg_661_pp0_iter7_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_609_p3);

    mul_mul_16ns_14ns_30_4_1_U23 : component FFT_NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_616_p0,
        din1 => grp_fu_616_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p2);

    mul_mul_16s_14ns_16_4_1_U24 : component FFT_NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_623_p0,
        din1 => grp_fu_623_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_623_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U25 : component FFT_NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_629_p0,
        din1 => grp_fu_629_p1,
        din2 => grp_fu_629_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_629_p3);

    flow_control_loop_pipe_sequential_init_U : component FFT_NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_complex_mul_fu_271_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_complex_mul_fu_271_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_predicate_op112_call_state18_state17 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_complex_mul_fu_271_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_complex_mul_fu_271_ap_ready = ap_const_logic_1)) then 
                    grp_complex_mul_fu_271_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter19_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter20_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_loop_exit_ready_pp0_iter19_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0)))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    n_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_boolean_1 = ap_condition_1047)) then 
                    n_fu_110 <= n_2_fu_311_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_110 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add1_reg_852 <= grp_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln117_reg_847 <= add_ln117_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln81_reg_680 <= add_ln81_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gm_im_reg_711 <= gm_im_tab_q0;
                gm_re_reg_706 <= gm_re_tab_q0;
                gm_reg_716 <= GMb_q0;
                    zext_ln104_reg_721(9 downto 0) <= zext_ln104_fu_349_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_700 <= grp_fu_609_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_700_pp0_iter10_reg <= i_reg_700_pp0_iter9_reg;
                i_reg_700_pp0_iter11_reg <= i_reg_700_pp0_iter10_reg;
                i_reg_700_pp0_iter12_reg <= i_reg_700_pp0_iter11_reg;
                i_reg_700_pp0_iter13_reg <= i_reg_700_pp0_iter12_reg;
                i_reg_700_pp0_iter14_reg <= i_reg_700_pp0_iter13_reg;
                i_reg_700_pp0_iter15_reg <= i_reg_700_pp0_iter14_reg;
                i_reg_700_pp0_iter9_reg <= i_reg_700;
                icmp_ln75_reg_667 <= icmp_ln75_fu_305_p2;
                icmp_ln75_reg_667_pp0_iter10_reg <= icmp_ln75_reg_667_pp0_iter9_reg;
                icmp_ln75_reg_667_pp0_iter11_reg <= icmp_ln75_reg_667_pp0_iter10_reg;
                icmp_ln75_reg_667_pp0_iter12_reg <= icmp_ln75_reg_667_pp0_iter11_reg;
                icmp_ln75_reg_667_pp0_iter13_reg <= icmp_ln75_reg_667_pp0_iter12_reg;
                icmp_ln75_reg_667_pp0_iter14_reg <= icmp_ln75_reg_667_pp0_iter13_reg;
                icmp_ln75_reg_667_pp0_iter15_reg <= icmp_ln75_reg_667_pp0_iter14_reg;
                icmp_ln75_reg_667_pp0_iter16_reg <= icmp_ln75_reg_667_pp0_iter15_reg;
                icmp_ln75_reg_667_pp0_iter17_reg <= icmp_ln75_reg_667_pp0_iter16_reg;
                icmp_ln75_reg_667_pp0_iter18_reg <= icmp_ln75_reg_667_pp0_iter17_reg;
                icmp_ln75_reg_667_pp0_iter19_reg <= icmp_ln75_reg_667_pp0_iter18_reg;
                icmp_ln75_reg_667_pp0_iter1_reg <= icmp_ln75_reg_667;
                icmp_ln75_reg_667_pp0_iter2_reg <= icmp_ln75_reg_667_pp0_iter1_reg;
                icmp_ln75_reg_667_pp0_iter3_reg <= icmp_ln75_reg_667_pp0_iter2_reg;
                icmp_ln75_reg_667_pp0_iter4_reg <= icmp_ln75_reg_667_pp0_iter3_reg;
                icmp_ln75_reg_667_pp0_iter5_reg <= icmp_ln75_reg_667_pp0_iter4_reg;
                icmp_ln75_reg_667_pp0_iter6_reg <= icmp_ln75_reg_667_pp0_iter5_reg;
                icmp_ln75_reg_667_pp0_iter7_reg <= icmp_ln75_reg_667_pp0_iter6_reg;
                icmp_ln75_reg_667_pp0_iter8_reg <= icmp_ln75_reg_667_pp0_iter7_reg;
                icmp_ln75_reg_667_pp0_iter9_reg <= icmp_ln75_reg_667_pp0_iter8_reg;
                icmp_ln99_reg_671_pp0_iter10_reg <= icmp_ln99_reg_671_pp0_iter9_reg;
                icmp_ln99_reg_671_pp0_iter11_reg <= icmp_ln99_reg_671_pp0_iter10_reg;
                icmp_ln99_reg_671_pp0_iter12_reg <= icmp_ln99_reg_671_pp0_iter11_reg;
                icmp_ln99_reg_671_pp0_iter13_reg <= icmp_ln99_reg_671_pp0_iter12_reg;
                icmp_ln99_reg_671_pp0_iter14_reg <= icmp_ln99_reg_671_pp0_iter13_reg;
                icmp_ln99_reg_671_pp0_iter15_reg <= icmp_ln99_reg_671_pp0_iter14_reg;
                icmp_ln99_reg_671_pp0_iter16_reg <= icmp_ln99_reg_671_pp0_iter15_reg;
                icmp_ln99_reg_671_pp0_iter17_reg <= icmp_ln99_reg_671_pp0_iter16_reg;
                icmp_ln99_reg_671_pp0_iter18_reg <= icmp_ln99_reg_671_pp0_iter17_reg;
                icmp_ln99_reg_671_pp0_iter19_reg <= icmp_ln99_reg_671_pp0_iter18_reg;
                icmp_ln99_reg_671_pp0_iter1_reg <= icmp_ln99_reg_671;
                icmp_ln99_reg_671_pp0_iter2_reg <= icmp_ln99_reg_671_pp0_iter1_reg;
                icmp_ln99_reg_671_pp0_iter3_reg <= icmp_ln99_reg_671_pp0_iter2_reg;
                icmp_ln99_reg_671_pp0_iter4_reg <= icmp_ln99_reg_671_pp0_iter3_reg;
                icmp_ln99_reg_671_pp0_iter5_reg <= icmp_ln99_reg_671_pp0_iter4_reg;
                icmp_ln99_reg_671_pp0_iter6_reg <= icmp_ln99_reg_671_pp0_iter5_reg;
                icmp_ln99_reg_671_pp0_iter7_reg <= icmp_ln99_reg_671_pp0_iter6_reg;
                icmp_ln99_reg_671_pp0_iter8_reg <= icmp_ln99_reg_671_pp0_iter7_reg;
                icmp_ln99_reg_671_pp0_iter9_reg <= icmp_ln99_reg_671_pp0_iter8_reg;
                n_1_reg_661 <= ap_sig_allocacmp_n_1;
                n_1_reg_661_pp0_iter1_reg <= n_1_reg_661;
                n_1_reg_661_pp0_iter2_reg <= n_1_reg_661_pp0_iter1_reg;
                n_1_reg_661_pp0_iter3_reg <= n_1_reg_661_pp0_iter2_reg;
                n_1_reg_661_pp0_iter4_reg <= n_1_reg_661_pp0_iter3_reg;
                n_1_reg_661_pp0_iter5_reg <= n_1_reg_661_pp0_iter4_reg;
                n_1_reg_661_pp0_iter6_reg <= n_1_reg_661_pp0_iter5_reg;
                n_1_reg_661_pp0_iter7_reg <= n_1_reg_661_pp0_iter6_reg;
                tmp2_reg_757_pp0_iter11_reg <= tmp2_reg_757;
                tmp2_reg_757_pp0_iter12_reg <= tmp2_reg_757_pp0_iter11_reg;
                trunc_ln_reg_654 <= t(10 downto 1);
                    zext_ln104_reg_721_pp0_iter10_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter9_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter11_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter10_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter12_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter11_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter13_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter12_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter14_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter13_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter15_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter14_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter16_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter15_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter17_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter16_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter18_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter17_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter19_reg(9 downto 0) <= zext_ln104_reg_721_pp0_iter18_reg(9 downto 0);
                    zext_ln104_reg_721_pp0_iter9_reg(9 downto 0) <= zext_ln104_reg_721(9 downto 0);
                    zext_ln90_reg_737_pp0_iter10_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter9_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter11_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter10_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter12_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter11_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter13_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter12_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter14_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter13_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter15_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter14_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter16_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter15_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter17_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter16_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter18_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter17_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter19_reg(9 downto 0) <= zext_ln90_reg_737_pp0_iter18_reg(9 downto 0);
                    zext_ln90_reg_737_pp0_iter9_reg(9 downto 0) <= zext_ln90_reg_737(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode_read_read_fu_114_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln99_reg_671 <= icmp_ln99_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                in_buf_load_1_reg_815 <= in_buf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                in_buf_load_reg_809 <= in_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln105_reg_767 <= grp_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub1_reg_862 <= grp_fu_283_p2;
                sub_reg_857 <= grp_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp2_reg_757 <= grp_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                trunc_ln3_reg_782 <= grp_fu_629_p3(30 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                trunc_ln3_reg_782_pp0_iter14_reg <= trunc_ln3_reg_782;
                trunc_ln3_reg_782_pp0_iter15_reg <= trunc_ln3_reg_782_pp0_iter14_reg;
                trunc_ln3_reg_782_pp0_iter16_reg <= trunc_ln3_reg_782_pp0_iter15_reg;
                trunc_ln3_reg_782_pp0_iter17_reg <= trunc_ln3_reg_782_pp0_iter16_reg;
                u_reg_830_pp0_iter17_reg <= u_reg_830;
                    zext_ln102_reg_788_pp0_iter16_reg(9 downto 0) <= zext_ln102_reg_788(9 downto 0);
                    zext_ln102_reg_788_pp0_iter17_reg(9 downto 0) <= zext_ln102_reg_788_pp0_iter16_reg(9 downto 0);
                    zext_ln88_reg_799_pp0_iter16_reg(9 downto 0) <= zext_ln88_reg_799(9 downto 0);
                    zext_ln88_reg_799_pp0_iter17_reg(9 downto 0) <= zext_ln88_reg_799_pp0_iter16_reg(9 downto 0);
                    zext_ln88_reg_799_pp0_iter18_reg(9 downto 0) <= zext_ln88_reg_799_pp0_iter17_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                u_reg_830 <= in_buf_load_reg_809(63 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                x_im_reg_842 <= x_im_fu_446_p1;
                x_re_reg_837 <= x_re_fu_442_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                y_im_reg_825 <= grp_complex_mul_fu_271_ap_return_1;
                y_re_reg_820 <= grp_complex_mul_fu_271_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    zext_ln102_reg_788(9 downto 0) <= zext_ln102_fu_411_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    zext_ln88_reg_799(9 downto 0) <= zext_ln88_fu_420_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln90_reg_737(9 downto 0) <= zext_ln90_fu_361_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln104_reg_721(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter18_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln104_reg_721_pp0_iter19_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter18_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_737_pp0_iter19_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_788(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_788_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln102_reg_788_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln88_reg_799(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln88_reg_799_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln88_reg_799_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln88_reg_799_pp0_iter18_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter20_stage0, ap_idle_pp0_0to19, ap_idle_pp0_1to20, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to19 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter20_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to20 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    GMb_address0 <= zext_ln81_fu_339_p1(10 - 1 downto 0);

    GMb_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            GMb_ce0 <= ap_const_logic_1;
        else 
            GMb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln104_fu_345_p0 <= grp_fu_609_p3;
    add_ln104_fu_345_p2 <= std_logic_vector(signed(add_ln104_fu_345_p0) + signed(trunc_ln_reg_654));
    add_ln111_fu_494_p2 <= std_logic_vector(unsigned(zext_ln73_1_fu_453_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln113_1_fu_518_p2 <= std_logic_vector(unsigned(zext_ln107_fu_456_p1) + unsigned(select_ln108_fu_476_p3));
    add_ln113_2_fu_524_p2 <= std_logic_vector(unsigned(add_ln113_1_fu_518_p2) + unsigned(u_reg_830_pp0_iter17_reg));
    add_ln113_fu_537_p2 <= std_logic_vector(unsigned(select_ln113_fu_529_p3) + unsigned(add_ln113_2_fu_524_p2));
    add_ln117_fu_578_p2 <= std_logic_vector(unsigned(select_ln117_fu_570_p3) + unsigned(trunc_ln116_fu_566_p1));
    add_ln81_fu_334_p2 <= std_logic_vector(signed(grp_fu_317_p2) + signed(m));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1047_assign_proc : process(ap_enable_reg_pp0_iter0, mode_read_read_fu_114_p2, icmp_ln75_fu_305_p2, icmp_ln99_fu_323_p2)
    begin
                ap_condition_1047 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln99_fu_323_p2 = ap_const_lv1_0) and (icmp_ln75_fu_305_p2 = ap_const_lv1_0)) or ((icmp_ln75_fu_305_p2 = ap_const_lv1_0) and (mode_read_read_fu_114_p2 = ap_const_lv1_0))));
    end process;


    ap_condition_1051_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, mode, ap_block_pp0_stage1)
    begin
                ap_condition_1051 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1));
    end process;


    ap_condition_1055_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, mode, ap_block_pp0_stage1)
    begin
                ap_condition_1055 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1));
    end process;


    ap_condition_1059_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, mode, ap_block_pp0_stage0)
    begin
                ap_condition_1059 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_1063_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, mode, ap_block_pp0_stage0)
    begin
                ap_condition_1063 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_792_assign_proc : process(ap_enable_reg_pp0_iter16, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_00001)
    begin
                ap_condition_792 <= ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001));
    end process;


    ap_condition_798_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_00001)
    begin
                ap_condition_798 <= ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln99_reg_671, icmp_ln75_reg_667, mode)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and ((icmp_ln75_reg_667 = ap_const_lv1_1) or ((icmp_ln99_reg_671 = ap_const_lv1_1) and (mode = ap_const_lv1_1))))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter20_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter20, mode, icmp_ln75_reg_667_pp0_iter19_reg, icmp_ln99_reg_671_pp0_iter19_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and ((icmp_ln75_reg_667_pp0_iter19_reg = ap_const_lv1_1) or ((icmp_ln99_reg_671_pp0_iter19_reg = ap_const_lv1_1) and (mode = ap_const_lv1_1))))) then 
            ap_condition_exit_pp0_iter20_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter20_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_loop_exit_ready_pp0_iter13_reg, ap_loop_exit_ready_pp0_iter14_reg, ap_loop_exit_ready_pp0_iter15_reg, ap_loop_exit_ready_pp0_iter16_reg, ap_loop_exit_ready_pp0_iter17_reg, ap_loop_exit_ready_pp0_iter18_reg, ap_loop_exit_ready_pp0_iter19_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter19_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_194_assign_proc : process(ap_predicate_op194_store_state38)
    begin
                ap_enable_operation_194 <= (ap_predicate_op194_store_state38 = ap_const_boolean_1);
    end process;


    ap_enable_operation_203_assign_proc : process(ap_predicate_op203_store_state38)
    begin
                ap_enable_operation_203 <= (ap_predicate_op203_store_state38 = ap_const_boolean_1);
    end process;


    ap_enable_operation_209_assign_proc : process(ap_predicate_op209_store_state39)
    begin
                ap_enable_operation_209 <= (ap_predicate_op209_store_state39 = ap_const_boolean_1);
    end process;


    ap_enable_operation_213_assign_proc : process(ap_predicate_op213_store_state39)
    begin
                ap_enable_operation_213 <= (ap_predicate_op213_store_state39 = ap_const_boolean_1);
    end process;


    ap_enable_operation_218_assign_proc : process(ap_predicate_op218_store_state40)
    begin
                ap_enable_operation_218 <= (ap_predicate_op218_store_state40 = ap_const_boolean_1);
    end process;


    ap_enable_operation_221_assign_proc : process(ap_predicate_op221_store_state41)
    begin
                ap_enable_operation_221 <= (ap_predicate_op221_store_state41 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state38_pp0_iter18_stage1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state38_pp0_iter18_stage1 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state39_pp0_iter19_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19)
    begin
                ap_enable_state39_pp0_iter19_stage0 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state40_pp0_iter19_stage1_assign_proc : process(ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state40_pp0_iter19_stage1 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state41_pp0_iter20_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter20)
    begin
                ap_enable_state41_pp0_iter20_stage0 <= ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to19_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to19 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to20_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to20 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to20 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op112_call_state18_state17_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter7_reg)
    begin
                ap_predicate_op112_call_state18_state17 <= ((icmp_ln75_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (mode = ap_const_lv1_1));
    end process;


    ap_predicate_op194_store_state38_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter18_reg)
    begin
                ap_predicate_op194_store_state38 <= ((icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (mode = ap_const_lv1_0));
    end process;


    ap_predicate_op203_store_state38_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter18_reg)
    begin
                ap_predicate_op203_store_state38 <= ((icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (mode = ap_const_lv1_1));
    end process;


    ap_predicate_op209_store_state39_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter18_reg)
    begin
                ap_predicate_op209_store_state39 <= ((icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (mode = ap_const_lv1_0));
    end process;


    ap_predicate_op213_store_state39_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter18_reg)
    begin
                ap_predicate_op213_store_state39 <= ((icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (mode = ap_const_lv1_1));
    end process;


    ap_predicate_op218_store_state40_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter19_reg)
    begin
                ap_predicate_op218_store_state40 <= ((icmp_ln75_reg_667_pp0_iter19_reg = ap_const_lv1_0) and (mode = ap_const_lv1_1));
    end process;


    ap_predicate_op221_store_state41_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter19_reg)
    begin
                ap_predicate_op221_store_state41 <= ((icmp_ln75_reg_667_pp0_iter19_reg = ap_const_lv1_0) and (mode = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_110, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_n_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n_1 <= n_fu_110;
        end if; 
    end process;

    bitcast_ln94_fu_584_p1 <= grp_fu_279_p2;
    bitcast_ln95_fu_597_p1 <= add1_reg_852;
    bitcast_ln97_fu_601_p1 <= sub_reg_857;
    bitcast_ln98_fu_605_p1 <= sub1_reg_862;
    gm_im_tab_address0 <= zext_ln81_fu_339_p1(10 - 1 downto 0);

    gm_im_tab_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            gm_im_tab_ce0 <= ap_const_logic_1;
        else 
            gm_im_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gm_re_tab_address0 <= zext_ln81_fu_339_p1(10 - 1 downto 0);

    gm_re_tab_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            gm_re_tab_ce0 <= ap_const_logic_1;
        else 
            gm_re_tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_complex_mul_fu_271_ap_start <= grp_complex_mul_fu_271_ap_start_reg;
    grp_complex_mul_fu_271_x_im <= in_buf_q0;
    grp_complex_mul_fu_271_x_re <= in_buf_q1;

    grp_fu_279_opcode_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter16_reg, ap_condition_792, ap_condition_798)
    begin
        if (((icmp_ln75_reg_667_pp0_iter16_reg = ap_const_lv1_0) and (mode = ap_const_lv1_1))) then
            if ((ap_const_boolean_1 = ap_condition_798)) then 
                grp_fu_279_opcode <= ap_const_lv2_1;
            elsif ((ap_const_boolean_1 = ap_condition_792)) then 
                grp_fu_279_opcode <= ap_const_lv2_0;
            else 
                grp_fu_279_opcode <= "XX";
            end if;
        else 
            grp_fu_279_opcode <= "XX";
        end if; 
    end process;


    grp_fu_279_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, x_re_fu_442_p1, x_re_reg_837, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_279_p0 <= x_re_reg_837;
        elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_279_p0 <= x_re_fu_442_p1;
        else 
            grp_fu_279_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_283_opcode_assign_proc : process(mode, icmp_ln75_reg_667_pp0_iter16_reg, ap_condition_792, ap_condition_798)
    begin
        if (((icmp_ln75_reg_667_pp0_iter16_reg = ap_const_lv1_0) and (mode = ap_const_lv1_1))) then
            if ((ap_const_boolean_1 = ap_condition_798)) then 
                grp_fu_283_opcode <= ap_const_lv2_1;
            elsif ((ap_const_boolean_1 = ap_condition_792)) then 
                grp_fu_283_opcode <= ap_const_lv2_0;
            else 
                grp_fu_283_opcode <= "XX";
            end if;
        else 
            grp_fu_283_opcode <= "XX";
        end if; 
    end process;


    grp_fu_283_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, x_im_fu_446_p1, x_im_reg_842, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_283_p0 <= x_im_reg_842;
        elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_283_p0 <= x_im_fu_446_p1;
        else 
            grp_fu_283_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_317_p1 <= t(10 downto 1);
    grp_fu_616_p0 <= grp_fu_616_p00(16 - 1 downto 0);
    grp_fu_616_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_369_p4),30));
    grp_fu_616_p1 <= grp_fu_616_p10(14 - 1 downto 0);
    grp_fu_616_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gm_reg_716),30));
    grp_fu_623_p0 <= grp_fu_616_p2(16 - 1 downto 0);
    grp_fu_623_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_629_p0 <= grp_fu_629_p00(16 - 1 downto 0);
    grp_fu_629_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln105_reg_767),30));
    grp_fu_629_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_629_p2 <= grp_fu_629_p20(30 - 1 downto 0);
    grp_fu_629_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_757_pp0_iter12_reg),31));
    icmp_ln75_fu_305_p2 <= "1" when (ap_sig_allocacmp_n_1 = ap_const_lv10_200) else "0";
    icmp_ln99_fu_323_p2 <= "1" when (ap_sig_allocacmp_n_1 = ap_const_lv10_FF) else "0";

    in_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage1, mode, icmp_ln75_reg_667_pp0_iter7_reg, zext_ln104_fu_349_p1, zext_ln90_fu_361_p1, zext_ln102_fu_411_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            in_buf_address0 <= zext_ln102_fu_411_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_buf_address0 <= zext_ln90_fu_361_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_buf_address0 <= zext_ln104_fu_349_p1(10 - 1 downto 0);
        else 
            in_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage1, zext_ln104_fu_349_p1, zext_ln88_fu_420_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            in_buf_address1 <= zext_ln88_fu_420_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_buf_address1 <= zext_ln104_fu_349_p1(10 - 1 downto 0);
        else 
            in_buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage1, mode, ap_block_pp0_stage0_11001, icmp_ln75_reg_667_pp0_iter7_reg, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            in_buf_ce0 <= ap_const_logic_1;
        else 
            in_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            in_buf_ce1 <= ap_const_logic_1;
        else 
            in_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mode_read_read_fu_114_p2 <= mode;
    n_2_fu_311_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_1) + unsigned(ap_const_lv10_1));
    select_ln108_fu_476_p3 <= 
        ap_const_lv16_3001 when (tmp_fu_468_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln113_fu_529_p3 <= 
        ap_const_lv16_CFFF when (tmp_1_fu_510_p3(0) = '1') else 
        ap_const_lv16_9FFE;
    select_ln117_fu_570_p3 <= 
        ap_const_lv16_3001 when (tmp_2_fu_558_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln111_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln111_fu_494_p2),18));

        sext_ln74_1_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_3_fu_484_p2),18));

        sext_ln74_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_1_fu_459_p2),16));

    shl_ln1_fu_589_p3 <= (add_ln117_reg_847 & ap_const_lv48_0);
    shl_ln_fu_543_p3 <= (add_ln113_fu_537_p2 & ap_const_lv48_0);
    stage0_addr_gep_fu_236_p3 <= zext_ln102_reg_788_pp0_iter17_reg(10 - 1 downto 0);

    stage0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage1, zext_ln104_reg_721_pp0_iter19_reg, zext_ln90_reg_737_pp0_iter19_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            stage0_address0 <= zext_ln90_reg_737_pp0_iter19_reg(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            stage0_address0 <= zext_ln104_reg_721_pp0_iter19_reg(10 - 1 downto 0);
        else 
            stage0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    stage0_address1_assign_proc : process(icmp_ln75_reg_667_pp0_iter18_reg, zext_ln104_reg_721_pp0_iter18_reg, zext_ln102_reg_788_pp0_iter17_reg, zext_ln88_reg_799_pp0_iter18_reg, stage0_addr_gep_fu_236_p3, ap_condition_1051, ap_condition_1055, ap_condition_1059, ap_condition_1063)
    begin
        if ((icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1063)) then 
                stage0_address1 <= zext_ln88_reg_799_pp0_iter18_reg(10 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1059)) then 
                stage0_address1 <= zext_ln104_reg_721_pp0_iter18_reg(10 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1055)) then 
                stage0_address1 <= stage0_addr_gep_fu_236_p3;
            elsif ((ap_const_boolean_1 = ap_condition_1051)) then 
                stage0_address1 <= zext_ln102_reg_788_pp0_iter17_reg(10 - 1 downto 0);
            else 
                stage0_address1 <= "XXXXXXXXXX";
            end if;
        else 
            stage0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    stage0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            stage0_ce0 <= ap_const_logic_1;
        else 
            stage0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1, mode, ap_block_pp0_stage0_11001, icmp_ln75_reg_667_pp0_iter18_reg, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            stage0_ce1 <= ap_const_logic_1;
        else 
            stage0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, bitcast_ln97_fu_601_p1, bitcast_ln98_fu_605_p1)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            stage0_d0 <= bitcast_ln98_fu_605_p1;
        elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            stage0_d0 <= bitcast_ln97_fu_601_p1;
        else 
            stage0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage0_d1_assign_proc : process(icmp_ln75_reg_667_pp0_iter18_reg, shl_ln_fu_543_p3, bitcast_ln94_fu_584_p1, shl_ln1_fu_589_p3, bitcast_ln95_fu_597_p1, ap_condition_1051, ap_condition_1055, ap_condition_1059, ap_condition_1063)
    begin
        if ((icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1063)) then 
                stage0_d1 <= bitcast_ln95_fu_597_p1;
            elsif ((ap_const_boolean_1 = ap_condition_1059)) then 
                stage0_d1 <= shl_ln1_fu_589_p3;
            elsif ((ap_const_boolean_1 = ap_condition_1055)) then 
                stage0_d1 <= bitcast_ln94_fu_584_p1;
            elsif ((ap_const_boolean_1 = ap_condition_1051)) then 
                stage0_d1 <= shl_ln_fu_543_p3;
            else 
                stage0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            stage0_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_CS_fsm_pp0_stage1, mode, ap_block_pp0_stage0_11001, icmp_ln75_reg_667_pp0_iter19_reg, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            stage0_we0 <= ap_const_lv8_FF;
        else 
            stage0_we0 <= ap_const_lv8_0;
        end if; 
    end process;


    stage0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1, mode, ap_block_pp0_stage0_11001, icmp_ln75_reg_667_pp0_iter18_reg, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            stage0_we1 <= ap_const_lv8_FF;
        elsif ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln75_reg_667_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            stage0_we1 <= ap_const_lv8_C0;
        else 
            stage0_we1 <= ap_const_lv8_0;
        end if; 
    end process;

    tmp1_1_fu_504_p2 <= std_logic_vector(signed(sext_ln111_fu_500_p1) + signed(sext_ln74_1_fu_490_p1));
    tmp1_2_fu_552_p2 <= std_logic_vector(unsigned(zext_ln73_fu_450_p1) - unsigned(sext_ln74_1_fu_490_p1));
    tmp2_1_fu_459_p2 <= std_logic_vector(unsigned(trunc_ln3_reg_782_pp0_iter17_reg) + unsigned(ap_const_lv15_4FFF));
    tmp2_3_fu_484_p2 <= std_logic_vector(unsigned(select_ln108_fu_476_p3) + unsigned(sext_ln74_fu_464_p1));
    tmp_1_fu_510_p3 <= tmp1_1_fu_504_p2(17 downto 17);
    tmp_2_fu_558_p3 <= tmp1_2_fu_552_p2(17 downto 17);
    tmp_fu_468_p3 <= tmp2_1_fu_459_p2(14 downto 14);
    trunc_ln116_fu_566_p1 <= tmp1_2_fu_552_p2(16 - 1 downto 0);
    trunc_ln1_fu_369_p4 <= in_buf_q0(63 downto 48);
    x_im_fu_446_p1 <= in_buf_load_1_reg_815;
    x_re_fu_442_p1 <= in_buf_load_reg_809;
    xor_ln88_fu_415_p2 <= (i_reg_700_pp0_iter15_reg xor ap_const_lv10_200);
    xor_ln90_fu_355_p2 <= (ap_const_lv10_200 xor add_ln104_fu_345_p2);
    zext_ln102_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_700_pp0_iter15_reg),64));
    zext_ln104_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln104_fu_345_p2),64));
    zext_ln107_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_782_pp0_iter17_reg),16));
    zext_ln73_1_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_830_pp0_iter17_reg),17));
    zext_ln73_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_830_pp0_iter17_reg),18));
    zext_ln81_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_reg_680),64));
    zext_ln88_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln88_fu_415_p2),64));
    zext_ln90_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln90_fu_355_p2),64));
end behav;
