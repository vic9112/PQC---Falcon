-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_top_Pipeline_MUL_RE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf1_ce0 : OUT STD_LOGIC;
    buf1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    buf1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf1_ce1 : OUT STD_LOGIC;
    buf1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    buf2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf2_ce0 : OUT STD_LOGIC;
    buf2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    buf2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf2_ce1 : OUT STD_LOGIC;
    buf2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tmp_ce0 : OUT STD_LOGIC;
    tmp_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_d_add_fu_324_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_d_add_fu_324_p_din2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_d_add_fu_324_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_d_add_fu_324_p_ce : OUT STD_LOGIC;
    grp_d_mul_fu_329_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_d_mul_fu_329_p_din2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_d_mul_fu_329_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_d_mul_fu_329_p_ce : OUT STD_LOGIC;
    grp_d_mul_fu_334_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_d_mul_fu_334_p_din2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_d_mul_fu_334_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_d_mul_fu_334_p_ce : OUT STD_LOGIC );
end;


architecture behav of top_top_Pipeline_MUL_RE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln67_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln67_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_246_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal buf1_load_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf2_load_reg_276 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf1_load_1_reg_281 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf2_load_1_reg_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln69_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln69_1_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln69_2_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln69_3_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_311 : STD_LOGIC_VECTOR (63 downto 0);
    signal converter_reg_316 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln321_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_mul_fu_116_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call9 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call9 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call9 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call9 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call9 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call9 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call9 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call9 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call9 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp46 : BOOLEAN;
    signal grp_d_mul_fu_122_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call19 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call19 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call19 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call19 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call19 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call19 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call19 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call19 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call19 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call19 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call19 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call19 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp49 : BOOLEAN;
    signal grp_d_add_fu_128_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call25 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call25 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call25 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call25 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call25 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call25 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call25 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call25 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call25 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call25 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call25 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call25 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call25 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp63 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln69_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_50 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_fu_148_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln69_fu_160_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln_fu_164_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_s_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_216_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_d_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component top_d_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    k_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln67_fu_142_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_50 <= add_ln67_fu_148_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_50 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                converter_reg_316 <= grp_d_mul_fu_334_p_dout0;
                tmp_4_reg_311 <= grp_d_mul_fu_329_p_dout0;
                tmp_9_reg_326 <= grp_d_add_fu_324_p_dout0;
                    zext_ln67_reg_246_pp0_iter10_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter9_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter11_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter10_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter2_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter1_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter3_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter2_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter4_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter3_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter5_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter4_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter6_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter5_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter7_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter6_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter8_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter7_reg(9 downto 0);
                    zext_ln67_reg_246_pp0_iter9_reg(9 downto 0) <= zext_ln67_reg_246_pp0_iter8_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln67_reg_246_pp0_iter1_reg(9 downto 0) <= zext_ln67_reg_246(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                buf1_load_1_reg_281 <= buf1_q0;
                buf1_load_reg_271 <= buf1_q1;
                buf2_load_1_reg_286 <= buf2_q0;
                buf2_load_reg_276 <= buf2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_142_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln67_reg_246(9 downto 0) <= zext_ln67_fu_154_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln67_reg_246(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_246_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln67_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_1) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln67_fu_142_p2)
    begin
        if (((icmp_ln67_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_50, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_k_1 <= k_fu_50;
        end if; 
    end process;

    bitcast_ln321_fu_226_p1 <= p_Result_s_fu_216_p4;
    bitcast_ln69_1_fu_187_p1 <= buf2_load_reg_276;
    bitcast_ln69_2_fu_191_p1 <= buf1_load_1_reg_281;
    bitcast_ln69_3_fu_195_p1 <= buf2_load_1_reg_286;
    bitcast_ln69_fu_183_p1 <= buf1_load_reg_271;
    buf1_address0 <= zext_ln69_fu_172_p1(10 - 1 downto 0);
    buf1_address1 <= zext_ln67_fu_154_p1(10 - 1 downto 0);

    buf1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf1_ce0 <= ap_const_logic_1;
        else 
            buf1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf1_ce1 <= ap_const_logic_1;
        else 
            buf1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf2_address0 <= zext_ln69_fu_172_p1(10 - 1 downto 0);
    buf2_address1 <= zext_ln67_fu_154_p1(10 - 1 downto 0);

    buf2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf2_ce0 <= ap_const_logic_1;
        else 
            buf2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf2_ce1 <= ap_const_logic_1;
        else 
            buf2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_d_add_fu_128_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp63)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp63) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_add_fu_128_ap_ce <= ap_const_logic_1;
        else 
            grp_d_add_fu_128_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_d_add_fu_324_p_ce <= grp_d_add_fu_128_ap_ce;
    grp_d_add_fu_324_p_din1 <= tmp_4_reg_311;
    grp_d_add_fu_324_p_din2 <= bitcast_ln321_fu_226_p1;

    grp_d_mul_fu_116_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp46)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp46) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_mul_fu_116_ap_ce <= ap_const_logic_1;
        else 
            grp_d_mul_fu_116_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_d_mul_fu_122_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp49)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp49) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_mul_fu_122_ap_ce <= ap_const_logic_1;
        else 
            grp_d_mul_fu_122_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_d_mul_fu_329_p_ce <= grp_d_mul_fu_116_ap_ce;
    grp_d_mul_fu_329_p_din1 <= bitcast_ln69_fu_183_p1;
    grp_d_mul_fu_329_p_din2 <= bitcast_ln69_1_fu_187_p1;
    grp_d_mul_fu_334_p_ce <= grp_d_mul_fu_122_ap_ce;
    grp_d_mul_fu_334_p_din1 <= bitcast_ln69_2_fu_191_p1;
    grp_d_mul_fu_334_p_din2 <= bitcast_ln69_3_fu_195_p1;
    icmp_ln67_fu_142_p2 <= "1" when (ap_sig_allocacmp_k_1 = ap_const_lv10_200) else "0";
    p_Repl2_s_fu_210_p2 <= (tmp_5_fu_202_p3 xor ap_const_lv1_1);
    
    p_Result_s_fu_216_p4_proc : process(tmp_8_fu_199_p1, p_Repl2_s_fu_210_p2)
    begin
        p_Result_s_fu_216_p4 <= tmp_8_fu_199_p1;
        p_Result_s_fu_216_p4(63) <= p_Repl2_s_fu_210_p2(0);
    end process;

    tmp_5_fu_202_p3 <= tmp_8_fu_199_p1(63 downto 63);
    tmp_8_fu_199_p1 <= converter_reg_316;
    tmp_address0 <= zext_ln67_reg_246_pp0_iter11_reg(10 - 1 downto 0);

    tmp_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_d0 <= tmp_9_reg_326;

    tmp_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            tmp_we0 <= ap_const_lv8_FF;
        else 
            tmp_we0 <= ap_const_lv8_0;
        end if; 
    end process;

    trunc_ln69_fu_160_p1 <= ap_sig_allocacmp_k_1(9 - 1 downto 0);
    zext_ln67_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_1),64));
    zext_ln69_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln_fu_164_p3),64));
    zext_ln_fu_164_p3 <= (ap_const_lv1_1 & trunc_ln69_fu_160_p1);
end behav;
