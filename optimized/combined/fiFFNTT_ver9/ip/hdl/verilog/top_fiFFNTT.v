// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_fiFFNTT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf1_address0,
        buf1_ce0,
        buf1_we0,
        buf1_d0,
        buf1_q0,
        buf1_address1,
        buf1_ce1,
        buf1_we1,
        buf1_d1,
        buf1_q1,
        mode,
        inverse
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] buf1_address0;
output   buf1_ce0;
output  [7:0] buf1_we0;
output  [63:0] buf1_d0;
input  [63:0] buf1_q0;
output  [9:0] buf1_address1;
output   buf1_ce1;
output  [7:0] buf1_we1;
output  [63:0] buf1_d1;
input  [63:0] buf1_q1;
input   mode;
input   inverse;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_stages_fu_32_ap_start;
wire    grp_stages_fu_32_ap_done;
wire    grp_stages_fu_32_ap_idle;
wire    grp_stages_fu_32_ap_ready;
wire   [9:0] grp_stages_fu_32_buf1_address0;
wire    grp_stages_fu_32_buf1_ce0;
wire   [7:0] grp_stages_fu_32_buf1_we0;
wire   [63:0] grp_stages_fu_32_buf1_d0;
wire   [9:0] grp_stages_fu_32_buf1_address1;
wire    grp_stages_fu_32_buf1_ce1;
wire   [7:0] grp_stages_fu_32_buf1_we1;
wire   [63:0] grp_stages_fu_32_buf1_d1;
reg    grp_stages_fu_32_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_stages_fu_32_ap_start_reg = 1'b0;
end

top_stages grp_stages_fu_32(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_stages_fu_32_ap_start),
    .ap_done(grp_stages_fu_32_ap_done),
    .ap_idle(grp_stages_fu_32_ap_idle),
    .ap_ready(grp_stages_fu_32_ap_ready),
    .buf1_address0(grp_stages_fu_32_buf1_address0),
    .buf1_ce0(grp_stages_fu_32_buf1_ce0),
    .buf1_we0(grp_stages_fu_32_buf1_we0),
    .buf1_d0(grp_stages_fu_32_buf1_d0),
    .buf1_q0(buf1_q0),
    .buf1_address1(grp_stages_fu_32_buf1_address1),
    .buf1_ce1(grp_stages_fu_32_buf1_ce1),
    .buf1_we1(grp_stages_fu_32_buf1_we1),
    .buf1_d1(grp_stages_fu_32_buf1_d1),
    .buf1_q1(buf1_q1),
    .mode(mode),
    .inverse(inverse)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_stages_fu_32_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_stages_fu_32_ap_start_reg <= 1'b1;
        end else if ((grp_stages_fu_32_ap_ready == 1'b1)) begin
            grp_stages_fu_32_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_stages_fu_32_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_stages_fu_32_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_stages_fu_32_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_stages_fu_32_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign buf1_address0 = grp_stages_fu_32_buf1_address0;

assign buf1_address1 = grp_stages_fu_32_buf1_address1;

assign buf1_ce0 = grp_stages_fu_32_buf1_ce0;

assign buf1_ce1 = grp_stages_fu_32_buf1_ce1;

assign buf1_d0 = grp_stages_fu_32_buf1_d0;

assign buf1_d1 = grp_stages_fu_32_buf1_d1;

assign buf1_we0 = grp_stages_fu_32_buf1_we0;

assign buf1_we1 = grp_stages_fu_32_buf1_we1;

assign grp_stages_fu_32_ap_start = grp_stages_fu_32_ap_start_reg;

endmodule //top_fiFFNTT
