-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_top_Pipeline_COMPLEX_MUL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf1_ce0 : OUT STD_LOGIC;
    buf1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    buf1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf1_ce1 : OUT STD_LOGIC;
    buf1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    buf2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf2_ce0 : OUT STD_LOGIC;
    buf2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    buf2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf2_ce1 : OUT STD_LOGIC;
    buf2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tmp_ce0 : OUT STD_LOGIC;
    tmp_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    tmp_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tmp_ce1 : OUT STD_LOGIC;
    tmp_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    tmp_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of top_top_Pipeline_COMPLEX_MUL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln67_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln67_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln67_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_352 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_352_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_352_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_352_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_352_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_352_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_reg_352_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_reg_362_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_reg_362_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_reg_362_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_reg_362_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_reg_362_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_reg_362_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal buf1_load_reg_382 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_12_reg_387 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_387_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_387_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal b_re_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_im_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_im_reg_399 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_im_reg_399_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal b_im_reg_399_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_re_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_re_reg_415 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal a_re_reg_415_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_1_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_add_fu_139_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_b_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_add_fu_140_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal add_b_reg_431 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_a_reg_436 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_im_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_mul_fu_186_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_446 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_451 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_3_reg_456 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal grp_d_add_fu_139_a : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_add_fu_139_b : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_add_fu_139_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call24 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2_ignore_call24 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3_ignore_call24 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4_ignore_call24 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5_ignore_call24 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp68 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call24 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2_ignore_call24 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3_ignore_call24 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4_ignore_call24 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5_ignore_call24 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp58 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0_ignore_call24 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1_ignore_call24 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2_ignore_call24 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3_ignore_call24 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4_ignore_call24 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5_ignore_call24 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6_ignore_call24 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp62 : BOOLEAN;
    signal grp_d_add_fu_140_a : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_add_fu_140_b : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_add_fu_140_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call25 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call25 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2_ignore_call25 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3_ignore_call25 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4_ignore_call25 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5_ignore_call25 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6_ignore_call25 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp69 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call25 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call25 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2_ignore_call25 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3_ignore_call25 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4_ignore_call25 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5_ignore_call25 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6_ignore_call25 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp59 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0_ignore_call25 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1_ignore_call25 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2_ignore_call25 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3_ignore_call25 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4_ignore_call25 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5_ignore_call25 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6_ignore_call25 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp63 : BOOLEAN;
    signal grp_d_mul_fu_186_a : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_mul_fu_186_b : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_d_mul_fu_186_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call31 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call31 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2_ignore_call31 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3_ignore_call31 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4_ignore_call31 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5_ignore_call31 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6_ignore_call31 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp81 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0_ignore_call31 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1_ignore_call31 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2_ignore_call31 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3_ignore_call31 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4_ignore_call31 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5_ignore_call31 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6_ignore_call31 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp83 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call31 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call31 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2_ignore_call31 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3_ignore_call31 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4_ignore_call31 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5_ignore_call31 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6_ignore_call31 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp85 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_fu_62 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_fu_221_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_r_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln73_fu_233_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln_fu_237_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_s_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_281_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Repl2_1_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_313_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_d_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component top_d_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_d_add_fu_139 : component top_d_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a => grp_d_add_fu_139_a,
        b => grp_d_add_fu_139_b,
        ap_return => grp_d_add_fu_139_ap_return,
        ap_ce => grp_d_add_fu_139_ap_ce);

    grp_d_add_fu_140 : component top_d_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a => grp_d_add_fu_140_a,
        b => grp_d_add_fu_140_b,
        ap_return => grp_d_add_fu_140_ap_return,
        ap_ce => grp_d_add_fu_140_ap_ce);

    grp_d_mul_fu_186 : component top_d_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a => grp_d_mul_fu_186_a,
        b => grp_d_mul_fu_186_b,
        ap_return => grp_d_mul_fu_186_ap_return,
        ap_ce => grp_d_mul_fu_186_ap_ce);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    r_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln67_fu_215_p2 = ap_const_lv1_0))) then 
                    r_fu_62 <= add_ln67_fu_221_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_62 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                a_re_reg_415 <= a_re_fu_304_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                a_re_reg_415_pp0_iter1_reg <= a_re_reg_415;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_b_reg_431 <= grp_d_add_fu_140_ap_return;
                sub_b_reg_426 <= grp_d_add_fu_139_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                b_im_reg_399 <= b_im_fu_262_p1;
                tmp_8_reg_410 <= buf1_q0(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                b_im_reg_399_pp0_iter1_reg <= b_im_reg_399;
                b_im_reg_399_pp0_iter2_reg <= b_im_reg_399_pp0_iter1_reg;
                tmp_12_reg_387_pp0_iter1_reg <= tmp_12_reg_387;
                tmp_12_reg_387_pp0_iter2_reg <= tmp_12_reg_387_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                buf1_load_reg_382 <= buf1_q1;
                tmp_12_reg_387 <= buf1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln67_reg_348 <= icmp_ln67_fu_215_p2;
                    zext_ln67_reg_352_pp0_iter1_reg(9 downto 0) <= zext_ln67_reg_352(9 downto 0);
                    zext_ln67_reg_352_pp0_iter2_reg(9 downto 0) <= zext_ln67_reg_352_pp0_iter1_reg(9 downto 0);
                    zext_ln67_reg_352_pp0_iter3_reg(9 downto 0) <= zext_ln67_reg_352_pp0_iter2_reg(9 downto 0);
                    zext_ln67_reg_352_pp0_iter4_reg(9 downto 0) <= zext_ln67_reg_352_pp0_iter3_reg(9 downto 0);
                    zext_ln67_reg_352_pp0_iter5_reg(9 downto 0) <= zext_ln67_reg_352_pp0_iter4_reg(9 downto 0);
                    zext_ln67_reg_352_pp0_iter6_reg(9 downto 0) <= zext_ln67_reg_352_pp0_iter5_reg(9 downto 0);
                    zext_ln73_reg_362_pp0_iter1_reg(8 downto 0) <= zext_ln73_reg_362(8 downto 0);
                    zext_ln73_reg_362_pp0_iter2_reg(8 downto 0) <= zext_ln73_reg_362_pp0_iter1_reg(8 downto 0);
                    zext_ln73_reg_362_pp0_iter3_reg(8 downto 0) <= zext_ln73_reg_362_pp0_iter2_reg(8 downto 0);
                    zext_ln73_reg_362_pp0_iter4_reg(8 downto 0) <= zext_ln73_reg_362_pp0_iter3_reg(8 downto 0);
                    zext_ln73_reg_362_pp0_iter5_reg(8 downto 0) <= zext_ln73_reg_362_pp0_iter4_reg(8 downto 0);
                    zext_ln73_reg_362_pp0_iter6_reg(8 downto 0) <= zext_ln73_reg_362_pp0_iter5_reg(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_1_reg_446 <= grp_d_mul_fu_186_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_2_reg_451 <= grp_d_mul_fu_186_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_3_reg_456 <= grp_d_mul_fu_186_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sub_a_reg_436 <= grp_d_add_fu_139_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_fu_215_p2 = ap_const_lv1_0))) then
                    zext_ln67_reg_352(9 downto 0) <= zext_ln67_fu_227_p1(9 downto 0);
                    zext_ln73_reg_362(8 downto 0) <= zext_ln73_fu_245_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln67_reg_352(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_352_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_352_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_352_pp0_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_352_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_352_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln67_reg_352_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln73_reg_362(63 downto 9) <= "0000000000000000000000000000000000000000000000000000001";
    zext_ln73_reg_362_pp0_iter1_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000001";
    zext_ln73_reg_362_pp0_iter2_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000001";
    zext_ln73_reg_362_pp0_iter3_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000001";
    zext_ln73_reg_362_pp0_iter4_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000001";
    zext_ln73_reg_362_pp0_iter5_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000001";
    zext_ln73_reg_362_pp0_iter6_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000001";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to6, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_im_fu_327_p1 <= tmp_12_reg_387_pp0_iter2_reg;
    a_re_fu_304_p1 <= buf1_load_reg_382;
    add_ln67_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp68 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp85 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp81 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp83 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2_ignore_call24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2_ignore_call25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2_ignore_call31 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln67_reg_348)
    begin
        if (((icmp_ln67_reg_348 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_r_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, r_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_r_1 <= r_fu_62;
        end if; 
    end process;

    b_im_fu_262_p1 <= buf2_q0;
    b_re_fu_256_p1 <= buf2_q1;
    bitcast_ln325_1_fu_322_p1 <= p_Result_1_fu_313_p4;
    bitcast_ln325_fu_291_p1 <= p_Result_s_fu_281_p4;
    buf1_address0 <= zext_ln73_fu_245_p1(10 - 1 downto 0);
    buf1_address1 <= zext_ln67_fu_227_p1(10 - 1 downto 0);

    buf1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf1_ce0 <= ap_const_logic_1;
        else 
            buf1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf1_ce1 <= ap_const_logic_1;
        else 
            buf1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf2_address0 <= zext_ln73_fu_245_p1(10 - 1 downto 0);
    buf2_address1 <= zext_ln67_fu_227_p1(10 - 1 downto 0);

    buf2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf2_ce0 <= ap_const_logic_1;
        else 
            buf2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf2_ce1 <= ap_const_logic_1;
        else 
            buf2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_d_add_fu_139_a_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage2, icmp_ln67_reg_348, ap_CS_fsm_pp0_stage1, b_re_fu_256_p1, a_re_fu_304_p1, mul_1_reg_446, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_add_fu_139_a <= mul_1_reg_446;
        elsif (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_d_add_fu_139_a <= a_re_fu_304_p1;
        elsif (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_d_add_fu_139_a <= b_re_fu_256_p1;
        else 
            grp_d_add_fu_139_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_d_add_fu_139_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001_ignoreCallOp68, ap_block_pp0_stage1_11001_ignoreCallOp58, ap_block_pp0_stage2_11001_ignoreCallOp62)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp68) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp62) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp58) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_d_add_fu_139_ap_ce <= ap_const_logic_1;
        else 
            grp_d_add_fu_139_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_d_add_fu_139_b_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage2, icmp_ln67_reg_348, ap_CS_fsm_pp0_stage1, bitcast_ln325_fu_291_p1, bitcast_ln325_1_fu_322_p1, mul_3_reg_456, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_add_fu_139_b <= mul_3_reg_456;
        elsif (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_d_add_fu_139_b <= bitcast_ln325_1_fu_322_p1;
        elsif (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_d_add_fu_139_b <= bitcast_ln325_fu_291_p1;
        else 
            grp_d_add_fu_139_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_d_add_fu_140_a_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, icmp_ln67_reg_348, ap_CS_fsm_pp0_stage1, b_re_fu_256_p1, mul_2_reg_451, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_add_fu_140_a <= mul_2_reg_451;
        elsif (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_d_add_fu_140_a <= b_re_fu_256_p1;
        else 
            grp_d_add_fu_140_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_d_add_fu_140_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001_ignoreCallOp69, ap_block_pp0_stage1_11001_ignoreCallOp59, ap_block_pp0_stage2_11001_ignoreCallOp63)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp69) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp63) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp59) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_d_add_fu_140_ap_ce <= ap_const_logic_1;
        else 
            grp_d_add_fu_140_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_d_add_fu_140_b_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter5, icmp_ln67_reg_348, ap_CS_fsm_pp0_stage1, b_im_fu_262_p1, mul_3_reg_456, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_add_fu_140_b <= mul_3_reg_456;
        elsif (((icmp_ln67_reg_348 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_d_add_fu_140_b <= b_im_fu_262_p1;
        else 
            grp_d_add_fu_140_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_d_mul_fu_186_a_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, b_im_reg_399_pp0_iter2_reg, a_re_reg_415_pp0_iter1_reg, a_im_fu_327_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_mul_fu_186_a <= b_im_reg_399_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_d_mul_fu_186_a <= a_im_fu_327_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_d_mul_fu_186_a <= a_re_reg_415_pp0_iter1_reg;
        else 
            grp_d_mul_fu_186_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_d_mul_fu_186_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp81, ap_block_pp0_stage2_11001_ignoreCallOp83, ap_block_pp0_stage0_11001_ignoreCallOp85)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp85) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp83) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp81) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_d_mul_fu_186_ap_ce <= ap_const_logic_1;
        else 
            grp_d_mul_fu_186_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_d_mul_fu_186_b_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, sub_b_reg_426, add_b_reg_431, sub_a_reg_436, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_d_mul_fu_186_b <= sub_a_reg_436;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_d_mul_fu_186_b <= add_b_reg_431;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_d_mul_fu_186_b <= sub_b_reg_426;
        else 
            grp_d_mul_fu_186_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln67_fu_215_p2 <= "1" when (ap_sig_allocacmp_r_1 = ap_const_lv10_200) else "0";
    p_Repl2_1_fu_308_p2 <= (tmp_8_reg_410 xor ap_const_lv1_1);
    p_Repl2_s_fu_275_p2 <= (tmp_4_fu_267_p3 xor ap_const_lv1_1);
    
    p_Result_1_fu_313_p4_proc : process(tmp_12_reg_387, p_Repl2_1_fu_308_p2)
    begin
        p_Result_1_fu_313_p4 <= tmp_12_reg_387;
        p_Result_1_fu_313_p4(63) <= p_Repl2_1_fu_308_p2(0);
    end process;

    
    p_Result_s_fu_281_p4_proc : process(buf2_q0, p_Repl2_s_fu_275_p2)
    begin
        p_Result_s_fu_281_p4 <= buf2_q0;
        p_Result_s_fu_281_p4(63) <= p_Repl2_s_fu_275_p2(0);
    end process;

    tmp_4_fu_267_p3 <= buf2_q0(63 downto 63);
    tmp_address0 <= zext_ln73_reg_362_pp0_iter6_reg(10 - 1 downto 0);
    tmp_address1 <= zext_ln67_reg_352_pp0_iter6_reg(10 - 1 downto 0);

    tmp_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_ce1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            tmp_ce1 <= ap_const_logic_1;
        else 
            tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_d0 <= grp_d_add_fu_140_ap_return;
    tmp_d1 <= grp_d_add_fu_139_ap_return;

    tmp_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            tmp_we0 <= ap_const_lv8_FF;
        else 
            tmp_we0 <= ap_const_lv8_0;
        end if; 
    end process;


    tmp_we1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            tmp_we1 <= ap_const_lv8_FF;
        else 
            tmp_we1 <= ap_const_lv8_0;
        end if; 
    end process;

    trunc_ln73_fu_233_p1 <= ap_sig_allocacmp_r_1(9 - 1 downto 0);
    zext_ln67_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_r_1),64));
    zext_ln73_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln_fu_237_p3),64));
    zext_ln_fu_237_p3 <= (ap_const_lv1_1 & trunc_ln73_fu_233_p1);
end behav;
