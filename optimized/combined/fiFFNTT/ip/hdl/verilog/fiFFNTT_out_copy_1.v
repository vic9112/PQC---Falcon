// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fiFFNTT_out_copy_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        out_buf_address0,
        out_buf_ce0,
        out_buf_q0,
        out_buf1,
        mode,
        inverse
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [63:0] m_axi_gmem0_WDATA;
output  [7:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [63:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
output  [9:0] out_buf_address0;
output   out_buf_ce0;
input  [63:0] out_buf_q0;
input  [63:0] out_buf1;
input  [0:0] mode;
input  [0:0] inverse;

reg ap_idle;
reg m_axi_gmem0_AWVALID;
reg[63:0] m_axi_gmem0_AWADDR;
reg m_axi_gmem0_WVALID;
reg[63:0] m_axi_gmem0_WDATA;
reg[7:0] m_axi_gmem0_WSTRB;
reg m_axi_gmem0_BREADY;
reg out_buf_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [0:0] icmp_ln45_reg_333;
reg    ap_predicate_op57_write_state3;
reg    ap_block_state3_io;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_state9_pp0_stage2_iter2;
reg    ap_block_state9_io;
wire    ap_block_state12_pp0_stage2_iter3;
reg    ap_block_state15_pp0_stage2_iter4;
wire    ap_block_state18_pp0_stage2_iter5;
reg    ap_block_pp0_stage2_subdone;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_AW;
wire    ap_block_pp0_stage2;
reg    gmem0_blk_n_W;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_B;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [60:0] reg_196;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
reg    ap_block_state10_io;
wire    ap_block_state13_pp0_stage0_iter4;
reg    ap_predicate_op97_writereq_state13;
reg    ap_block_state13_io;
wire    ap_block_state16_pp0_stage0_iter5;
reg    ap_predicate_op108_writeresp_state19;
reg    ap_block_state19_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_208_p2;
wire   [0:0] mode_read_read_fu_96_p2;
wire   [0:0] inverse_read_read_fu_90_p2;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_predicate_op54_writereq_state2;
reg    ap_block_state2_io;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_predicate_op74_writeresp_state8;
reg    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state11_pp0_stage1_iter3;
wire    ap_block_state14_pp0_stage1_iter4;
reg    ap_predicate_op100_write_state14;
reg    ap_block_state14_io;
wire    ap_block_state17_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_11001;
wire   [63:0] out_buf1_read_reg_328;
reg   [0:0] icmp_ln45_reg_333_pp0_iter1_reg;
reg   [0:0] icmp_ln45_reg_333_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_333_pp0_iter3_reg;
reg   [0:0] icmp_ln45_reg_333_pp0_iter4_reg;
wire   [63:0] zext_ln55_fu_237_p1;
reg   [63:0] zext_ln55_reg_337;
reg   [63:0] zext_ln55_reg_337_pp0_iter1_reg;
reg   [63:0] zext_ln55_reg_337_pp0_iter2_reg;
wire   [15:0] trunc_ln55_1_fu_247_p1;
reg   [15:0] trunc_ln55_1_reg_347;
reg   [63:0] out_buf_load_reg_359;
reg   [63:0] out_buf_load_reg_359_pp0_iter1_reg;
reg    ap_block_pp0_stage2_11001;
wire   [63:0] grp_fu_176_p2;
reg   [63:0] mul_reg_375;
reg   [60:0] trunc_ln56_1_reg_380;
reg   [60:0] trunc_ln56_1_reg_380_pp0_iter3_reg;
wire   [63:0] select_ln54_fu_277_p3;
reg   [63:0] select_ln54_reg_385;
wire   [15:0] trunc_ln56_fu_294_p1;
reg   [15:0] trunc_ln56_reg_396;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [17:0] grp_monty_mul_fu_169_x;
wire   [16:0] grp_monty_mul_fu_169_ap_return;
reg    grp_monty_mul_fu_169_ap_ce;
reg    ap_predicate_op59_call_state3;
wire    ap_block_state3_pp0_stage2_iter0_ignore_call1;
wire    ap_block_state6_pp0_stage2_iter1_ignore_call1;
wire    ap_block_state9_pp0_stage2_iter2_ignore_call1;
wire    ap_block_state12_pp0_stage2_iter3_ignore_call1;
reg    ap_block_state15_pp0_stage2_iter4_ignore_call1;
wire    ap_block_state18_pp0_stage2_iter5_ignore_call1;
reg    ap_block_pp0_stage2_11001_ignoreCallOp59;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call1;
wire    ap_block_state4_pp0_stage0_iter1_ignore_call1;
wire    ap_block_state7_pp0_stage0_iter2_ignore_call1;
wire    ap_block_state10_pp0_stage0_iter3_ignore_call1;
wire    ap_block_state13_pp0_stage0_iter4_ignore_call1;
wire    ap_block_state16_pp0_stage0_iter5_ignore_call1;
reg    ap_block_state19_pp0_stage0_iter6_ignore_call1;
reg    ap_block_pp0_stage0_11001_ignoreCallOp63;
wire    ap_block_state2_pp0_stage1_iter0_ignore_call1;
wire    ap_block_state5_pp0_stage1_iter1_ignore_call1;
reg    ap_block_state8_pp0_stage1_iter2_ignore_call1;
wire    ap_block_state11_pp0_stage1_iter3_ignore_call1;
wire    ap_block_state14_pp0_stage1_iter4_ignore_call1;
wire    ap_block_state17_pp0_stage1_iter5_ignore_call1;
reg    ap_block_pp0_stage1_11001_ignoreCallOp66;
wire   [63:0] zext_ln45_fu_220_p1;
wire  signed [63:0] sext_ln58_fu_251_p1;
wire  signed [63:0] sext_ln51_fu_283_p1;
wire  signed [63:0] sext_ln56_fu_298_p1;
wire   [63:0] zext_ln58_fu_262_p1;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] zext_ln56_fu_308_p1;
reg    ap_block_pp0_stage1_01001;
reg   [10:0] j_fu_86;
wire   [10:0] add_ln45_fu_214_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_j_1;
wire   [63:0] grp_fu_176_p0;
reg   [63:0] grp_fu_181_p0;
reg   [63:0] grp_fu_181_p1;
wire   [63:0] grp_fu_181_p2;
wire   [9:0] trunc_ln55_fu_225_p1;
wire   [12:0] shl_ln_fu_229_p3;
wire   [63:0] bitcast_ln49_1_fu_274_p1;
reg    grp_fu_176_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage0;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to6;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiFFNTT_monty_mul grp_monty_mul_fu_169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(grp_monty_mul_fu_169_x),
    .y(14'd64),
    .ap_return(grp_monty_mul_fu_169_ap_return),
    .ap_ce(grp_monty_mul_fu_169_ap_ce)
);

fiFFNTT_dmul_64ns_64ns_64_5_max_dsp_0 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_5_max_dsp_0_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_176_p0),
    .din1(64'd4566650022153682944),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

fiFFNTT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln45_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_86 <= add_ln45_fu_214_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_86 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln45_reg_333 <= icmp_ln45_fu_208_p2;
        icmp_ln45_reg_333_pp0_iter1_reg <= icmp_ln45_reg_333;
        icmp_ln45_reg_333_pp0_iter2_reg <= icmp_ln45_reg_333_pp0_iter1_reg;
        icmp_ln45_reg_333_pp0_iter3_reg <= icmp_ln45_reg_333_pp0_iter2_reg;
        icmp_ln45_reg_333_pp0_iter4_reg <= icmp_ln45_reg_333_pp0_iter3_reg;
        zext_ln55_reg_337_pp0_iter1_reg[12 : 3] <= zext_ln55_reg_337[12 : 3];
        zext_ln55_reg_337_pp0_iter2_reg[12 : 3] <= zext_ln55_reg_337_pp0_iter1_reg[12 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (inverse == 1'd1) & (mode == 1'd1))) begin
        mul_reg_375 <= grp_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (mode == 1'd1) & (icmp_ln45_reg_333 == 1'd0))) begin
        out_buf_load_reg_359 <= out_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_buf_load_reg_359_pp0_iter1_reg <= out_buf_load_reg_359;
        trunc_ln56_1_reg_380_pp0_iter3_reg <= trunc_ln56_1_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if ((((inverse_read_read_fu_90_p2 == 1'd0) & (mode_read_read_fu_96_p2 == 1'd0) & (icmp_ln45_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (mode == 1'd1)))) begin
        reg_196 <= {{grp_fu_181_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (mode == 1'd1))) begin
        select_ln54_reg_385 <= select_ln54_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (mode == 1'd0) & (icmp_ln45_reg_333 == 1'd0))) begin
        trunc_ln55_1_reg_347 <= trunc_ln55_1_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (inverse == 1'd1) & (mode == 1'd0))) begin
        trunc_ln56_1_reg_380 <= {{grp_fu_181_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (inverse == 1'd1) & (mode == 1'd0))) begin
        trunc_ln56_reg_396 <= trunc_ln56_fu_294_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln55_reg_337[12 : 3] <= zext_ln55_fu_237_p1[12 : 3];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (icmp_ln45_reg_333 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln45_reg_333_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_86;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (inverse == 1'd1) & (mode == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (mode == 1'd1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (inverse == 1'd0) & (mode == 1'd0) & (icmp_ln45_reg_333 == 1'd0)))) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (inverse == 1'd1) & (mode == 1'd0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (mode == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (inverse == 1'd0) & (mode == 1'd0)))) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (mode == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (inverse == 1'd1) & (mode == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_predicate_op57_write_state3 == 1'b1)))) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (inverse == 1'd1) & (mode == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (mode == 1'd1)))) begin
        grp_fu_181_p0 = zext_ln55_reg_337_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_181_p0 = zext_ln55_fu_237_p1;
    end else begin
        grp_fu_181_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (inverse == 1'd1) & (mode == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (mode == 1'd1)))) begin
        grp_fu_181_p1 = out_buf1_read_reg_328;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_181_p1 = out_buf1;
    end else begin
        grp_fu_181_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp59)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp66)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp63)))) begin
        grp_monty_mul_fu_169_ap_ce = 1'b1;
    end else begin
        grp_monty_mul_fu_169_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op97_writereq_state13 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem0_AWADDR = sext_ln56_fu_298_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (mode == 1'd1))) begin
        m_axi_gmem0_AWADDR = sext_ln51_fu_283_p1;
    end else if (((ap_predicate_op54_writereq_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem0_AWADDR = sext_ln58_fu_251_p1;
    end else begin
        m_axi_gmem0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op54_writereq_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op97_writereq_state13 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (mode == 1'd1)))) begin
        m_axi_gmem0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_predicate_op108_writeresp_state19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (mode == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op74_writeresp_state8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem0_BREADY = 1'b1;
    end else begin
        m_axi_gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op100_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        m_axi_gmem0_WDATA = zext_ln56_fu_308_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001) & (mode == 1'd1))) begin
        m_axi_gmem0_WDATA = select_ln54_reg_385;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001) & (ap_predicate_op57_write_state3 == 1'b1))) begin
        m_axi_gmem0_WDATA = zext_ln58_fu_262_p1;
    end else begin
        m_axi_gmem0_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001) & (mode == 1'd1))) begin
        m_axi_gmem0_WSTRB = 8'd255;
    end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op100_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001) & (ap_predicate_op57_write_state3 == 1'b1)))) begin
        m_axi_gmem0_WSTRB = 8'd3;
    end else begin
        m_axi_gmem0_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (mode == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op100_write_state14 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op57_write_state3 == 1'b1)))) begin
        m_axi_gmem0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((mode_read_read_fu_96_p2 == 1'd1) & (icmp_ln45_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((mode_read_read_fu_96_p2 == 1'd0) & (icmp_ln45_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        out_buf_ce0 = 1'b1;
    end else begin
        out_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_214_p2 = (ap_sig_allocacmp_j_1 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_predicate_op108_writeresp_state19 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state10_io)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state13_io)) | ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_predicate_op108_writeresp_state19 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp63 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state10_io)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state13_io)) | ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_predicate_op108_writeresp_state19 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state10_io)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state13_io)) | ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_predicate_op108_writeresp_state19 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op74_writeresp_state8 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state14_io)) | ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op74_writeresp_state8 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp66 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state14_io)) | ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op74_writeresp_state8 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state14_io)) | ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op74_writeresp_state8 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (mode == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (mode == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_11001_ignoreCallOp59 = (((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (mode == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((m_axi_gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (mode == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state10_io = ((m_axi_gmem0_WREADY == 1'b0) & (mode == 1'd1));
end

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter3_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter3_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter3_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((m_axi_gmem0_AWREADY == 1'b0) & (ap_predicate_op97_writereq_state13 == 1'b1));
end

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((m_axi_gmem0_WREADY == 1'b0) & (ap_predicate_op100_write_state14 == 1'b1));
end

assign ap_block_state14_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter4_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage2_iter4 = ((m_axi_gmem0_BVALID == 1'b0) & (mode == 1'd1));
end

always @ (*) begin
    ap_block_state15_pp0_stage2_iter4_ignore_call1 = ((m_axi_gmem0_BVALID == 1'b0) & (mode == 1'd1));
end

assign ap_block_state16_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter5_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter5_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter5_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter6 = ((m_axi_gmem0_BVALID == 1'b0) & (ap_predicate_op108_writeresp_state19 == 1'b1));
end

always @ (*) begin
    ap_block_state19_pp0_stage0_iter6_ignore_call1 = ((m_axi_gmem0_BVALID == 1'b0) & (ap_predicate_op108_writeresp_state19 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem0_AWREADY == 1'b0) & (ap_predicate_op54_writereq_state2 == 1'b1));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem0_WREADY == 1'b0) & (ap_predicate_op57_write_state3 == 1'b1));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2_ignore_call1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage1_iter2 = ((m_axi_gmem0_BVALID == 1'b0) & (ap_predicate_op74_writeresp_state8 == 1'b1));
end

always @ (*) begin
    ap_block_state8_pp0_stage1_iter2_ignore_call1 = ((m_axi_gmem0_BVALID == 1'b0) & (ap_predicate_op74_writeresp_state8 == 1'b1));
end

always @ (*) begin
    ap_block_state9_io = ((m_axi_gmem0_AWREADY == 1'b0) & (mode == 1'd1));
end

assign ap_block_state9_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter2_ignore_call1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

always @ (*) begin
    ap_predicate_op100_write_state14 = ((inverse == 1'd1) & (mode == 1'd0));
end

always @ (*) begin
    ap_predicate_op108_writeresp_state19 = ((inverse == 1'd1) & (mode == 1'd0));
end

always @ (*) begin
    ap_predicate_op54_writereq_state2 = ((inverse == 1'd0) & (mode == 1'd0) & (icmp_ln45_reg_333 == 1'd0));
end

always @ (*) begin
    ap_predicate_op57_write_state3 = ((inverse == 1'd0) & (mode == 1'd0) & (icmp_ln45_reg_333 == 1'd0));
end

always @ (*) begin
    ap_predicate_op59_call_state3 = ((inverse == 1'd1) & (mode == 1'd0) & (icmp_ln45_reg_333 == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_writeresp_state8 = ((inverse == 1'd0) & (mode == 1'd0));
end

always @ (*) begin
    ap_predicate_op97_writereq_state13 = ((inverse == 1'd1) & (mode == 1'd0));
end

assign bitcast_ln49_1_fu_274_p1 = mul_reg_375;

assign grp_fu_176_p0 = out_buf_load_reg_359;

assign grp_fu_181_p2 = (grp_fu_181_p0 + grp_fu_181_p1);

assign grp_monty_mul_fu_169_x = trunc_ln55_1_reg_347;

assign icmp_ln45_fu_208_p2 = ((ap_sig_allocacmp_j_1 == 11'd1024) ? 1'b1 : 1'b0);

assign inverse_read_read_fu_90_p2 = inverse;

assign m_axi_gmem0_ARADDR = 64'd0;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_ARVALID = 1'b0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd1;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_RREADY = 1'b0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WUSER = 1'd0;

assign mode_read_read_fu_96_p2 = mode;

assign out_buf1_read_reg_328 = out_buf1;

assign out_buf_address0 = zext_ln45_fu_220_p1;

assign select_ln54_fu_277_p3 = ((inverse[0:0] == 1'b1) ? bitcast_ln49_1_fu_274_p1 : out_buf_load_reg_359_pp0_iter1_reg);

assign sext_ln51_fu_283_p1 = $signed(reg_196);

assign sext_ln56_fu_298_p1 = $signed(trunc_ln56_1_reg_380_pp0_iter3_reg);

assign sext_ln58_fu_251_p1 = $signed(reg_196);

assign shl_ln_fu_229_p3 = {{trunc_ln55_fu_225_p1}, {3'd0}};

assign trunc_ln55_1_fu_247_p1 = out_buf_q0[15:0];

assign trunc_ln55_fu_225_p1 = ap_sig_allocacmp_j_1[9:0];

assign trunc_ln56_fu_294_p1 = grp_monty_mul_fu_169_ap_return[15:0];

assign zext_ln45_fu_220_p1 = ap_sig_allocacmp_j_1;

assign zext_ln55_fu_237_p1 = shl_ln_fu_229_p3;

assign zext_ln56_fu_308_p1 = trunc_ln56_reg_396;

assign zext_ln58_fu_262_p1 = trunc_ln55_1_reg_347;

always @ (posedge ap_clk) begin
    zext_ln55_reg_337[2:0] <= 3'b000;
    zext_ln55_reg_337[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln55_reg_337_pp0_iter1_reg[2:0] <= 3'b000;
    zext_ln55_reg_337_pp0_iter1_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln55_reg_337_pp0_iter2_reg[2:0] <= 3'b000;
    zext_ln55_reg_337_pp0_iter2_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //fiFFNTT_out_copy_1
