-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT_Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (62 downto 0) );
end;


architecture behav of NTT_Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal gmem_addr_reg_104 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_buf_ce0 : STD_LOGIC;
    signal in_buf_we0 : STD_LOGIC;
    signal in_buf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_ce1 : STD_LOGIC;
    signal in_buf_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_buf_ce0 : STD_LOGIC;
    signal out_buf_we0 : STD_LOGIC;
    signal out_buf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_ce1 : STD_LOGIC;
    signal out_buf_we1 : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_ap_start : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_ap_done : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_ap_idle : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_ap_ready : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_ce0 : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_we0 : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_ntt_10_stages_fu_71_ap_start : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_ap_done : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_ap_idle : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_ap_ready : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_in_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_10_stages_fu_71_in_buf_ce0 : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_in_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_10_stages_fu_71_in_buf_ce1 : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_out_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_10_stages_fu_71_out_buf_ce0 : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_out_buf_we0 : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_out_buf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_ntt_10_stages_fu_71_out_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_10_stages_fu_71_out_buf_ce1 : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_out_buf_we1 : STD_LOGIC;
    signal grp_ntt_10_stages_fu_71_out_buf_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_ap_start : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_ap_done : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_ap_idle : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_ap_ready : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_2_fu_79_out_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Loop_1_proc_Pipeline_2_fu_79_out_buf_ce0 : STD_LOGIC;
    signal grp_Loop_1_proc_Pipeline_1_fu_63_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_ntt_10_stages_fu_71_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_Loop_1_proc_Pipeline_2_fu_79_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_read_cast_fu_87_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_read_cast_fu_87_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component NTT_Loop_1_proc_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read_cast : IN STD_LOGIC_VECTOR (62 downto 0);
        in_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_buf_ce0 : OUT STD_LOGIC;
        in_buf_we0 : OUT STD_LOGIC;
        in_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_ntt_10_stages IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_buf_ce0 : OUT STD_LOGIC;
        in_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_buf_ce1 : OUT STD_LOGIC;
        in_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_buf_ce0 : OUT STD_LOGIC;
        out_buf_we0 : OUT STD_LOGIC;
        out_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_buf_ce1 : OUT STD_LOGIC;
        out_buf_we1 : OUT STD_LOGIC;
        out_buf_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_Loop_1_proc_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read_cast : IN STD_LOGIC_VECTOR (62 downto 0);
        out_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_buf_ce0 : OUT STD_LOGIC;
        out_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_Loop_1_proc_in_buf_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_Loop_1_proc_out_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    in_buf_U : component NTT_Loop_1_proc_in_buf_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => in_buf_address0,
        ce0 => in_buf_ce0,
        we0 => in_buf_we0,
        d0 => grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_d0,
        q0 => in_buf_q0,
        address1 => grp_ntt_10_stages_fu_71_in_buf_address1,
        ce1 => in_buf_ce1,
        q1 => in_buf_q1);

    out_buf_U : component NTT_Loop_1_proc_out_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_buf_address0,
        ce0 => out_buf_ce0,
        we0 => out_buf_we0,
        d0 => grp_ntt_10_stages_fu_71_out_buf_d0,
        q0 => out_buf_q0,
        address1 => grp_ntt_10_stages_fu_71_out_buf_address1,
        ce1 => out_buf_ce1,
        we1 => out_buf_we1,
        d1 => grp_ntt_10_stages_fu_71_out_buf_d1);

    grp_Loop_1_proc_Pipeline_1_fu_63 : component NTT_Loop_1_proc_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_1_proc_Pipeline_1_fu_63_ap_start,
        ap_done => grp_Loop_1_proc_Pipeline_1_fu_63_ap_done,
        ap_idle => grp_Loop_1_proc_Pipeline_1_fu_63_ap_idle,
        ap_ready => grp_Loop_1_proc_Pipeline_1_fu_63_ap_ready,
        m_axi_gmem_AWVALID => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        p_read_cast => p_read,
        in_buf_address0 => grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_address0,
        in_buf_ce0 => grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_ce0,
        in_buf_we0 => grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_we0,
        in_buf_d0 => grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_d0);

    grp_ntt_10_stages_fu_71 : component NTT_ntt_10_stages
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_10_stages_fu_71_ap_start,
        ap_done => grp_ntt_10_stages_fu_71_ap_done,
        ap_idle => grp_ntt_10_stages_fu_71_ap_idle,
        ap_ready => grp_ntt_10_stages_fu_71_ap_ready,
        in_buf_address0 => grp_ntt_10_stages_fu_71_in_buf_address0,
        in_buf_ce0 => grp_ntt_10_stages_fu_71_in_buf_ce0,
        in_buf_q0 => in_buf_q0,
        in_buf_address1 => grp_ntt_10_stages_fu_71_in_buf_address1,
        in_buf_ce1 => grp_ntt_10_stages_fu_71_in_buf_ce1,
        in_buf_q1 => in_buf_q1,
        out_buf_address0 => grp_ntt_10_stages_fu_71_out_buf_address0,
        out_buf_ce0 => grp_ntt_10_stages_fu_71_out_buf_ce0,
        out_buf_we0 => grp_ntt_10_stages_fu_71_out_buf_we0,
        out_buf_d0 => grp_ntt_10_stages_fu_71_out_buf_d0,
        out_buf_address1 => grp_ntt_10_stages_fu_71_out_buf_address1,
        out_buf_ce1 => grp_ntt_10_stages_fu_71_out_buf_ce1,
        out_buf_we1 => grp_ntt_10_stages_fu_71_out_buf_we1,
        out_buf_d1 => grp_ntt_10_stages_fu_71_out_buf_d1);

    grp_Loop_1_proc_Pipeline_2_fu_79 : component NTT_Loop_1_proc_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_1_proc_Pipeline_2_fu_79_ap_start,
        ap_done => grp_Loop_1_proc_Pipeline_2_fu_79_ap_done,
        ap_idle => grp_Loop_1_proc_Pipeline_2_fu_79_ap_idle,
        ap_ready => grp_Loop_1_proc_Pipeline_2_fu_79_ap_ready,
        m_axi_gmem_AWVALID => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv16_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv10_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        p_read_cast => p_read,
        out_buf_address0 => grp_Loop_1_proc_Pipeline_2_fu_79_out_buf_address0,
        out_buf_ce0 => grp_Loop_1_proc_Pipeline_2_fu_79_out_buf_ce0,
        out_buf_q0 => out_buf_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_1_proc_Pipeline_1_fu_63_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_1_proc_Pipeline_1_fu_63_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_Loop_1_proc_Pipeline_1_fu_63_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_1_proc_Pipeline_1_fu_63_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_1_proc_Pipeline_1_fu_63_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_1_proc_Pipeline_2_fu_79_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_1_proc_Pipeline_2_fu_79_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_Loop_1_proc_Pipeline_2_fu_79_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_1_proc_Pipeline_2_fu_79_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_1_proc_Pipeline_2_fu_79_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_10_stages_fu_71_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_10_stages_fu_71_ap_start_reg <= ap_const_logic_0;
            else
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_ntt_10_stages_fu_71_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_10_stages_fu_71_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_10_stages_fu_71_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                gmem_addr_reg_104 <= p_read_cast_fu_87_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_BVALID, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state19, grp_Loop_1_proc_Pipeline_1_fu_63_ap_done, grp_ntt_10_stages_fu_71_ap_done, grp_Loop_1_proc_Pipeline_2_fu_79_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_Loop_1_proc_Pipeline_1_fu_63_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((grp_ntt_10_stages_fu_71_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_Loop_1_proc_Pipeline_2_fu_79_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_ap_done)
    begin
        if ((grp_Loop_1_proc_Pipeline_1_fu_63_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(grp_ntt_10_stages_fu_71_ap_done)
    begin
        if ((grp_ntt_10_stages_fu_71_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_ap_done)
    begin
        if ((grp_Loop_1_proc_Pipeline_2_fu_79_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem_BVALID, ap_CS_fsm_state19)
    begin
        if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state19)
    begin
        if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    grp_Loop_1_proc_Pipeline_1_fu_63_ap_start <= grp_Loop_1_proc_Pipeline_1_fu_63_ap_start_reg;
    grp_Loop_1_proc_Pipeline_2_fu_79_ap_start <= grp_Loop_1_proc_Pipeline_2_fu_79_ap_start_reg;
    grp_ntt_10_stages_fu_71_ap_start <= grp_ntt_10_stages_fu_71_ap_start_reg;

    in_buf_address0_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_address0, grp_ntt_10_stages_fu_71_in_buf_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_buf_address0 <= grp_ntt_10_stages_fu_71_in_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_buf_address0 <= grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_address0;
        else 
            in_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_buf_ce0_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_ce0, grp_ntt_10_stages_fu_71_in_buf_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_buf_ce0 <= grp_ntt_10_stages_fu_71_in_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_buf_ce0 <= grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_ce0;
        else 
            in_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_ce1_assign_proc : process(grp_ntt_10_stages_fu_71_in_buf_ce1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            in_buf_ce1 <= grp_ntt_10_stages_fu_71_in_buf_ce1;
        else 
            in_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_we0_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            in_buf_we0 <= grp_Loop_1_proc_Pipeline_1_fu_63_in_buf_we0;
        else 
            in_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state10, p_read_cast_fu_87_p1)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_ARADDR <= p_read_cast_fu_87_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARADDR <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARADDR;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_ARBURST_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARBURST, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARBURST <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARBURST;
        else 
            m_axi_gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_ARCACHE_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARCACHE, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARCACHE <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARCACHE;
        else 
            m_axi_gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARID_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARID <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARID;
        else 
            m_axi_gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_ARLEN_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARLEN <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARLEN;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_ARLOCK_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARLOCK, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARLOCK <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARLOCK;
        else 
            m_axi_gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_ARPROT_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARPROT, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARPROT <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARPROT;
        else 
            m_axi_gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_ARQOS_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARQOS, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARQOS <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARQOS;
        else 
            m_axi_gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARREGION_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARREGION, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARREGION <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARREGION;
        else 
            m_axi_gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARSIZE_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARSIZE, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARSIZE <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARSIZE;
        else 
            m_axi_gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_ARUSER_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARUSER, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARUSER <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARUSER;
        else 
            m_axi_gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARVALID <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_AWADDR_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state11, gmem_addr_reg_104, grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWADDR, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_gmem_AWADDR <= gmem_addr_reg_104;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWADDR <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWADDR;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_AWBURST_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWBURST, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWBURST <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWBURST;
        else 
            m_axi_gmem_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_AWCACHE_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWCACHE, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWCACHE <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWCACHE;
        else 
            m_axi_gmem_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_AWID_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWID <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWID;
        else 
            m_axi_gmem_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_AWLEN_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state11, grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWLEN, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_gmem_AWLEN <= ap_const_lv32_400;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWLEN <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWLEN;
        else 
            m_axi_gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_AWLOCK_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWLOCK, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWLOCK <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWLOCK;
        else 
            m_axi_gmem_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_AWPROT_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWPROT, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWPROT <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWPROT;
        else 
            m_axi_gmem_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_AWQOS_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWQOS, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWQOS <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWQOS;
        else 
            m_axi_gmem_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_AWREGION_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWREGION, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWREGION <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWREGION;
        else 
            m_axi_gmem_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_AWSIZE_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWSIZE, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWSIZE <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWSIZE;
        else 
            m_axi_gmem_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_AWUSER_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWUSER, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWUSER <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWUSER;
        else 
            m_axi_gmem_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state11, grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWVALID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_AWVALID <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_AWVALID;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state19, grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_BREADY, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_BREADY <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_BREADY;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_RREADY <= grp_Loop_1_proc_Pipeline_1_fu_63_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WUSER;

    m_axi_gmem_WVALID_assign_proc : process(grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WVALID, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_WVALID <= grp_Loop_1_proc_Pipeline_2_fu_79_m_axi_gmem_WVALID;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_address0_assign_proc : process(grp_ntt_10_stages_fu_71_out_buf_address0, grp_Loop_1_proc_Pipeline_2_fu_79_out_buf_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_buf_address0 <= grp_Loop_1_proc_Pipeline_2_fu_79_out_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_buf_address0 <= grp_ntt_10_stages_fu_71_out_buf_address0;
        else 
            out_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_buf_ce0_assign_proc : process(grp_ntt_10_stages_fu_71_out_buf_ce0, grp_Loop_1_proc_Pipeline_2_fu_79_out_buf_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_buf_ce0 <= grp_Loop_1_proc_Pipeline_2_fu_79_out_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_buf_ce0 <= grp_ntt_10_stages_fu_71_out_buf_ce0;
        else 
            out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_ce1_assign_proc : process(grp_ntt_10_stages_fu_71_out_buf_ce1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_buf_ce1 <= grp_ntt_10_stages_fu_71_out_buf_ce1;
        else 
            out_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_we0_assign_proc : process(grp_ntt_10_stages_fu_71_out_buf_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_buf_we0 <= grp_ntt_10_stages_fu_71_out_buf_we0;
        else 
            out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_we1_assign_proc : process(grp_ntt_10_stages_fu_71_out_buf_we1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_buf_we1 <= grp_ntt_10_stages_fu_71_out_buf_we1;
        else 
            out_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_read_cast_fu_87_p0 <= p_read;
        p_read_cast_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_cast_fu_87_p0),64));

end behav;
