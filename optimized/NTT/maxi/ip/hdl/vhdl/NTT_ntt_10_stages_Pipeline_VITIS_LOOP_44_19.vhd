-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_19 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stage0_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_6_ce0 : OUT STD_LOGIC;
    stage0_6_we0 : OUT STD_LOGIC;
    stage0_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_5_ce0 : OUT STD_LOGIC;
    stage0_5_we0 : OUT STD_LOGIC;
    stage0_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_4_ce0 : OUT STD_LOGIC;
    stage0_4_we0 : OUT STD_LOGIC;
    stage0_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_ce0 : OUT STD_LOGIC;
    stage0_we0 : OUT STD_LOGIC;
    stage0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_ce0 : OUT STD_LOGIC;
    stage1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_2_ce0 : OUT STD_LOGIC;
    stage1_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_1_ce0 : OUT STD_LOGIC;
    stage1_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_3_ce0 : OUT STD_LOGIC;
    stage1_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    GMb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    GMb_ce0 : OUT STD_LOGIC;
    GMb_q0 : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_19 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_fu_219_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln52_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_reg_708 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_reg_708_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_reg_708_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_reg_708_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln48_fu_263_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_720 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln52_s_reg_726 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_s_reg_726_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_s_reg_726_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_s_reg_726_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_s_reg_726_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln54_1_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_731 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_731_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_731_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_731_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_731_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_731_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_325_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln48_1_fu_338_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln48_1_reg_752 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln48_1_reg_752_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln48_1_reg_752_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln48_1_reg_752_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln48_1_reg_752_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_647_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_762 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_762_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_762_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_654_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_3_reg_772 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_3_reg_772_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_3_reg_772_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_668_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_2_reg_787 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_reg_802 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln52_1_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_1_reg_814 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln50_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal n_fu_90 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_2_fu_314_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_fu_227_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_7_fu_231_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln50_7_cast_fu_245_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln48_fu_267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_fu_273_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln48_fu_241_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_fu_293_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln54_s_fu_299_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_1_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_343_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_343_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln55_fu_363_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_661_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_674_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_s_fu_378_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_1_fu_387_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_405_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_fu_393_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_6_fu_413_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_1_fu_375_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_fu_423_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_fu_429_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_1_fu_419_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_1_fu_433_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_452_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_fu_447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_fu_372_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_2_fu_467_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_fu_485_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_fu_481_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_1_fu_507_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_683_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_1_fu_524_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_4_fu_533_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_543_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_1_fu_551_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_2_fu_539_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_7_fu_559_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_3_fu_520_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_2_fu_569_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_1_fu_575_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_3_fu_565_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_4_fu_579_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_585_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_1_fu_599_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_2_fu_593_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_2_fu_516_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_5_fu_614_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_fu_620_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_1_fu_632_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_1_fu_628_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_647_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_647_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_654_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_654_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_661_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_661_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_668_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_668_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_674_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_674_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_674_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_683_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_683_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_683_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_647_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_654_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_674_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_674_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_683_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_683_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NTT_mux_22_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component NTT_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mac_muladd_16ns_14ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_22_16_1_1_U156 : component NTT_mux_22_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => stage1_3_q0,
        din2 => tmp_s_fu_343_p3,
        dout => tmp_s_fu_343_p4);

    mux_22_16_1_1_U157 : component NTT_mux_22_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => stage1_1_q0,
        din2 => add_ln48_1_reg_752_pp0_iter4_reg,
        dout => u_1_fu_507_p4);

    mul_mul_16ns_14ns_30_4_1_U158 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_647_p0,
        din1 => grp_fu_647_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_647_p2);

    mul_mul_16ns_14ns_30_4_1_U159 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_654_p0,
        din1 => grp_fu_654_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_654_p2);

    mul_mul_16s_14ns_16_4_1_U160 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_661_p0,
        din1 => grp_fu_661_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_661_p2);

    mul_mul_16s_14ns_16_4_1_U161 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_668_p0,
        din1 => grp_fu_668_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_668_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U162 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_674_p0,
        din1 => grp_fu_674_p1,
        din2 => grp_fu_674_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_674_p3);

    mac_muladd_16ns_14ns_30ns_31_4_1_U163 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_683_p0,
        din1 => grp_fu_683_p1,
        din2 => grp_fu_683_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_683_p3);

    flow_control_loop_pipe_sequential_init_U : component NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    n_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_219_p3 = ap_const_lv1_0))) then 
                    n_fu_90 <= n_2_fu_314_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_90 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_699 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_1_reg_752 <= add_ln48_1_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_1_reg_752_pp0_iter1_reg <= add_ln48_1_reg_752;
                add_ln48_1_reg_752_pp0_iter2_reg <= add_ln48_1_reg_752_pp0_iter1_reg;
                add_ln48_1_reg_752_pp0_iter3_reg <= add_ln48_1_reg_752_pp0_iter2_reg;
                add_ln48_1_reg_752_pp0_iter4_reg <= add_ln48_1_reg_752_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                mul_ln55_2_reg_787 <= grp_fu_668_p2;
                u_reg_802 <= stage1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_219_p3 = ap_const_lv1_0))) then
                lshr_ln52_s_reg_726 <= i_fu_277_p2(9 downto 2);
                trunc_ln48_reg_720 <= trunc_ln48_fu_263_p1;
                    zext_ln52_reg_708(7 downto 0) <= zext_ln52_fu_258_p1(7 downto 0);
                    zext_ln54_1_reg_731(7 downto 0) <= zext_ln54_1_fu_309_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln52_s_reg_726_pp0_iter1_reg <= lshr_ln52_s_reg_726;
                lshr_ln52_s_reg_726_pp0_iter2_reg <= lshr_ln52_s_reg_726_pp0_iter1_reg;
                lshr_ln52_s_reg_726_pp0_iter3_reg <= lshr_ln52_s_reg_726_pp0_iter2_reg;
                lshr_ln52_s_reg_726_pp0_iter4_reg <= lshr_ln52_s_reg_726_pp0_iter3_reg;
                tmp2_3_reg_772 <= grp_fu_654_p2;
                tmp2_3_reg_772_pp0_iter3_reg <= tmp2_3_reg_772;
                tmp2_3_reg_772_pp0_iter4_reg <= tmp2_3_reg_772_pp0_iter3_reg;
                tmp2_reg_762 <= grp_fu_647_p2;
                tmp2_reg_762_pp0_iter3_reg <= tmp2_reg_762;
                tmp2_reg_762_pp0_iter4_reg <= tmp2_reg_762_pp0_iter3_reg;
                tmp_reg_699 <= ap_sig_allocacmp_n_1(9 downto 9);
                    zext_ln52_1_reg_814(7 downto 0) <= zext_ln52_1_fu_500_p1(7 downto 0);
                    zext_ln52_reg_708_pp0_iter1_reg(7 downto 0) <= zext_ln52_reg_708(7 downto 0);
                    zext_ln52_reg_708_pp0_iter2_reg(7 downto 0) <= zext_ln52_reg_708_pp0_iter1_reg(7 downto 0);
                    zext_ln52_reg_708_pp0_iter3_reg(7 downto 0) <= zext_ln52_reg_708_pp0_iter2_reg(7 downto 0);
                    zext_ln52_reg_708_pp0_iter4_reg(7 downto 0) <= zext_ln52_reg_708_pp0_iter3_reg(7 downto 0);
                    zext_ln54_1_reg_731_pp0_iter1_reg(7 downto 0) <= zext_ln54_1_reg_731(7 downto 0);
                    zext_ln54_1_reg_731_pp0_iter2_reg(7 downto 0) <= zext_ln54_1_reg_731_pp0_iter1_reg(7 downto 0);
                    zext_ln54_1_reg_731_pp0_iter3_reg(7 downto 0) <= zext_ln54_1_reg_731_pp0_iter2_reg(7 downto 0);
                    zext_ln54_1_reg_731_pp0_iter4_reg(7 downto 0) <= zext_ln54_1_reg_731_pp0_iter3_reg(7 downto 0);
                    zext_ln54_1_reg_731_pp0_iter5_reg(7 downto 0) <= zext_ln54_1_reg_731_pp0_iter4_reg(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln52_reg_708(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_reg_708_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_reg_708_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_reg_708_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_reg_708_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln54_1_reg_731(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln54_1_reg_731_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln54_1_reg_731_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln54_1_reg_731_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln54_1_reg_731_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln54_1_reg_731_pp0_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_1_reg_814(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    GMb_address0 <= zext_ln50_fu_253_p1(10 - 1 downto 0);

    GMb_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            GMb_ce0 <= ap_const_logic_1;
        else 
            GMb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln48_1_fu_338_p2 <= std_logic_vector(unsigned(or_ln48_1_fu_333_p2) + unsigned(trunc_ln48_reg_720));
    add_ln54_fu_293_p2 <= std_logic_vector(unsigned(i_fu_277_p2) + unsigned(ap_const_lv10_2));
    add_ln62_2_fu_569_p2 <= std_logic_vector(unsigned(zext_ln42_3_fu_520_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln62_fu_423_p2 <= std_logic_vector(unsigned(zext_ln42_1_fu_375_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln64_2_fu_593_p2 <= std_logic_vector(unsigned(u_1_fu_507_p4) + unsigned(tmp2_7_fu_559_p2));
    add_ln64_fu_447_p2 <= std_logic_vector(unsigned(u_reg_802) + unsigned(tmp2_6_fu_413_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, tmp_reg_699)
    begin
        if (((tmp_reg_699 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_90, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n_1 <= n_fu_90;
        end if; 
    end process;

    grp_fu_647_p0 <= grp_fu_647_p00(16 - 1 downto 0);
    grp_fu_647_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage1_2_q0),30));
    grp_fu_647_p1 <= zext_ln41_fu_325_p1(14 - 1 downto 0);
    grp_fu_654_p0 <= grp_fu_654_p00(16 - 1 downto 0);
    grp_fu_654_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_343_p4),30));
    grp_fu_654_p1 <= zext_ln41_fu_325_p1(14 - 1 downto 0);
    grp_fu_661_p0 <= grp_fu_647_p2(16 - 1 downto 0);
    grp_fu_661_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_668_p0 <= grp_fu_654_p2(16 - 1 downto 0);
    grp_fu_668_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_674_p0 <= grp_fu_674_p00(16 - 1 downto 0);
    grp_fu_674_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55_fu_363_p0),30));
    grp_fu_674_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_674_p2 <= grp_fu_674_p20(30 - 1 downto 0);
    grp_fu_674_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_762_pp0_iter4_reg),31));
    grp_fu_683_p0 <= grp_fu_683_p00(16 - 1 downto 0);
    grp_fu_683_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln55_2_reg_787),30));
    grp_fu_683_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_683_p2 <= grp_fu_683_p20(30 - 1 downto 0);
    grp_fu_683_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_3_reg_772_pp0_iter4_reg),31));
    i_fu_277_p2 <= std_logic_vector(unsigned(zext_ln48_1_fu_273_p1) + unsigned(zext_ln48_fu_241_p1));
    i_gm_7_fu_231_p4 <= ap_sig_allocacmp_n_1(8 downto 1);
    lshr_ln54_s_fu_299_p4 <= add_ln54_fu_293_p2(9 downto 2);
    n_2_fu_314_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_1) + unsigned(ap_const_lv10_2));
    or_ln48_1_fu_333_p2 <= (trunc_ln48_reg_720 or ap_const_lv2_1);
    or_ln48_fu_267_p2 <= (trunc_ln44_fu_227_p1 or ap_const_lv9_1);
    select_ln58_1_fu_551_p3 <= 
        ap_const_lv16_3001 when (tmp_4_fu_543_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln58_fu_405_p3 <= 
        ap_const_lv16_3001 when (tmp_1_fu_397_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln64_1_fu_599_p3 <= 
        ap_const_lv16_0 when (tmp_5_fu_585_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln64_fu_452_p3 <= 
        ap_const_lv16_0 when (tmp_2_fu_439_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln69_1_fu_632_p3 <= 
        ap_const_lv16_3001 when (tmp_6_fu_620_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln69_fu_485_p3 <= 
        ap_const_lv16_3001 when (tmp_3_fu_473_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln43_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_6_fu_413_p2),18));

        sext_ln43_2_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_4_fu_533_p2),16));

        sext_ln43_3_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_7_fu_559_p2),18));

        sext_ln43_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_1_fu_387_p2),16));

        sext_ln62_1_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_2_fu_569_p2),18));

        sext_ln62_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_fu_423_p2),18));

    stage0_4_address0 <= zext_ln52_1_reg_814(8 - 1 downto 0);

    stage0_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_4_ce0 <= ap_const_logic_1;
        else 
            stage0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_4_d0 <= std_logic_vector(unsigned(select_ln64_1_fu_599_p3) + unsigned(add_ln64_2_fu_593_p2));

    stage0_4_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_4_we0 <= ap_const_logic_1;
        else 
            stage0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_5_address0 <= zext_ln52_reg_708_pp0_iter4_reg(8 - 1 downto 0);

    stage0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_5_ce0 <= ap_const_logic_1;
        else 
            stage0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_5_d0 <= std_logic_vector(unsigned(select_ln69_fu_485_p3) + unsigned(trunc_ln68_fu_481_p1));

    stage0_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_5_we0 <= ap_const_logic_1;
        else 
            stage0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_6_address0 <= zext_ln54_1_reg_731_pp0_iter5_reg(8 - 1 downto 0);

    stage0_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_6_ce0 <= ap_const_logic_1;
        else 
            stage0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_6_d0 <= std_logic_vector(unsigned(select_ln69_1_fu_632_p3) + unsigned(trunc_ln68_1_fu_628_p1));

    stage0_6_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_6_we0 <= ap_const_logic_1;
        else 
            stage0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_address0 <= zext_ln52_reg_708_pp0_iter4_reg(8 - 1 downto 0);

    stage0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_ce0 <= ap_const_logic_1;
        else 
            stage0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_d0 <= std_logic_vector(unsigned(select_ln64_fu_452_p3) + unsigned(add_ln64_fu_447_p2));

    stage0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_we0 <= ap_const_logic_1;
        else 
            stage0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_1_address0 <= zext_ln52_1_fu_500_p1(8 - 1 downto 0);

    stage1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_1_ce0 <= ap_const_logic_1;
        else 
            stage1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_2_address0 <= zext_ln52_fu_258_p1(8 - 1 downto 0);

    stage1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_2_ce0 <= ap_const_logic_1;
        else 
            stage1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_3_address0 <= zext_ln54_1_fu_309_p1(8 - 1 downto 0);

    stage1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_3_ce0 <= ap_const_logic_1;
        else 
            stage1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_address0 <= zext_ln52_reg_708_pp0_iter3_reg(8 - 1 downto 0);

    stage1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_ce0 <= ap_const_logic_1;
        else 
            stage1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_1_fu_433_p2 <= std_logic_vector(signed(sext_ln62_fu_429_p1) + signed(sext_ln43_1_fu_419_p1));
    tmp1_2_fu_467_p2 <= std_logic_vector(unsigned(zext_ln42_fu_372_p1) - unsigned(sext_ln43_1_fu_419_p1));
    tmp1_4_fu_579_p2 <= std_logic_vector(signed(sext_ln62_1_fu_575_p1) + signed(sext_ln43_3_fu_565_p1));
    tmp1_5_fu_614_p2 <= std_logic_vector(unsigned(zext_ln42_2_fu_516_p1) - unsigned(sext_ln43_3_fu_565_p1));
    tmp2_1_fu_387_p2 <= std_logic_vector(unsigned(trunc_ln43_s_fu_378_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_4_fu_533_p2 <= std_logic_vector(unsigned(trunc_ln43_1_fu_524_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_6_fu_413_p2 <= std_logic_vector(unsigned(select_ln58_fu_405_p3) + unsigned(sext_ln43_fu_393_p1));
    tmp2_7_fu_559_p2 <= std_logic_vector(unsigned(select_ln58_1_fu_551_p3) + unsigned(sext_ln43_2_fu_539_p1));
    tmp_1_fu_397_p3 <= tmp2_1_fu_387_p2(14 downto 14);
    tmp_2_fu_439_p3 <= tmp1_1_fu_433_p2(17 downto 17);
    tmp_3_fu_473_p3 <= tmp1_2_fu_467_p2(17 downto 17);
    tmp_4_fu_543_p3 <= tmp2_4_fu_533_p2(14 downto 14);
    tmp_5_fu_585_p3 <= tmp1_4_fu_579_p2(17 downto 17);
    tmp_6_fu_620_p3 <= tmp1_5_fu_614_p2(17 downto 17);
    tmp_fu_219_p3 <= ap_sig_allocacmp_n_1(9 downto 9);
    tmp_s_fu_343_p3 <= std_logic_vector(unsigned(or_ln48_1_fu_333_p2) + unsigned(trunc_ln48_reg_720));
    trunc_ln43_1_fu_524_p4 <= grp_fu_683_p3(30 downto 16);
    trunc_ln43_s_fu_378_p4 <= grp_fu_674_p3(30 downto 16);
    trunc_ln44_fu_227_p1 <= ap_sig_allocacmp_n_1(9 - 1 downto 0);
    trunc_ln48_fu_263_p1 <= ap_sig_allocacmp_n_1(2 - 1 downto 0);
    trunc_ln68_1_fu_628_p1 <= tmp1_5_fu_614_p2(16 - 1 downto 0);
    trunc_ln68_fu_481_p1 <= tmp1_2_fu_467_p2(16 - 1 downto 0);
    zext_ln41_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb_q0),30));
    zext_ln42_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_802),17));
    zext_ln42_2_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_1_fu_507_p4),18));
    zext_ln42_3_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_1_fu_507_p4),17));
    zext_ln42_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_802),18));
    zext_ln48_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_fu_267_p2),10));
    zext_ln48_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln44_fu_227_p1),10));
    zext_ln50_7_cast_fu_245_p3 <= (ap_const_lv1_1 & i_gm_7_fu_231_p4);
    zext_ln50_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50_7_cast_fu_245_p3),64));
    zext_ln52_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln52_s_reg_726_pp0_iter4_reg),64));
    zext_ln52_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_gm_7_fu_231_p4),64));
    zext_ln54_1_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln54_s_fu_299_p4),64));
    zext_ln55_fu_363_p0 <= grp_fu_661_p2;
end behav;
