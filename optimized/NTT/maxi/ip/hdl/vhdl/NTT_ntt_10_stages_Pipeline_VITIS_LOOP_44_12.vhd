-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stage1_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_1_ce0 : OUT STD_LOGIC;
    stage1_1_we0 : OUT STD_LOGIC;
    stage1_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage1_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_3_ce0 : OUT STD_LOGIC;
    stage1_3_we0 : OUT STD_LOGIC;
    stage1_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_4_ce0 : OUT STD_LOGIC;
    stage0_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_4_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_4_ce1 : OUT STD_LOGIC;
    stage0_4_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_6_ce0 : OUT STD_LOGIC;
    stage0_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_6_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_6_ce1 : OUT STD_LOGIC;
    stage0_6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_ce0 : OUT STD_LOGIC;
    stage1_we0 : OUT STD_LOGIC;
    stage1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage1_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_2_ce0 : OUT STD_LOGIC;
    stage1_2_we0 : OUT STD_LOGIC;
    stage1_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_ce0 : OUT STD_LOGIC;
    stage0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_ce1 : OUT STD_LOGIC;
    stage0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_5_ce0 : OUT STD_LOGIC;
    stage0_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_5_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_5_ce1 : OUT STD_LOGIC;
    stage0_5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    GMb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    GMb_ce0 : OUT STD_LOGIC;
    GMb_q0 : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_fu_301_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_876_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_876_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_876_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_876_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_fu_313_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_880_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_880_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_880_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_880_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln2_reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln2_reg_892_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln2_reg_892_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln2_reg_892_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln64_1_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_reg_907_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_reg_907_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_reg_907_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_reg_907_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_reg_907_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stage1_addr_2_reg_911 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_addr_2_reg_911_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_addr_2_reg_911_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_addr_2_reg_911_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_addr_2_reg_911_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_addr_2_reg_911_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_2_addr_2_reg_916 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_2_addr_2_reg_916_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_2_addr_2_reg_916_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_2_addr_2_reg_916_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_2_addr_2_reg_916_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_2_addr_2_reg_916_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_2_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_2_reg_921_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_2_reg_921_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_2_reg_921_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_2_reg_921_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_1_addr_2_reg_936 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_1_addr_2_reg_936_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_1_addr_2_reg_936_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_1_addr_2_reg_936_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_1_addr_2_reg_936_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_1_addr_2_reg_936_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_3_addr_2_reg_941 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_3_addr_2_reg_941_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_3_addr_2_reg_941_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_3_addr_2_reg_941_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_3_addr_2_reg_941_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_3_addr_2_reg_941_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln41_fu_461_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal or_ln48_fu_480_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_reg_957 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_reg_957_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_reg_957_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_reg_957_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_reg_957_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln64_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_967_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_967_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_967_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_967_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_967_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_824_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_971 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_971_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_971_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_831_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_54_reg_981 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_54_reg_981_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_54_reg_981_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_845_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_8_reg_996 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage1_addr_reg_1011 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_2_addr_reg_1016 : STD_LOGIC_VECTOR (7 downto 0);
    signal u_1_fu_528_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_1_reg_1026 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_1_fu_664_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_1_reg_1038 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage1_1_addr_reg_1059 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_3_addr_reg_1064 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln69_5_fu_818_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_5_reg_1069 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln50_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln54_2_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_8_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_1_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_4_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_1_fu_100 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_11_fu_450_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln64_1_fu_630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal add_ln64_6_fu_784_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln44_fu_309_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_fu_321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_329_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_fu_337_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln48_fu_317_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_cast_fu_347_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_fu_370_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln3_fu_376_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_1_fu_400_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_4_fu_406_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_fu_410_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_2_fu_426_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln54_2_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_465_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_485_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln55_1_fu_515_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_838_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_851_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_1_fu_548_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_52_fu_557_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_44_fu_567_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_575_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_2_fu_563_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_58_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_3_fu_545_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_2_fu_593_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_1_fu_599_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_3_fu_589_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_37_fu_603_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_45_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_622_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_fu_617_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_2_fu_542_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_38_fu_638_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_46_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_fu_656_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_fu_652_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_4_fu_680_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_860_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_4_fu_701_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_55_fu_710_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_47_fu_720_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_8_fu_728_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_8_fu_716_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_57_fu_736_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_9_fu_697_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_8_fu_746_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_4_fu_752_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_9_fu_742_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_40_fu_756_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_48_fu_762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_8_fu_776_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_16_fu_770_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_8_fu_693_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_41_fu_792_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_49_fu_798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_8_fu_810_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_8_fu_806_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_824_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_824_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_831_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_831_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_838_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_838_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_845_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_845_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_851_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_851_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_851_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_860_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_860_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_860_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_824_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_831_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_851_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_851_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_860_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_860_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NTT_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component NTT_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mac_muladd_16ns_14ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_16_1_1_U19 : component NTT_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => stage0_q1,
        din1 => ap_const_lv16_0,
        din2 => stage0_5_q1,
        din3 => trunc_ln48_reg_880,
        dout => tmp_1_fu_465_p5);

    mux_42_16_1_1_U20 : component NTT_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => stage0_4_q1,
        din2 => ap_const_lv16_0,
        din3 => stage0_6_q1,
        din4 => or_ln48_fu_480_p2,
        dout => tmp_5_fu_485_p6);

    mux_32_16_1_1_U21 : component NTT_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => stage0_q0,
        din1 => ap_const_lv16_0,
        din2 => stage0_5_q0,
        din3 => trunc_ln48_reg_880_pp0_iter4_reg,
        dout => u_1_fu_528_p5);

    mux_42_16_1_1_U22 : component NTT_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => stage0_4_q0,
        din2 => ap_const_lv16_0,
        din3 => stage0_6_q0,
        din4 => or_ln48_reg_957_pp0_iter4_reg,
        dout => u_4_fu_680_p6);

    mul_mul_16ns_14ns_30_4_1_U23 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_824_p0,
        din1 => grp_fu_824_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_824_p2);

    mul_mul_16ns_14ns_30_4_1_U24 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_831_p0,
        din1 => grp_fu_831_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_831_p2);

    mul_mul_16s_14ns_16_4_1_U25 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_838_p0,
        din1 => grp_fu_838_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_838_p2);

    mul_mul_16s_14ns_16_4_1_U26 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_845_p0,
        din1 => grp_fu_845_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_845_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U27 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_851_p0,
        din1 => grp_fu_851_p1,
        din2 => grp_fu_851_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_851_p3);

    mac_muladd_16ns_14ns_30ns_31_4_1_U28 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_860_p0,
        din1 => grp_fu_860_p1,
        din2 => grp_fu_860_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_860_p3);

    flow_control_loop_pipe_sequential_init_U : component NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    n_1_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_301_p3 = ap_const_lv1_0))) then 
                    n_1_fu_100 <= n_11_fu_450_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_1_fu_100 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln69_1_reg_1038 <= add_ln69_1_fu_664_p2;
                icmp_ln64_1_reg_907_pp0_iter1_reg <= icmp_ln64_1_reg_907;
                icmp_ln64_1_reg_907_pp0_iter2_reg <= icmp_ln64_1_reg_907_pp0_iter1_reg;
                icmp_ln64_1_reg_907_pp0_iter3_reg <= icmp_ln64_1_reg_907_pp0_iter2_reg;
                icmp_ln64_1_reg_907_pp0_iter4_reg <= icmp_ln64_1_reg_907_pp0_iter3_reg;
                icmp_ln64_1_reg_907_pp0_iter5_reg <= icmp_ln64_1_reg_907_pp0_iter4_reg;
                lshr_ln2_reg_892_pp0_iter1_reg <= lshr_ln2_reg_892;
                lshr_ln2_reg_892_pp0_iter2_reg <= lshr_ln2_reg_892_pp0_iter1_reg;
                lshr_ln2_reg_892_pp0_iter3_reg <= lshr_ln2_reg_892_pp0_iter2_reg;
                lshr_ln52_2_reg_921_pp0_iter1_reg <= lshr_ln52_2_reg_921;
                lshr_ln52_2_reg_921_pp0_iter2_reg <= lshr_ln52_2_reg_921_pp0_iter1_reg;
                lshr_ln52_2_reg_921_pp0_iter3_reg <= lshr_ln52_2_reg_921_pp0_iter2_reg;
                lshr_ln52_2_reg_921_pp0_iter4_reg <= lshr_ln52_2_reg_921_pp0_iter3_reg;
                stage1_1_addr_2_reg_936_pp0_iter1_reg <= stage1_1_addr_2_reg_936;
                stage1_1_addr_2_reg_936_pp0_iter2_reg <= stage1_1_addr_2_reg_936_pp0_iter1_reg;
                stage1_1_addr_2_reg_936_pp0_iter3_reg <= stage1_1_addr_2_reg_936_pp0_iter2_reg;
                stage1_1_addr_2_reg_936_pp0_iter4_reg <= stage1_1_addr_2_reg_936_pp0_iter3_reg;
                stage1_1_addr_2_reg_936_pp0_iter5_reg <= stage1_1_addr_2_reg_936_pp0_iter4_reg;
                stage1_1_addr_reg_1059 <= zext_ln52_4_fu_670_p1(8 - 1 downto 0);
                stage1_2_addr_2_reg_916_pp0_iter1_reg <= stage1_2_addr_2_reg_916;
                stage1_2_addr_2_reg_916_pp0_iter2_reg <= stage1_2_addr_2_reg_916_pp0_iter1_reg;
                stage1_2_addr_2_reg_916_pp0_iter3_reg <= stage1_2_addr_2_reg_916_pp0_iter2_reg;
                stage1_2_addr_2_reg_916_pp0_iter4_reg <= stage1_2_addr_2_reg_916_pp0_iter3_reg;
                stage1_2_addr_2_reg_916_pp0_iter5_reg <= stage1_2_addr_2_reg_916_pp0_iter4_reg;
                stage1_2_addr_reg_1016 <= zext_ln52_1_fu_518_p1(8 - 1 downto 0);
                stage1_3_addr_2_reg_941_pp0_iter1_reg <= stage1_3_addr_2_reg_941;
                stage1_3_addr_2_reg_941_pp0_iter2_reg <= stage1_3_addr_2_reg_941_pp0_iter1_reg;
                stage1_3_addr_2_reg_941_pp0_iter3_reg <= stage1_3_addr_2_reg_941_pp0_iter2_reg;
                stage1_3_addr_2_reg_941_pp0_iter4_reg <= stage1_3_addr_2_reg_941_pp0_iter3_reg;
                stage1_3_addr_2_reg_941_pp0_iter5_reg <= stage1_3_addr_2_reg_941_pp0_iter4_reg;
                stage1_3_addr_reg_1064 <= zext_ln52_4_fu_670_p1(8 - 1 downto 0);
                stage1_addr_2_reg_911_pp0_iter1_reg <= stage1_addr_2_reg_911;
                stage1_addr_2_reg_911_pp0_iter2_reg <= stage1_addr_2_reg_911_pp0_iter1_reg;
                stage1_addr_2_reg_911_pp0_iter3_reg <= stage1_addr_2_reg_911_pp0_iter2_reg;
                stage1_addr_2_reg_911_pp0_iter4_reg <= stage1_addr_2_reg_911_pp0_iter3_reg;
                stage1_addr_2_reg_911_pp0_iter5_reg <= stage1_addr_2_reg_911_pp0_iter4_reg;
                stage1_addr_reg_1011 <= zext_ln52_1_fu_518_p1(8 - 1 downto 0);
                tmp2_54_reg_981 <= grp_fu_831_p2;
                tmp2_54_reg_981_pp0_iter3_reg <= tmp2_54_reg_981;
                tmp2_54_reg_981_pp0_iter4_reg <= tmp2_54_reg_981_pp0_iter3_reg;
                tmp2_reg_971 <= grp_fu_824_p2;
                tmp2_reg_971_pp0_iter3_reg <= tmp2_reg_971;
                tmp2_reg_971_pp0_iter4_reg <= tmp2_reg_971_pp0_iter3_reg;
                tmp_reg_876 <= ap_sig_allocacmp_n(9 downto 9);
                tmp_reg_876_pp0_iter1_reg <= tmp_reg_876;
                tmp_reg_876_pp0_iter2_reg <= tmp_reg_876_pp0_iter1_reg;
                tmp_reg_876_pp0_iter3_reg <= tmp_reg_876_pp0_iter2_reg;
                tmp_reg_876_pp0_iter4_reg <= tmp_reg_876_pp0_iter3_reg;
                trunc_ln48_reg_880_pp0_iter1_reg <= trunc_ln48_reg_880;
                trunc_ln48_reg_880_pp0_iter2_reg <= trunc_ln48_reg_880_pp0_iter1_reg;
                trunc_ln48_reg_880_pp0_iter3_reg <= trunc_ln48_reg_880_pp0_iter2_reg;
                trunc_ln48_reg_880_pp0_iter4_reg <= trunc_ln48_reg_880_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln69_5_reg_1069 <= add_ln69_5_fu_818_p2;
                icmp_ln64_reg_967_pp0_iter1_reg <= icmp_ln64_reg_967;
                icmp_ln64_reg_967_pp0_iter2_reg <= icmp_ln64_reg_967_pp0_iter1_reg;
                icmp_ln64_reg_967_pp0_iter3_reg <= icmp_ln64_reg_967_pp0_iter2_reg;
                icmp_ln64_reg_967_pp0_iter4_reg <= icmp_ln64_reg_967_pp0_iter3_reg;
                icmp_ln64_reg_967_pp0_iter5_reg <= icmp_ln64_reg_967_pp0_iter4_reg;
                mul_ln55_8_reg_996 <= grp_fu_845_p2;
                    or_ln48_reg_957_pp0_iter1_reg(1) <= or_ln48_reg_957(1);
                    or_ln48_reg_957_pp0_iter2_reg(1) <= or_ln48_reg_957_pp0_iter1_reg(1);
                    or_ln48_reg_957_pp0_iter3_reg(1) <= or_ln48_reg_957_pp0_iter2_reg(1);
                    or_ln48_reg_957_pp0_iter4_reg(1) <= or_ln48_reg_957_pp0_iter3_reg(1);
                u_1_reg_1026 <= u_1_fu_528_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_301_p3 = ap_const_lv1_0))) then
                icmp_ln64_1_reg_907 <= icmp_ln64_1_fu_394_p2;
                lshr_ln2_reg_892 <= i_fu_341_p2(9 downto 2);
                lshr_ln52_2_reg_921 <= i_7_fu_410_p2(9 downto 2);
                stage1_1_addr_2_reg_936 <= zext_ln54_8_fu_442_p1(8 - 1 downto 0);
                stage1_2_addr_2_reg_916 <= zext_ln54_2_fu_386_p1(8 - 1 downto 0);
                stage1_3_addr_2_reg_941 <= zext_ln54_8_fu_442_p1(8 - 1 downto 0);
                stage1_addr_2_reg_911 <= zext_ln54_2_fu_386_p1(8 - 1 downto 0);
                trunc_ln48_reg_880 <= trunc_ln48_fu_313_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_876 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln64_reg_967 <= icmp_ln64_fu_503_p2;
                    or_ln48_reg_957(1) <= or_ln48_fu_480_p2(1);
            end if;
        end if;
    end process;
    or_ln48_reg_957(0) <= '1';
    or_ln48_reg_957_pp0_iter1_reg(0) <= '1';
    or_ln48_reg_957_pp0_iter2_reg(0) <= '1';
    or_ln48_reg_957_pp0_iter3_reg(0) <= '1';
    or_ln48_reg_957_pp0_iter4_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter5_stage0, ap_idle_pp0_0to4, ap_idle_pp0_1to6, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    GMb_address0 <= zext_ln50_fu_355_p1(10 - 1 downto 0);

    GMb_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            GMb_ce0 <= ap_const_logic_1;
        else 
            GMb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_2_fu_426_p2 <= std_logic_vector(unsigned(i_7_fu_410_p2) + unsigned(ap_const_lv10_100));
    add_ln54_fu_370_p2 <= std_logic_vector(unsigned(i_fu_341_p2) + unsigned(ap_const_lv10_100));
    add_ln62_2_fu_593_p2 <= std_logic_vector(unsigned(zext_ln42_3_fu_545_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln62_8_fu_746_p2 <= std_logic_vector(unsigned(zext_ln42_9_fu_697_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln64_16_fu_770_p2 <= std_logic_vector(signed(tmp2_57_fu_736_p2) + signed(u_4_fu_680_p6));
    add_ln64_1_fu_630_p2 <= std_logic_vector(unsigned(select_ln64_fu_622_p3) + unsigned(add_ln64_fu_617_p2));
    add_ln64_6_fu_784_p2 <= std_logic_vector(unsigned(select_ln64_8_fu_776_p3) + unsigned(add_ln64_16_fu_770_p2));
    add_ln64_fu_617_p2 <= std_logic_vector(signed(tmp2_58_fu_583_p2) + signed(u_1_reg_1026));
    add_ln69_1_fu_664_p2 <= std_logic_vector(unsigned(select_ln69_fu_656_p3) + unsigned(trunc_ln68_fu_652_p1));
    add_ln69_5_fu_818_p2 <= std_logic_vector(unsigned(select_ln69_8_fu_810_p3) + unsigned(trunc_ln68_8_fu_806_p1));
    and_ln_fu_329_p3 <= (tmp_43_fu_321_p3 & ap_const_lv8_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, tmp_reg_876)
    begin
        if (((tmp_reg_876 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, tmp_reg_876_pp0_iter4_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_876_pp0_iter4_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_1_fu_100, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n <= n_1_fu_100;
        end if; 
    end process;

    grp_fu_824_p0 <= grp_fu_824_p00(16 - 1 downto 0);
    grp_fu_824_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_465_p5),30));
    grp_fu_824_p1 <= zext_ln41_fu_461_p1(14 - 1 downto 0);
    grp_fu_831_p0 <= grp_fu_831_p00(16 - 1 downto 0);
    grp_fu_831_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_485_p6),30));
    grp_fu_831_p1 <= zext_ln41_fu_461_p1(14 - 1 downto 0);
    grp_fu_838_p0 <= grp_fu_824_p2(16 - 1 downto 0);
    grp_fu_838_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_845_p0 <= grp_fu_831_p2(16 - 1 downto 0);
    grp_fu_845_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_851_p0 <= grp_fu_851_p00(16 - 1 downto 0);
    grp_fu_851_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55_1_fu_515_p0),30));
    grp_fu_851_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_851_p2 <= grp_fu_851_p20(30 - 1 downto 0);
    grp_fu_851_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_971_pp0_iter4_reg),31));
    grp_fu_860_p0 <= grp_fu_860_p00(16 - 1 downto 0);
    grp_fu_860_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln55_8_reg_996),30));
    grp_fu_860_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_860_p2 <= grp_fu_860_p20(30 - 1 downto 0);
    grp_fu_860_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_54_reg_981_pp0_iter4_reg),31));
    i_7_fu_410_p2 <= std_logic_vector(unsigned(zext_ln48_4_fu_406_p1) + unsigned(zext_ln48_1_fu_337_p1));
    i_fu_341_p2 <= std_logic_vector(unsigned(zext_ln48_1_fu_337_p1) + unsigned(zext_ln48_fu_317_p1));
    icmp_ln64_1_fu_394_p2 <= "1" when (trunc_ln48_fu_313_p1 = ap_const_lv2_0) else "0";
    icmp_ln64_fu_503_p2 <= "1" when (or_ln48_fu_480_p2 = ap_const_lv2_1) else "0";
    lshr_ln3_fu_376_p4 <= add_ln54_fu_370_p2(9 downto 2);
    lshr_ln54_2_fu_432_p4 <= add_ln54_2_fu_426_p2(9 downto 2);
    n_11_fu_450_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n) + unsigned(ap_const_lv10_2));
    or_ln48_1_fu_400_p2 <= (trunc_ln44_fu_309_p1 or ap_const_lv9_1);
    or_ln48_fu_480_p2 <= (trunc_ln48_reg_880 or ap_const_lv2_1);
    select_ln58_8_fu_728_p3 <= 
        ap_const_lv16_3001 when (tmp_47_fu_720_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln58_fu_575_p3 <= 
        ap_const_lv16_3001 when (tmp_44_fu_567_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln64_8_fu_776_p3 <= 
        ap_const_lv16_0 when (tmp_48_fu_762_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln64_fu_622_p3 <= 
        ap_const_lv16_0 when (tmp_45_fu_609_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln69_8_fu_810_p3 <= 
        ap_const_lv16_3001 when (tmp_49_fu_798_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln69_fu_656_p3 <= 
        ap_const_lv16_3001 when (tmp_46_fu_644_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln43_2_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_52_fu_557_p2),16));

        sext_ln43_3_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_58_fu_583_p2),18));

        sext_ln43_8_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_55_fu_710_p2),16));

        sext_ln43_9_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_57_fu_736_p2),18));

        sext_ln62_1_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_2_fu_593_p2),18));

        sext_ln62_4_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_8_fu_746_p2),18));

    stage0_4_address0 <= zext_ln52_4_fu_670_p1(8 - 1 downto 0);
    stage0_4_address1 <= zext_ln54_8_fu_442_p1(8 - 1 downto 0);

    stage0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_4_ce0 <= ap_const_logic_1;
        else 
            stage0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_4_ce1 <= ap_const_logic_1;
        else 
            stage0_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_5_address0 <= zext_ln52_1_fu_518_p1(8 - 1 downto 0);
    stage0_5_address1 <= zext_ln54_2_fu_386_p1(8 - 1 downto 0);

    stage0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_5_ce0 <= ap_const_logic_1;
        else 
            stage0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_5_ce1 <= ap_const_logic_1;
        else 
            stage0_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_6_address0 <= zext_ln52_4_fu_670_p1(8 - 1 downto 0);
    stage0_6_address1 <= zext_ln54_8_fu_442_p1(8 - 1 downto 0);

    stage0_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_6_ce0 <= ap_const_logic_1;
        else 
            stage0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_6_ce1 <= ap_const_logic_1;
        else 
            stage0_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_address0 <= zext_ln52_1_fu_518_p1(8 - 1 downto 0);
    stage0_address1 <= zext_ln54_2_fu_386_p1(8 - 1 downto 0);

    stage0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_ce0 <= ap_const_logic_1;
        else 
            stage0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_ce1 <= ap_const_logic_1;
        else 
            stage0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, stage1_1_addr_2_reg_936_pp0_iter5_reg, stage1_1_addr_reg_1059, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_1_address0 <= stage1_1_addr_2_reg_936_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage1_1_address0 <= stage1_1_addr_reg_1059;
        else 
            stage1_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    stage1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage1_1_ce0 <= ap_const_logic_1;
        else 
            stage1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, add_ln69_5_reg_1069, ap_block_pp0_stage0, ap_block_pp0_stage1, add_ln64_6_fu_784_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_1_d0 <= add_ln69_5_reg_1069;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage1_1_d0 <= add_ln64_6_fu_784_p2;
        else 
            stage1_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage1_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, icmp_ln64_reg_967_pp0_iter4_reg, icmp_ln64_reg_967_pp0_iter5_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln64_reg_967_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln64_reg_967_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage1_1_we0 <= ap_const_logic_1;
        else 
            stage1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, stage1_2_addr_2_reg_916_pp0_iter5_reg, stage1_2_addr_reg_1016, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                stage1_2_address0 <= stage1_2_addr_2_reg_916_pp0_iter5_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                stage1_2_address0 <= stage1_2_addr_reg_1016;
            else 
                stage1_2_address0 <= "XXXXXXXX";
            end if;
        else 
            stage1_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    stage1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage1_2_ce0 <= ap_const_logic_1;
        else 
            stage1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_2_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, add_ln69_1_reg_1038, ap_block_pp0_stage0, add_ln64_1_fu_630_p2, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                stage1_2_d0 <= add_ln69_1_reg_1038;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                stage1_2_d0 <= add_ln64_1_fu_630_p2;
            else 
                stage1_2_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            stage1_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage1_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, icmp_ln64_1_reg_907_pp0_iter4_reg, icmp_ln64_1_reg_907_pp0_iter5_reg, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_1_reg_907_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_1_reg_907_pp0_iter4_reg = ap_const_lv1_0)))) then 
            stage1_2_we0 <= ap_const_logic_1;
        else 
            stage1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, stage1_3_addr_2_reg_941_pp0_iter5_reg, stage1_3_addr_reg_1064, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_3_address0 <= stage1_3_addr_2_reg_941_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage1_3_address0 <= stage1_3_addr_reg_1064;
        else 
            stage1_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    stage1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage1_3_ce0 <= ap_const_logic_1;
        else 
            stage1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_3_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, add_ln69_5_reg_1069, ap_block_pp0_stage0, ap_block_pp0_stage1, add_ln64_6_fu_784_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_3_d0 <= add_ln69_5_reg_1069;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage1_3_d0 <= add_ln64_6_fu_784_p2;
        else 
            stage1_3_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage1_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, icmp_ln64_reg_967_pp0_iter4_reg, icmp_ln64_reg_967_pp0_iter5_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln64_reg_967_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln64_reg_967_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage1_3_we0 <= ap_const_logic_1;
        else 
            stage1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, stage1_addr_2_reg_911_pp0_iter5_reg, stage1_addr_reg_1011, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                stage1_address0 <= stage1_addr_2_reg_911_pp0_iter5_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                stage1_address0 <= stage1_addr_reg_1011;
            else 
                stage1_address0 <= "XXXXXXXX";
            end if;
        else 
            stage1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    stage1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage1_ce0 <= ap_const_logic_1;
        else 
            stage1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, add_ln69_1_reg_1038, ap_block_pp0_stage0, add_ln64_1_fu_630_p2, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                stage1_d0 <= add_ln69_1_reg_1038;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                stage1_d0 <= add_ln64_1_fu_630_p2;
            else 
                stage1_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            stage1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, icmp_ln64_1_reg_907_pp0_iter4_reg, icmp_ln64_1_reg_907_pp0_iter5_reg, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_1_reg_907_pp0_iter5_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_1_reg_907_pp0_iter4_reg = ap_const_lv1_1)))) then 
            stage1_we0 <= ap_const_logic_1;
        else 
            stage1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_37_fu_603_p2 <= std_logic_vector(signed(sext_ln62_1_fu_599_p1) + signed(sext_ln43_3_fu_589_p1));
    tmp1_38_fu_638_p2 <= std_logic_vector(unsigned(zext_ln42_2_fu_542_p1) - unsigned(sext_ln43_3_fu_589_p1));
    tmp1_40_fu_756_p2 <= std_logic_vector(signed(sext_ln62_4_fu_752_p1) + signed(sext_ln43_9_fu_742_p1));
    tmp1_41_fu_792_p2 <= std_logic_vector(unsigned(zext_ln42_8_fu_693_p1) - unsigned(sext_ln43_9_fu_742_p1));
    tmp2_52_fu_557_p2 <= std_logic_vector(unsigned(trunc_ln43_1_fu_548_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_55_fu_710_p2 <= std_logic_vector(unsigned(trunc_ln43_4_fu_701_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_57_fu_736_p2 <= std_logic_vector(unsigned(select_ln58_8_fu_728_p3) + unsigned(sext_ln43_8_fu_716_p1));
    tmp2_58_fu_583_p2 <= std_logic_vector(unsigned(select_ln58_fu_575_p3) + unsigned(sext_ln43_2_fu_563_p1));
    tmp_43_fu_321_p3 <= ap_sig_allocacmp_n(8 downto 8);
    tmp_44_fu_567_p3 <= tmp2_52_fu_557_p2(14 downto 14);
    tmp_45_fu_609_p3 <= tmp1_37_fu_603_p2(17 downto 17);
    tmp_46_fu_644_p3 <= tmp1_38_fu_638_p2(17 downto 17);
    tmp_47_fu_720_p3 <= tmp2_55_fu_710_p2(14 downto 14);
    tmp_48_fu_762_p3 <= tmp1_40_fu_756_p2(17 downto 17);
    tmp_49_fu_798_p3 <= tmp1_41_fu_792_p2(17 downto 17);
    tmp_fu_301_p3 <= ap_sig_allocacmp_n(9 downto 9);
    trunc_ln43_1_fu_548_p4 <= grp_fu_851_p3(30 downto 16);
    trunc_ln43_4_fu_701_p4 <= grp_fu_860_p3(30 downto 16);
    trunc_ln44_fu_309_p1 <= ap_sig_allocacmp_n(9 - 1 downto 0);
    trunc_ln48_fu_313_p1 <= ap_sig_allocacmp_n(2 - 1 downto 0);
    trunc_ln68_8_fu_806_p1 <= tmp1_41_fu_792_p2(16 - 1 downto 0);
    trunc_ln68_fu_652_p1 <= tmp1_38_fu_638_p2(16 - 1 downto 0);
    zext_ln41_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb_q0),30));
    zext_ln42_2_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_1_reg_1026),18));
    zext_ln42_3_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_1_reg_1026),17));
    zext_ln42_8_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_4_fu_680_p6),18));
    zext_ln42_9_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_4_fu_680_p6),17));
    zext_ln48_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_329_p3),10));
    zext_ln48_4_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_1_fu_400_p2),10));
    zext_ln48_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln44_fu_309_p1),10));
    zext_ln50_cast_fu_347_p3 <= (ap_const_lv1_1 & tmp_43_fu_321_p3);
    zext_ln50_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50_cast_fu_347_p3),64));
    zext_ln52_1_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_892_pp0_iter3_reg),64));
    zext_ln52_4_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln52_2_reg_921_pp0_iter4_reg),64));
    zext_ln54_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_376_p4),64));
    zext_ln54_8_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln54_2_fu_432_p4),64));
    zext_ln55_1_fu_515_p0 <= grp_fu_838_p2;
end behav;
