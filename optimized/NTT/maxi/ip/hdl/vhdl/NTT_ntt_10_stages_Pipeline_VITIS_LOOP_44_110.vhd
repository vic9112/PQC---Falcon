-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_110 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stage0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_ce0 : OUT STD_LOGIC;
    stage0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_4_ce0 : OUT STD_LOGIC;
    stage0_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_ce0 : OUT STD_LOGIC;
    out_buf_we0 : OUT STD_LOGIC;
    out_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_ce1 : OUT STD_LOGIC;
    out_buf_we1 : OUT STD_LOGIC;
    out_buf_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_5_ce0 : OUT STD_LOGIC;
    stage0_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_6_ce0 : OUT STD_LOGIC;
    stage0_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    GMb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    GMb_ce0 : OUT STD_LOGIC;
    GMb_q0 : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_110 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_reg_674 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal n_12_reg_669 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal n_12_reg_669_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_12_reg_669_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_12_reg_669_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_12_reg_669_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_gm_fu_218_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_reg_678 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln52_6_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_6_reg_688 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_6_reg_688_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_6_reg_688_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_6_reg_688_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_6_reg_688_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal i_gm_1_fu_270_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_1_reg_714 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_1_reg_714_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_1_reg_714_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_1_reg_714_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_1_reg_714_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal stage0_6_load_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_739 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_739_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_739_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_623_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_61_reg_749 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_61_reg_749_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_61_reg_749_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal u_reg_774 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln50_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln50_1_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln52_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_7_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_17_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_84 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_13_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_12 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln64_17_fu_419_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_fu_452_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_18_fu_576_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_6_fu_609_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln50_8_cast_fu_222_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln52_s_fu_235_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln50_9_cast_fu_275_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_fu_301_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln55_6_fu_304_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_310_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_fu_326_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_644_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_s_fu_337_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_59_fu_346_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_50_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_364_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_64_fu_372_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_17_fu_323_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_fu_382_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_fu_388_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_17_fu_378_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_42_fu_392_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_51_fu_398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_411_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_fu_406_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_fu_320_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_43_fu_426_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_52_fu_432_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_fu_444_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_8_fu_462_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln54_1_fu_482_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_653_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_4_fu_493_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_62_fu_502_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_53_fu_512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_9_fu_520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_18_fu_508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_65_fu_528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_19_fu_478_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_18_fu_538_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_6_fu_544_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_19_fu_534_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_45_fu_548_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_54_fu_554_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_9_fu_568_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_19_fu_562_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_18_fu_474_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_46_fu_583_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_55_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_9_fu_601_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_9_fu_597_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_616_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_616_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_623_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_623_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_630_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_630_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_637_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_644_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_644_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_644_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_653_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_653_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_653_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_616_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_616_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_623_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_623_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_644_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_644_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_653_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_653_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component NTT_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mac_muladd_16ns_14ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16ns_14ns_30_4_1_U174 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_616_p0,
        din1 => grp_fu_616_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p2);

    mul_mul_16ns_14ns_30_4_1_U175 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_623_p0,
        din1 => grp_fu_623_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_623_p2);

    mul_mul_16s_14ns_16_4_1_U176 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_630_p0,
        din1 => grp_fu_630_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_630_p2);

    mul_mul_16s_14ns_16_4_1_U177 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_637_p0,
        din1 => grp_fu_637_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U178 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_644_p0,
        din1 => grp_fu_644_p1,
        din2 => grp_fu_644_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_644_p3);

    mac_muladd_16ns_14ns_30ns_31_4_1_U179 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_653_p0,
        din1 => grp_fu_653_p1,
        din2 => grp_fu_653_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_653_p3);

    flow_control_loop_pipe_sequential_init_U : component NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    n_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_210_p3 = ap_const_lv1_0))) then 
                    n_fu_84 <= n_13_fu_251_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_84 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                    i_gm_1_reg_714_pp0_iter1_reg(8 downto 1) <= i_gm_1_reg_714(8 downto 1);
                    i_gm_1_reg_714_pp0_iter2_reg(8 downto 1) <= i_gm_1_reg_714_pp0_iter1_reg(8 downto 1);
                    i_gm_1_reg_714_pp0_iter3_reg(8 downto 1) <= i_gm_1_reg_714_pp0_iter2_reg(8 downto 1);
                    i_gm_1_reg_714_pp0_iter4_reg(8 downto 1) <= i_gm_1_reg_714_pp0_iter3_reg(8 downto 1);
                tmp2_61_reg_749 <= grp_fu_623_p2;
                tmp2_61_reg_749_pp0_iter3_reg <= tmp2_61_reg_749;
                tmp2_61_reg_749_pp0_iter4_reg <= tmp2_61_reg_749_pp0_iter3_reg;
                u_reg_774 <= stage0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_674 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    i_gm_1_reg_714(8 downto 1) <= i_gm_1_fu_270_p2(8 downto 1);
                stage0_6_load_reg_724 <= stage0_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_210_p3 = ap_const_lv1_0))) then
                i_gm_reg_678 <= i_gm_fu_218_p1;
                    zext_ln52_6_reg_688(7 downto 0) <= zext_ln52_6_fu_245_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                n_12_reg_669 <= ap_sig_allocacmp_n_12;
                n_12_reg_669_pp0_iter1_reg <= n_12_reg_669;
                n_12_reg_669_pp0_iter2_reg <= n_12_reg_669_pp0_iter1_reg;
                n_12_reg_669_pp0_iter3_reg <= n_12_reg_669_pp0_iter2_reg;
                n_12_reg_669_pp0_iter4_reg <= n_12_reg_669_pp0_iter3_reg;
                tmp2_reg_739 <= grp_fu_616_p2;
                tmp2_reg_739_pp0_iter3_reg <= tmp2_reg_739;
                tmp2_reg_739_pp0_iter4_reg <= tmp2_reg_739_pp0_iter3_reg;
                tmp_reg_674 <= ap_sig_allocacmp_n_12(9 downto 9);
                    zext_ln52_6_reg_688_pp0_iter1_reg(7 downto 0) <= zext_ln52_6_reg_688(7 downto 0);
                    zext_ln52_6_reg_688_pp0_iter2_reg(7 downto 0) <= zext_ln52_6_reg_688_pp0_iter1_reg(7 downto 0);
                    zext_ln52_6_reg_688_pp0_iter3_reg(7 downto 0) <= zext_ln52_6_reg_688_pp0_iter2_reg(7 downto 0);
                    zext_ln52_6_reg_688_pp0_iter4_reg(7 downto 0) <= zext_ln52_6_reg_688_pp0_iter3_reg(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln52_6_reg_688(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_6_reg_688_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_6_reg_688_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_6_reg_688_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln52_6_reg_688_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    i_gm_1_reg_714(0) <= '1';
    i_gm_1_reg_714_pp0_iter1_reg(0) <= '1';
    i_gm_1_reg_714_pp0_iter2_reg(0) <= '1';
    i_gm_1_reg_714_pp0_iter3_reg(0) <= '1';
    i_gm_1_reg_714_pp0_iter4_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    GMb_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln50_fu_230_p1, ap_block_pp0_stage0, zext_ln50_1_fu_283_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                GMb_address0 <= zext_ln50_1_fu_283_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                GMb_address0 <= zext_ln50_fu_230_p1(10 - 1 downto 0);
            else 
                GMb_address0 <= "XXXXXXXXXX";
            end if;
        else 
            GMb_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    GMb_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            GMb_ce0 <= ap_const_logic_1;
        else 
            GMb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln62_18_fu_538_p2 <= std_logic_vector(unsigned(zext_ln42_19_fu_478_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln62_fu_382_p2 <= std_logic_vector(unsigned(zext_ln42_17_fu_323_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln64_17_fu_419_p2 <= std_logic_vector(unsigned(select_ln64_fu_411_p3) + unsigned(add_ln64_fu_406_p2));
    add_ln64_18_fu_576_p2 <= std_logic_vector(unsigned(select_ln64_9_fu_568_p3) + unsigned(add_ln64_19_fu_562_p2));
    add_ln64_19_fu_562_p2 <= std_logic_vector(unsigned(stage0_5_q0) + unsigned(tmp2_65_fu_528_p2));
    add_ln64_fu_406_p2 <= std_logic_vector(unsigned(u_reg_774) + unsigned(tmp2_64_fu_372_p2));
    add_ln69_6_fu_609_p2 <= std_logic_vector(unsigned(select_ln69_9_fu_601_p3) + unsigned(trunc_ln68_9_fu_597_p1));
    add_ln69_fu_452_p2 <= std_logic_vector(unsigned(select_ln69_fu_444_p3) + unsigned(trunc_ln68_fu_440_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, tmp_reg_674)
    begin
        if (((tmp_reg_674 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_12_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_12 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n_12 <= n_fu_84;
        end if; 
    end process;

    grp_fu_616_p0 <= grp_fu_616_p00(16 - 1 downto 0);
    grp_fu_616_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage0_4_q0),30));
    grp_fu_616_p1 <= grp_fu_616_p10(14 - 1 downto 0);
    grp_fu_616_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb_q0),30));
    grp_fu_623_p0 <= grp_fu_623_p00(16 - 1 downto 0);
    grp_fu_623_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage0_6_load_reg_724),30));
    grp_fu_623_p1 <= grp_fu_623_p10(14 - 1 downto 0);
    grp_fu_623_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb_q0),30));
    grp_fu_630_p0 <= grp_fu_616_p2(16 - 1 downto 0);
    grp_fu_630_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_637_p0 <= grp_fu_623_p2(16 - 1 downto 0);
    grp_fu_637_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_644_p0 <= grp_fu_644_p00(16 - 1 downto 0);
    grp_fu_644_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55_fu_301_p0),30));
    grp_fu_644_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_644_p2 <= grp_fu_644_p20(30 - 1 downto 0);
    grp_fu_644_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_739_pp0_iter4_reg),31));
    grp_fu_653_p0 <= grp_fu_653_p00(16 - 1 downto 0);
    grp_fu_653_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55_6_fu_304_p0),30));
    grp_fu_653_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_653_p2 <= grp_fu_653_p20(30 - 1 downto 0);
    grp_fu_653_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_61_reg_749_pp0_iter4_reg),31));
    i_8_fu_462_p3 <= (i_gm_1_reg_714_pp0_iter4_reg & ap_const_lv1_0);
    i_fu_310_p2 <= std_logic_vector(shift_left(unsigned(n_12_reg_669_pp0_iter4_reg),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    i_gm_1_fu_270_p2 <= (i_gm_reg_678 or ap_const_lv9_1);
    i_gm_fu_218_p1 <= ap_sig_allocacmp_n_12(9 - 1 downto 0);
    lshr_ln52_s_fu_235_p4 <= ap_sig_allocacmp_n_12(8 downto 1);
    n_13_fu_251_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_12) + unsigned(ap_const_lv10_2));
    or_ln54_1_fu_482_p2 <= (i_8_fu_462_p3 or ap_const_lv10_1);
    or_ln54_fu_326_p2 <= (i_fu_310_p2 or ap_const_lv10_1);

    out_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln54_fu_332_p1, zext_ln54_17_fu_488_p1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_address0 <= zext_ln54_17_fu_488_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_buf_address0 <= zext_ln54_fu_332_p1(10 - 1 downto 0);
            else 
                out_buf_address0 <= "XXXXXXXXXX";
            end if;
        else 
            out_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln52_fu_315_p1, zext_ln52_7_fu_469_p1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_address1 <= zext_ln52_7_fu_469_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_buf_address1 <= zext_ln52_fu_315_p1(10 - 1 downto 0);
            else 
                out_buf_address1 <= "XXXXXXXXXX";
            end if;
        else 
            out_buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_ce0 <= ap_const_logic_1;
        else 
            out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_ce1 <= ap_const_logic_1;
        else 
            out_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, add_ln69_fu_452_p2, add_ln69_6_fu_609_p2)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_d0 <= add_ln69_6_fu_609_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_buf_d0 <= add_ln69_fu_452_p2;
            else 
                out_buf_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            out_buf_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, add_ln64_17_fu_419_p2, add_ln64_18_fu_576_p2)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_d1 <= add_ln64_18_fu_576_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_buf_d1 <= add_ln64_17_fu_419_p2;
            else 
                out_buf_d1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            out_buf_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_we0 <= ap_const_logic_1;
        else 
            out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_we1 <= ap_const_logic_1;
        else 
            out_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln58_9_fu_520_p3 <= 
        ap_const_lv16_3001 when (tmp_53_fu_512_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln58_fu_364_p3 <= 
        ap_const_lv16_3001 when (tmp_50_fu_356_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln64_9_fu_568_p3 <= 
        ap_const_lv16_0 when (tmp_54_fu_554_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln64_fu_411_p3 <= 
        ap_const_lv16_0 when (tmp_51_fu_398_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln69_9_fu_601_p3 <= 
        ap_const_lv16_3001 when (tmp_55_fu_589_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln69_fu_444_p3 <= 
        ap_const_lv16_3001 when (tmp_52_fu_432_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln43_17_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_64_fu_372_p2),18));

        sext_ln43_18_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_62_fu_502_p2),16));

        sext_ln43_19_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_65_fu_528_p2),18));

        sext_ln43_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_59_fu_346_p2),16));

        sext_ln62_6_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_18_fu_538_p2),18));

        sext_ln62_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_fu_382_p2),18));

    stage0_4_address0 <= zext_ln52_6_fu_245_p1(8 - 1 downto 0);

    stage0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_4_ce0 <= ap_const_logic_1;
        else 
            stage0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_5_address0 <= zext_ln52_6_reg_688_pp0_iter4_reg(8 - 1 downto 0);

    stage0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_5_ce0 <= ap_const_logic_1;
        else 
            stage0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_6_address0 <= zext_ln52_6_fu_245_p1(8 - 1 downto 0);

    stage0_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_6_ce0 <= ap_const_logic_1;
        else 
            stage0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage0_address0 <= zext_ln52_6_reg_688_pp0_iter3_reg(8 - 1 downto 0);

    stage0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_ce0 <= ap_const_logic_1;
        else 
            stage0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_42_fu_392_p2 <= std_logic_vector(signed(sext_ln62_fu_388_p1) + signed(sext_ln43_17_fu_378_p1));
    tmp1_43_fu_426_p2 <= std_logic_vector(unsigned(zext_ln42_fu_320_p1) - unsigned(sext_ln43_17_fu_378_p1));
    tmp1_45_fu_548_p2 <= std_logic_vector(signed(sext_ln62_6_fu_544_p1) + signed(sext_ln43_19_fu_534_p1));
    tmp1_46_fu_583_p2 <= std_logic_vector(unsigned(zext_ln42_18_fu_474_p1) - unsigned(sext_ln43_19_fu_534_p1));
    tmp2_59_fu_346_p2 <= std_logic_vector(unsigned(trunc_ln43_s_fu_337_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_62_fu_502_p2 <= std_logic_vector(unsigned(trunc_ln43_4_fu_493_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_64_fu_372_p2 <= std_logic_vector(unsigned(select_ln58_fu_364_p3) + unsigned(sext_ln43_fu_352_p1));
    tmp2_65_fu_528_p2 <= std_logic_vector(unsigned(select_ln58_9_fu_520_p3) + unsigned(sext_ln43_18_fu_508_p1));
    tmp_50_fu_356_p3 <= tmp2_59_fu_346_p2(14 downto 14);
    tmp_51_fu_398_p3 <= tmp1_42_fu_392_p2(17 downto 17);
    tmp_52_fu_432_p3 <= tmp1_43_fu_426_p2(17 downto 17);
    tmp_53_fu_512_p3 <= tmp2_62_fu_502_p2(14 downto 14);
    tmp_54_fu_554_p3 <= tmp1_45_fu_548_p2(17 downto 17);
    tmp_55_fu_589_p3 <= tmp1_46_fu_583_p2(17 downto 17);
    tmp_fu_210_p3 <= ap_sig_allocacmp_n_12(9 downto 9);
    trunc_ln43_4_fu_493_p4 <= grp_fu_653_p3(30 downto 16);
    trunc_ln43_s_fu_337_p4 <= grp_fu_644_p3(30 downto 16);
    trunc_ln68_9_fu_597_p1 <= tmp1_46_fu_583_p2(16 - 1 downto 0);
    trunc_ln68_fu_440_p1 <= tmp1_43_fu_426_p2(16 - 1 downto 0);
    zext_ln42_17_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_774),17));
    zext_ln42_18_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage0_5_q0),18));
    zext_ln42_19_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage0_5_q0),17));
    zext_ln42_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_774),18));
    zext_ln50_1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50_9_cast_fu_275_p3),64));
    zext_ln50_8_cast_fu_222_p3 <= (ap_const_lv1_1 & i_gm_fu_218_p1);
    zext_ln50_9_cast_fu_275_p3 <= (ap_const_lv1_1 & i_gm_1_fu_270_p2);
    zext_ln50_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50_8_cast_fu_222_p3),64));
    zext_ln52_6_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln52_s_fu_235_p4),64));
    zext_ln52_7_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_fu_462_p3),64));
    zext_ln52_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_310_p2),64));
    zext_ln54_17_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_1_fu_482_p2),64));
    zext_ln54_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln54_fu_326_p2),64));
    zext_ln55_6_fu_304_p0 <= grp_fu_637_p2;
    zext_ln55_fu_301_p0 <= grp_fu_630_p2;
end behav;
