-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stage0_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_4_ce0 : OUT STD_LOGIC;
    stage0_4_we0 : OUT STD_LOGIC;
    stage0_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_6_ce0 : OUT STD_LOGIC;
    stage0_6_we0 : OUT STD_LOGIC;
    stage0_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage1_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_1_ce0 : OUT STD_LOGIC;
    stage1_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_1_ce1 : OUT STD_LOGIC;
    stage1_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_3_ce0 : OUT STD_LOGIC;
    stage1_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_3_ce1 : OUT STD_LOGIC;
    stage1_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_ce0 : OUT STD_LOGIC;
    stage0_we0 : OUT STD_LOGIC;
    stage0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage0_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage0_5_ce0 : OUT STD_LOGIC;
    stage0_5_we0 : OUT STD_LOGIC;
    stage0_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    stage1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_ce0 : OUT STD_LOGIC;
    stage1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_ce1 : OUT STD_LOGIC;
    stage1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_2_ce0 : OUT STD_LOGIC;
    stage1_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    stage1_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    stage1_2_ce1 : OUT STD_LOGIC;
    stage1_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    GMb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    GMb_ce0 : OUT STD_LOGIC;
    GMb_q0 : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of NTT_ntt_10_stages_Pipeline_VITIS_LOOP_44_13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_fu_305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_882_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_882_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_882_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_882_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln48_fu_317_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_886 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_886_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_886_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_886_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln48_reg_886_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln52_1_reg_898 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_1_reg_898_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_1_reg_898_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_1_reg_898_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln64_2_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_2_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_2_reg_913_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_2_reg_913_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_2_reg_913_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_2_reg_913_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_2_reg_913_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stage0_addr_reg_917 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_addr_reg_917_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_addr_reg_917_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_addr_reg_917_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_addr_reg_917_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_addr_reg_917_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_5_addr_6_reg_922 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_5_addr_6_reg_922_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_5_addr_6_reg_922_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_5_addr_6_reg_922_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_5_addr_6_reg_922_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_5_addr_6_reg_922_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_4_reg_927 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_4_reg_927_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_4_reg_927_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_4_reg_927_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln52_4_reg_927_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_4_addr_6_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_4_addr_6_reg_942_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_4_addr_6_reg_942_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_4_addr_6_reg_942_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_4_addr_6_reg_942_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_4_addr_6_reg_942_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_6_reg_947 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_6_reg_947_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_6_reg_947_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_6_reg_947_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_6_reg_947_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_6_reg_947_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln41_fu_467_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal or_ln48_2_fu_486_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_2_reg_963 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_2_reg_963_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_2_reg_963_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_2_reg_963_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln48_2_reg_963_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln64_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_973_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_973_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_973_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_973_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_973_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_830_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_977 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_977_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_977_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_837_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_47_reg_987 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_47_reg_987_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_47_reg_987_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_851_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_12_reg_1002 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage0_addr_4_reg_1017 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_5_addr_reg_1022 : STD_LOGIC_VECTOR (7 downto 0);
    signal u_3_fu_534_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_3_reg_1032 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_fu_670_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal stage0_4_addr_reg_1065 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_6_addr_reg_1070 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln69_fu_824_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_reg_1075 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln50_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln54_6_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_12_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_3_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_2_fu_104 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_10_fu_456_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln64_2_fu_636_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal add_ln64_8_fu_790_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln44_fu_313_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_325_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln48_1_fu_335_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_3_fu_343_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln48_2_fu_321_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_1_cast_fu_353_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_347_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_1_fu_376_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln54_1_fu_382_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln48_3_fu_406_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_7_fu_412_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_fu_416_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_4_fu_432_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln54_4_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_471_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_491_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln55_3_fu_521_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_844_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_857_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_3_fu_554_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_45_fu_563_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_37_fu_573_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_581_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_6_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_51_fu_589_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_7_fu_551_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_6_fu_599_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_3_fu_605_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_7_fu_595_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_32_fu_609_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_38_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_628_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_fu_623_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_6_fu_548_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_33_fu_644_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_39_fu_650_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_fu_662_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_fu_658_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_fu_686_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_866_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_6_fu_707_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_48_fu_716_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_40_fu_726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_7_fu_734_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_12_fu_722_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_50_fu_742_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_13_fu_703_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln62_12_fu_752_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln62_fu_758_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln43_13_fu_748_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_35_fu_762_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_41_fu_768_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_7_fu_782_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_15_fu_776_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_12_fu_699_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_36_fu_798_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_42_fu_804_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_7_fu_816_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln68_7_fu_812_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_830_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_830_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_837_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_837_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_844_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_844_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_851_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_851_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_857_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_857_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_857_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_866_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_866_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_866_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_830_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_837_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_857_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_857_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_866_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_866_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NTT_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component NTT_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mac_muladd_16ns_14ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_16_1_1_U42 : component NTT_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => stage1_q1,
        din1 => ap_const_lv16_0,
        din2 => stage1_2_q1,
        din3 => trunc_ln48_reg_886,
        dout => tmp_3_fu_471_p5);

    mux_42_16_1_1_U43 : component NTT_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => stage1_1_q1,
        din2 => ap_const_lv16_0,
        din3 => stage1_3_q1,
        din4 => or_ln48_2_fu_486_p2,
        dout => tmp_9_fu_491_p6);

    mux_32_16_1_1_U44 : component NTT_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => stage1_q0,
        din1 => ap_const_lv16_0,
        din2 => stage1_2_q0,
        din3 => trunc_ln48_reg_886_pp0_iter4_reg,
        dout => u_3_fu_534_p5);

    mux_42_16_1_1_U45 : component NTT_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => stage1_1_q0,
        din2 => ap_const_lv16_0,
        din3 => stage1_3_q0,
        din4 => or_ln48_2_reg_963_pp0_iter4_reg,
        dout => u_fu_686_p6);

    mul_mul_16ns_14ns_30_4_1_U46 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_830_p0,
        din1 => grp_fu_830_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_830_p2);

    mul_mul_16ns_14ns_30_4_1_U47 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_837_p0,
        din1 => grp_fu_837_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_837_p2);

    mul_mul_16s_14ns_16_4_1_U48 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_844_p0,
        din1 => grp_fu_844_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_844_p2);

    mul_mul_16s_14ns_16_4_1_U49 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_851_p0,
        din1 => grp_fu_851_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_851_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U50 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_857_p0,
        din1 => grp_fu_857_p1,
        din2 => grp_fu_857_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_857_p3);

    mac_muladd_16ns_14ns_30ns_31_4_1_U51 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_866_p0,
        din1 => grp_fu_866_p1,
        din2 => grp_fu_866_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_866_p3);

    flow_control_loop_pipe_sequential_init_U : component NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    n_2_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_305_p3 = ap_const_lv1_0))) then 
                    n_2_fu_104 <= n_10_fu_456_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_2_fu_104 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln69_3_reg_1044 <= add_ln69_3_fu_670_p2;
                icmp_ln64_2_reg_913_pp0_iter1_reg <= icmp_ln64_2_reg_913;
                icmp_ln64_2_reg_913_pp0_iter2_reg <= icmp_ln64_2_reg_913_pp0_iter1_reg;
                icmp_ln64_2_reg_913_pp0_iter3_reg <= icmp_ln64_2_reg_913_pp0_iter2_reg;
                icmp_ln64_2_reg_913_pp0_iter4_reg <= icmp_ln64_2_reg_913_pp0_iter3_reg;
                icmp_ln64_2_reg_913_pp0_iter5_reg <= icmp_ln64_2_reg_913_pp0_iter4_reg;
                lshr_ln52_1_reg_898_pp0_iter1_reg <= lshr_ln52_1_reg_898;
                lshr_ln52_1_reg_898_pp0_iter2_reg <= lshr_ln52_1_reg_898_pp0_iter1_reg;
                lshr_ln52_1_reg_898_pp0_iter3_reg <= lshr_ln52_1_reg_898_pp0_iter2_reg;
                lshr_ln52_4_reg_927_pp0_iter1_reg <= lshr_ln52_4_reg_927;
                lshr_ln52_4_reg_927_pp0_iter2_reg <= lshr_ln52_4_reg_927_pp0_iter1_reg;
                lshr_ln52_4_reg_927_pp0_iter3_reg <= lshr_ln52_4_reg_927_pp0_iter2_reg;
                lshr_ln52_4_reg_927_pp0_iter4_reg <= lshr_ln52_4_reg_927_pp0_iter3_reg;
                stage0_4_addr_6_reg_942_pp0_iter1_reg <= stage0_4_addr_6_reg_942;
                stage0_4_addr_6_reg_942_pp0_iter2_reg <= stage0_4_addr_6_reg_942_pp0_iter1_reg;
                stage0_4_addr_6_reg_942_pp0_iter3_reg <= stage0_4_addr_6_reg_942_pp0_iter2_reg;
                stage0_4_addr_6_reg_942_pp0_iter4_reg <= stage0_4_addr_6_reg_942_pp0_iter3_reg;
                stage0_4_addr_6_reg_942_pp0_iter5_reg <= stage0_4_addr_6_reg_942_pp0_iter4_reg;
                stage0_4_addr_reg_1065 <= zext_ln52_fu_676_p1(8 - 1 downto 0);
                stage0_5_addr_6_reg_922_pp0_iter1_reg <= stage0_5_addr_6_reg_922;
                stage0_5_addr_6_reg_922_pp0_iter2_reg <= stage0_5_addr_6_reg_922_pp0_iter1_reg;
                stage0_5_addr_6_reg_922_pp0_iter3_reg <= stage0_5_addr_6_reg_922_pp0_iter2_reg;
                stage0_5_addr_6_reg_922_pp0_iter4_reg <= stage0_5_addr_6_reg_922_pp0_iter3_reg;
                stage0_5_addr_6_reg_922_pp0_iter5_reg <= stage0_5_addr_6_reg_922_pp0_iter4_reg;
                stage0_5_addr_reg_1022 <= zext_ln52_3_fu_524_p1(8 - 1 downto 0);
                stage0_6_addr_6_reg_947_pp0_iter1_reg <= stage0_6_addr_6_reg_947;
                stage0_6_addr_6_reg_947_pp0_iter2_reg <= stage0_6_addr_6_reg_947_pp0_iter1_reg;
                stage0_6_addr_6_reg_947_pp0_iter3_reg <= stage0_6_addr_6_reg_947_pp0_iter2_reg;
                stage0_6_addr_6_reg_947_pp0_iter4_reg <= stage0_6_addr_6_reg_947_pp0_iter3_reg;
                stage0_6_addr_6_reg_947_pp0_iter5_reg <= stage0_6_addr_6_reg_947_pp0_iter4_reg;
                stage0_6_addr_reg_1070 <= zext_ln52_fu_676_p1(8 - 1 downto 0);
                stage0_addr_4_reg_1017 <= zext_ln52_3_fu_524_p1(8 - 1 downto 0);
                stage0_addr_reg_917_pp0_iter1_reg <= stage0_addr_reg_917;
                stage0_addr_reg_917_pp0_iter2_reg <= stage0_addr_reg_917_pp0_iter1_reg;
                stage0_addr_reg_917_pp0_iter3_reg <= stage0_addr_reg_917_pp0_iter2_reg;
                stage0_addr_reg_917_pp0_iter4_reg <= stage0_addr_reg_917_pp0_iter3_reg;
                stage0_addr_reg_917_pp0_iter5_reg <= stage0_addr_reg_917_pp0_iter4_reg;
                tmp2_47_reg_987 <= grp_fu_837_p2;
                tmp2_47_reg_987_pp0_iter3_reg <= tmp2_47_reg_987;
                tmp2_47_reg_987_pp0_iter4_reg <= tmp2_47_reg_987_pp0_iter3_reg;
                tmp2_reg_977 <= grp_fu_830_p2;
                tmp2_reg_977_pp0_iter3_reg <= tmp2_reg_977;
                tmp2_reg_977_pp0_iter4_reg <= tmp2_reg_977_pp0_iter3_reg;
                tmp_reg_882 <= ap_sig_allocacmp_n(9 downto 9);
                tmp_reg_882_pp0_iter1_reg <= tmp_reg_882;
                tmp_reg_882_pp0_iter2_reg <= tmp_reg_882_pp0_iter1_reg;
                tmp_reg_882_pp0_iter3_reg <= tmp_reg_882_pp0_iter2_reg;
                tmp_reg_882_pp0_iter4_reg <= tmp_reg_882_pp0_iter3_reg;
                trunc_ln48_reg_886_pp0_iter1_reg <= trunc_ln48_reg_886;
                trunc_ln48_reg_886_pp0_iter2_reg <= trunc_ln48_reg_886_pp0_iter1_reg;
                trunc_ln48_reg_886_pp0_iter3_reg <= trunc_ln48_reg_886_pp0_iter2_reg;
                trunc_ln48_reg_886_pp0_iter4_reg <= trunc_ln48_reg_886_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln69_reg_1075 <= add_ln69_fu_824_p2;
                icmp_ln64_reg_973_pp0_iter1_reg <= icmp_ln64_reg_973;
                icmp_ln64_reg_973_pp0_iter2_reg <= icmp_ln64_reg_973_pp0_iter1_reg;
                icmp_ln64_reg_973_pp0_iter3_reg <= icmp_ln64_reg_973_pp0_iter2_reg;
                icmp_ln64_reg_973_pp0_iter4_reg <= icmp_ln64_reg_973_pp0_iter3_reg;
                icmp_ln64_reg_973_pp0_iter5_reg <= icmp_ln64_reg_973_pp0_iter4_reg;
                mul_ln55_12_reg_1002 <= grp_fu_851_p2;
                    or_ln48_2_reg_963_pp0_iter1_reg(1) <= or_ln48_2_reg_963(1);
                    or_ln48_2_reg_963_pp0_iter2_reg(1) <= or_ln48_2_reg_963_pp0_iter1_reg(1);
                    or_ln48_2_reg_963_pp0_iter3_reg(1) <= or_ln48_2_reg_963_pp0_iter2_reg(1);
                    or_ln48_2_reg_963_pp0_iter4_reg(1) <= or_ln48_2_reg_963_pp0_iter3_reg(1);
                u_3_reg_1032 <= u_3_fu_534_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_305_p3 = ap_const_lv1_0))) then
                icmp_ln64_2_reg_913 <= icmp_ln64_2_fu_400_p2;
                lshr_ln52_1_reg_898 <= i_fu_347_p2(9 downto 2);
                lshr_ln52_4_reg_927 <= i_6_fu_416_p2(9 downto 2);
                stage0_4_addr_6_reg_942 <= zext_ln54_12_fu_448_p1(8 - 1 downto 0);
                stage0_5_addr_6_reg_922 <= zext_ln54_6_fu_392_p1(8 - 1 downto 0);
                stage0_6_addr_6_reg_947 <= zext_ln54_12_fu_448_p1(8 - 1 downto 0);
                stage0_addr_reg_917 <= zext_ln54_6_fu_392_p1(8 - 1 downto 0);
                trunc_ln48_reg_886 <= trunc_ln48_fu_317_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_882 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln64_reg_973 <= icmp_ln64_fu_509_p2;
                    or_ln48_2_reg_963(1) <= or_ln48_2_fu_486_p2(1);
            end if;
        end if;
    end process;
    or_ln48_2_reg_963(0) <= '1';
    or_ln48_2_reg_963_pp0_iter1_reg(0) <= '1';
    or_ln48_2_reg_963_pp0_iter2_reg(0) <= '1';
    or_ln48_2_reg_963_pp0_iter3_reg(0) <= '1';
    or_ln48_2_reg_963_pp0_iter4_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter5_stage0, ap_idle_pp0_0to4, ap_idle_pp0_1to6, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    GMb_address0 <= zext_ln50_fu_361_p1(10 - 1 downto 0);

    GMb_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            GMb_ce0 <= ap_const_logic_1;
        else 
            GMb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_1_fu_376_p2 <= std_logic_vector(unsigned(i_fu_347_p2) + unsigned(ap_const_lv10_80));
    add_ln54_4_fu_432_p2 <= std_logic_vector(unsigned(i_6_fu_416_p2) + unsigned(ap_const_lv10_80));
    add_ln62_12_fu_752_p2 <= std_logic_vector(unsigned(zext_ln42_13_fu_703_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln62_6_fu_599_p2 <= std_logic_vector(unsigned(zext_ln42_7_fu_551_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln64_15_fu_776_p2 <= std_logic_vector(signed(tmp2_50_fu_742_p2) + signed(u_fu_686_p6));
    add_ln64_2_fu_636_p2 <= std_logic_vector(unsigned(select_ln64_fu_628_p3) + unsigned(add_ln64_fu_623_p2));
    add_ln64_8_fu_790_p2 <= std_logic_vector(unsigned(select_ln64_7_fu_782_p3) + unsigned(add_ln64_15_fu_776_p2));
    add_ln64_fu_623_p2 <= std_logic_vector(signed(tmp2_51_fu_589_p2) + signed(u_3_reg_1032));
    add_ln69_3_fu_670_p2 <= std_logic_vector(unsigned(select_ln69_fu_662_p3) + unsigned(trunc_ln68_fu_658_p1));
    add_ln69_fu_824_p2 <= std_logic_vector(unsigned(select_ln69_7_fu_816_p3) + unsigned(trunc_ln68_7_fu_812_p1));
    and_ln48_1_fu_335_p3 <= (tmp_s_fu_325_p4 & ap_const_lv7_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, tmp_reg_882)
    begin
        if (((tmp_reg_882 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, tmp_reg_882_pp0_iter4_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_882_pp0_iter4_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_2_fu_104, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n <= n_2_fu_104;
        end if; 
    end process;

    grp_fu_830_p0 <= grp_fu_830_p00(16 - 1 downto 0);
    grp_fu_830_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_471_p5),30));
    grp_fu_830_p1 <= zext_ln41_fu_467_p1(14 - 1 downto 0);
    grp_fu_837_p0 <= grp_fu_837_p00(16 - 1 downto 0);
    grp_fu_837_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_491_p6),30));
    grp_fu_837_p1 <= zext_ln41_fu_467_p1(14 - 1 downto 0);
    grp_fu_844_p0 <= grp_fu_830_p2(16 - 1 downto 0);
    grp_fu_844_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_851_p0 <= grp_fu_837_p2(16 - 1 downto 0);
    grp_fu_851_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_857_p0 <= grp_fu_857_p00(16 - 1 downto 0);
    grp_fu_857_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln55_3_fu_521_p0),30));
    grp_fu_857_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_857_p2 <= grp_fu_857_p20(30 - 1 downto 0);
    grp_fu_857_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_977_pp0_iter4_reg),31));
    grp_fu_866_p0 <= grp_fu_866_p00(16 - 1 downto 0);
    grp_fu_866_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln55_12_reg_1002),30));
    grp_fu_866_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_866_p2 <= grp_fu_866_p20(30 - 1 downto 0);
    grp_fu_866_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_47_reg_987_pp0_iter4_reg),31));
    i_6_fu_416_p2 <= std_logic_vector(unsigned(zext_ln48_7_fu_412_p1) + unsigned(zext_ln48_3_fu_343_p1));
    i_fu_347_p2 <= std_logic_vector(unsigned(zext_ln48_3_fu_343_p1) + unsigned(zext_ln48_2_fu_321_p1));
    icmp_ln64_2_fu_400_p2 <= "1" when (trunc_ln48_fu_317_p1 = ap_const_lv2_0) else "0";
    icmp_ln64_fu_509_p2 <= "1" when (or_ln48_2_fu_486_p2 = ap_const_lv2_1) else "0";
    lshr_ln54_1_fu_382_p4 <= add_ln54_1_fu_376_p2(9 downto 2);
    lshr_ln54_4_fu_438_p4 <= add_ln54_4_fu_432_p2(9 downto 2);
    n_10_fu_456_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n) + unsigned(ap_const_lv10_2));
    or_ln48_2_fu_486_p2 <= (trunc_ln48_reg_886 or ap_const_lv2_1);
    or_ln48_3_fu_406_p2 <= (trunc_ln44_fu_313_p1 or ap_const_lv9_1);
    select_ln58_7_fu_734_p3 <= 
        ap_const_lv16_3001 when (tmp_40_fu_726_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln58_fu_581_p3 <= 
        ap_const_lv16_3001 when (tmp_37_fu_573_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln64_7_fu_782_p3 <= 
        ap_const_lv16_0 when (tmp_41_fu_768_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln64_fu_628_p3 <= 
        ap_const_lv16_0 when (tmp_38_fu_615_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln69_7_fu_816_p3 <= 
        ap_const_lv16_3001 when (tmp_42_fu_804_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln69_fu_662_p3 <= 
        ap_const_lv16_3001 when (tmp_39_fu_650_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln43_12_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_48_fu_716_p2),16));

        sext_ln43_13_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_50_fu_742_p2),18));

        sext_ln43_6_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_45_fu_563_p2),16));

        sext_ln43_7_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_51_fu_589_p2),18));

        sext_ln62_3_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_6_fu_599_p2),18));

        sext_ln62_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_12_fu_752_p2),18));


    stage0_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, stage0_4_addr_6_reg_942_pp0_iter5_reg, stage0_4_addr_reg_1065, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_4_address0 <= stage0_4_addr_6_reg_942_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_4_address0 <= stage0_4_addr_reg_1065;
        else 
            stage0_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    stage0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage0_4_ce0 <= ap_const_logic_1;
        else 
            stage0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_4_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, add_ln69_reg_1075, ap_block_pp0_stage0, ap_block_pp0_stage1, add_ln64_8_fu_790_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_4_d0 <= add_ln69_reg_1075;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_4_d0 <= add_ln64_8_fu_790_p2;
        else 
            stage0_4_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage0_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, icmp_ln64_reg_973_pp0_iter4_reg, icmp_ln64_reg_973_pp0_iter5_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln64_reg_973_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln64_reg_973_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage0_4_we0 <= ap_const_logic_1;
        else 
            stage0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, stage0_5_addr_6_reg_922_pp0_iter5_reg, stage0_5_addr_reg_1022, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                stage0_5_address0 <= stage0_5_addr_6_reg_922_pp0_iter5_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                stage0_5_address0 <= stage0_5_addr_reg_1022;
            else 
                stage0_5_address0 <= "XXXXXXXX";
            end if;
        else 
            stage0_5_address0 <= "XXXXXXXX";
        end if; 
    end process;


    stage0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage0_5_ce0 <= ap_const_logic_1;
        else 
            stage0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_5_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, add_ln69_3_reg_1044, ap_block_pp0_stage0, add_ln64_2_fu_636_p2, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                stage0_5_d0 <= add_ln69_3_reg_1044;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                stage0_5_d0 <= add_ln64_2_fu_636_p2;
            else 
                stage0_5_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            stage0_5_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage0_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, icmp_ln64_2_reg_913_pp0_iter4_reg, icmp_ln64_2_reg_913_pp0_iter5_reg, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_2_reg_913_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_2_reg_913_pp0_iter4_reg = ap_const_lv1_0)))) then 
            stage0_5_we0 <= ap_const_logic_1;
        else 
            stage0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, stage0_6_addr_6_reg_947_pp0_iter5_reg, stage0_6_addr_reg_1070, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_6_address0 <= stage0_6_addr_6_reg_947_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_6_address0 <= stage0_6_addr_reg_1070;
        else 
            stage0_6_address0 <= "XXXXXXXX";
        end if; 
    end process;


    stage0_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage0_6_ce0 <= ap_const_logic_1;
        else 
            stage0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_6_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, add_ln69_reg_1075, ap_block_pp0_stage0, ap_block_pp0_stage1, add_ln64_8_fu_790_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage0_6_d0 <= add_ln69_reg_1075;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            stage0_6_d0 <= add_ln64_8_fu_790_p2;
        else 
            stage0_6_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage0_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, icmp_ln64_reg_973_pp0_iter4_reg, icmp_ln64_reg_973_pp0_iter5_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln64_reg_973_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln64_reg_973_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage0_6_we0 <= ap_const_logic_1;
        else 
            stage0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, stage0_addr_reg_917_pp0_iter5_reg, stage0_addr_4_reg_1017, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                stage0_address0 <= stage0_addr_reg_917_pp0_iter5_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                stage0_address0 <= stage0_addr_4_reg_1017;
            else 
                stage0_address0 <= "XXXXXXXX";
            end if;
        else 
            stage0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    stage0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            stage0_ce0 <= ap_const_logic_1;
        else 
            stage0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, add_ln69_3_reg_1044, ap_block_pp0_stage0, add_ln64_2_fu_636_p2, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                stage0_d0 <= add_ln69_3_reg_1044;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                stage0_d0 <= add_ln64_2_fu_636_p2;
            else 
                stage0_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            stage0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stage0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, icmp_ln64_2_reg_913_pp0_iter4_reg, icmp_ln64_2_reg_913_pp0_iter5_reg, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln64_2_reg_913_pp0_iter5_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_2_reg_913_pp0_iter4_reg = ap_const_lv1_1)))) then 
            stage0_we0 <= ap_const_logic_1;
        else 
            stage0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_1_address0 <= zext_ln52_fu_676_p1(8 - 1 downto 0);
    stage1_1_address1 <= zext_ln54_12_fu_448_p1(8 - 1 downto 0);

    stage1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_1_ce0 <= ap_const_logic_1;
        else 
            stage1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_1_ce1 <= ap_const_logic_1;
        else 
            stage1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_2_address0 <= zext_ln52_3_fu_524_p1(8 - 1 downto 0);
    stage1_2_address1 <= zext_ln54_6_fu_392_p1(8 - 1 downto 0);

    stage1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_2_ce0 <= ap_const_logic_1;
        else 
            stage1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_2_ce1 <= ap_const_logic_1;
        else 
            stage1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_3_address0 <= zext_ln52_fu_676_p1(8 - 1 downto 0);
    stage1_3_address1 <= zext_ln54_12_fu_448_p1(8 - 1 downto 0);

    stage1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_3_ce0 <= ap_const_logic_1;
        else 
            stage1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_3_ce1 <= ap_const_logic_1;
        else 
            stage1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_address0 <= zext_ln52_3_fu_524_p1(8 - 1 downto 0);
    stage1_address1 <= zext_ln54_6_fu_392_p1(8 - 1 downto 0);

    stage1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_ce0 <= ap_const_logic_1;
        else 
            stage1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage1_ce1 <= ap_const_logic_1;
        else 
            stage1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_32_fu_609_p2 <= std_logic_vector(signed(sext_ln62_3_fu_605_p1) + signed(sext_ln43_7_fu_595_p1));
    tmp1_33_fu_644_p2 <= std_logic_vector(unsigned(zext_ln42_6_fu_548_p1) - unsigned(sext_ln43_7_fu_595_p1));
    tmp1_35_fu_762_p2 <= std_logic_vector(signed(sext_ln62_fu_758_p1) + signed(sext_ln43_13_fu_748_p1));
    tmp1_36_fu_798_p2 <= std_logic_vector(unsigned(zext_ln42_12_fu_699_p1) - unsigned(sext_ln43_13_fu_748_p1));
    tmp2_45_fu_563_p2 <= std_logic_vector(unsigned(trunc_ln43_3_fu_554_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_48_fu_716_p2 <= std_logic_vector(unsigned(trunc_ln43_6_fu_707_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_50_fu_742_p2 <= std_logic_vector(unsigned(select_ln58_7_fu_734_p3) + unsigned(sext_ln43_12_fu_722_p1));
    tmp2_51_fu_589_p2 <= std_logic_vector(unsigned(select_ln58_fu_581_p3) + unsigned(sext_ln43_6_fu_569_p1));
    tmp_37_fu_573_p3 <= tmp2_45_fu_563_p2(14 downto 14);
    tmp_38_fu_615_p3 <= tmp1_32_fu_609_p2(17 downto 17);
    tmp_39_fu_650_p3 <= tmp1_33_fu_644_p2(17 downto 17);
    tmp_40_fu_726_p3 <= tmp2_48_fu_716_p2(14 downto 14);
    tmp_41_fu_768_p3 <= tmp1_35_fu_762_p2(17 downto 17);
    tmp_42_fu_804_p3 <= tmp1_36_fu_798_p2(17 downto 17);
    tmp_fu_305_p3 <= ap_sig_allocacmp_n(9 downto 9);
    tmp_s_fu_325_p4 <= ap_sig_allocacmp_n(8 downto 7);
    trunc_ln43_3_fu_554_p4 <= grp_fu_857_p3(30 downto 16);
    trunc_ln43_6_fu_707_p4 <= grp_fu_866_p3(30 downto 16);
    trunc_ln44_fu_313_p1 <= ap_sig_allocacmp_n(9 - 1 downto 0);
    trunc_ln48_fu_317_p1 <= ap_sig_allocacmp_n(2 - 1 downto 0);
    trunc_ln68_7_fu_812_p1 <= tmp1_36_fu_798_p2(16 - 1 downto 0);
    trunc_ln68_fu_658_p1 <= tmp1_33_fu_644_p2(16 - 1 downto 0);
    zext_ln41_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb_q0),30));
    zext_ln42_12_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_fu_686_p6),18));
    zext_ln42_13_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_fu_686_p6),17));
    zext_ln42_6_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_3_reg_1032),18));
    zext_ln42_7_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_3_reg_1032),17));
    zext_ln48_2_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln44_fu_313_p1),10));
    zext_ln48_3_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln48_1_fu_335_p3),10));
    zext_ln48_7_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln48_3_fu_406_p2),10));
    zext_ln50_1_cast_fu_353_p3 <= (ap_const_lv1_1 & tmp_s_fu_325_p4);
    zext_ln50_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50_1_cast_fu_353_p3),64));
    zext_ln52_3_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln52_1_reg_898_pp0_iter3_reg),64));
    zext_ln52_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln52_4_reg_927_pp0_iter4_reg),64));
    zext_ln54_12_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln54_4_fu_438_p4),64));
    zext_ln54_6_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln54_1_fu_382_p4),64));
    zext_ln55_3_fu_521_p0 <= grp_fu_844_p2;
end behav;
