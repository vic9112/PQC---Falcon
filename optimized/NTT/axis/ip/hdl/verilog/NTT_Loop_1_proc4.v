// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module NTT_Loop_1_proc4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        a_in_TVALID,
        a_in_TDATA,
        a_in_TREADY,
        in_buf_address0,
        in_buf_ce0,
        in_buf_we0,
        in_buf_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   a_in_TVALID;
input  [15:0] a_in_TDATA;
output   a_in_TREADY;
output  [9:0] in_buf_address0;
output   in_buf_ce0;
output   in_buf_we0;
output  [15:0] in_buf_d0;

reg ap_idle;
reg in_buf_ce0;
reg in_buf_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond42_i_i_fu_70_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    a_in_TDATA_blk_n;
wire   [63:0] loop_index3_i_i_cast_fu_82_p1;
reg   [10:0] loop_index3_i_i_fu_38;
wire   [10:0] empty_41_fu_76_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_loop_index3_i_i_load;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    regslice_both_a_in_U_apdone_blk;
wire   [15:0] a_in_TDATA_int_regslice;
wire    a_in_TVALID_int_regslice;
reg    a_in_TREADY_int_regslice;
wire    regslice_both_a_in_U_ack_in;
reg    ap_condition_122;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

NTT_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

NTT_regslice_both #(
    .DataWidth( 16 ))
regslice_both_a_in_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(a_in_TDATA),
    .vld_in(a_in_TVALID),
    .ack_in(regslice_both_a_in_U_ack_in),
    .data_out(a_in_TDATA_int_regslice),
    .vld_out(a_in_TVALID_int_regslice),
    .ack_out(a_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_in_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_122)) begin
        if ((exitcond42_i_i_fu_70_p2 == 1'd0)) begin
            loop_index3_i_i_fu_38 <= empty_41_fu_76_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            loop_index3_i_i_fu_38 <= 11'd0;
        end
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (exitcond42_i_i_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        a_in_TDATA_blk_n = a_in_TVALID_int_regslice;
    end else begin
        a_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0))) & (exitcond42_i_i_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        a_in_TREADY_int_regslice = 1'b1;
    end else begin
        a_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0))) & (exitcond42_i_i_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_loop_index3_i_i_load = 11'd0;
    end else begin
        ap_sig_allocacmp_loop_index3_i_i_load = loop_index3_i_i_fu_38;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1))) begin
        in_buf_ce0 = 1'b1;
    end else begin
        in_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0))) & (exitcond42_i_i_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        in_buf_we0 = 1'b1;
    end else begin
        in_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_in_TREADY = regslice_both_a_in_U_ack_in;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_122 = (~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1) | ((1'b0 == a_in_TVALID_int_regslice) & (exitcond42_i_i_fu_70_p2 == 1'd0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_41_fu_76_p2 = (ap_sig_allocacmp_loop_index3_i_i_load + 11'd1);

assign exitcond42_i_i_fu_70_p2 = ((ap_sig_allocacmp_loop_index3_i_i_load == 11'd1024) ? 1'b1 : 1'b0);

assign in_buf_address0 = loop_index3_i_i_cast_fu_82_p1;

assign in_buf_d0 = a_in_TDATA_int_regslice;

assign loop_index3_i_i_cast_fu_82_p1 = ap_sig_allocacmp_loop_index3_i_i_load;

endmodule //NTT_Loop_1_proc4
