-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT_ntt_stage is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_buf_ce0 : OUT STD_LOGIC;
    in_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_buf_ce1 : OUT STD_LOGIC;
    in_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_buf_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_buf_0_ce0 : OUT STD_LOGIC;
    out_buf_0_we0 : OUT STD_LOGIC;
    out_buf_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_buf_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_buf_0_ce1 : OUT STD_LOGIC;
    out_buf_0_we1 : OUT STD_LOGIC;
    out_buf_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_buf_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_buf_1_ce0 : OUT STD_LOGIC;
    out_buf_1_we0 : OUT STD_LOGIC;
    out_buf_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_buf_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_buf_2_ce0 : OUT STD_LOGIC;
    out_buf_2_we0 : OUT STD_LOGIC;
    out_buf_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_buf_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_buf_3_ce0 : OUT STD_LOGIC;
    out_buf_3_we0 : OUT STD_LOGIC;
    out_buf_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of NTT_ntt_stage is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_E130 : STD_LOGIC_VECTOR (15 downto 0) := "1110000100110000";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";
    constant ap_const_lv29_1ED0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001111011010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal tmp_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_253 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_fu_265_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1116_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_273_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_1120 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_1120_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_1120_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln_reg_1127 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_reg_1127_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_reg_1127_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_fu_287_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_7_reg_1133 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_7_reg_1133_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_1143 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1143_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1143_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_8_fu_316_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_8_reg_1148 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_8_reg_1148_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_reg_1158 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_1158_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_1158_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal in_buf_load_2_reg_1168 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_load_4_reg_1174 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_9_fu_368_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_9_reg_1180 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_9_reg_1180_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_reg_1190 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_1190_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_reg_1190_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal in_buf_load_reg_1195 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal in_buf_load_reg_1195_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_load_6_reg_1201 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1033_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln53_reg_1217 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_8_reg_1262 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln62_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_reg_1279 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_7_fu_564_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_7_reg_1285 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_8_fu_691_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_8_reg_1290 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1085_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp1_reg_1305 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln67_9_fu_851_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_9_reg_1310 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln52_16_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln52_18_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln52_20_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_10_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln50_11_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_12_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln67_1_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_2_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_3_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_fu_1014_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_01_fu_88 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_fu_345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_9 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_7_fu_531_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_8_fu_658_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_9_fu_818_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln52_16_cast_fu_293_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln52_18_cast_fu_322_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln52_cast_fu_356_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln52_20_cast_fu_373_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln53_7_fu_396_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1019_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln53_8_fu_399_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1026_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln53_9_fu_408_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1039_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1046_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1053_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1060_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln42_7_fu_448_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_34_fu_457_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_7_fu_475_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_16_fu_463_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_43_fu_483_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_17_fu_444_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln60_16_fu_493_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln60_7_fu_499_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln42_17_fu_489_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_26_fu_503_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_29_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_7_fu_523_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_13_fu_517_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_16_fu_440_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_27_fu_538_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_fu_544_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_7_fu_556_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_7_fu_552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1069_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln42_8_fu_576_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_37_fu_585_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_31_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_8_fu_603_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_18_fu_591_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_44_fu_611_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_19_fu_573_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln60_18_fu_621_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln60_8_fu_627_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln42_19_fu_617_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_29_fu_631_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_32_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_8_fu_650_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_14_fu_645_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_18_fu_570_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_30_fu_665_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_fu_671_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_8_fu_683_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_8_fu_679_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1078_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln67_1_cast_fu_703_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln67_2_cast_fu_715_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1091_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln42_9_fu_735_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_40_fu_744_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_34_fu_754_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_9_fu_762_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_20_fu_750_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_45_fu_770_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_21_fu_731_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln60_20_fu_780_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln60_9_fu_786_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln42_21_fu_776_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_32_fu_790_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_fu_796_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_9_fu_810_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_15_fu_804_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_20_fu_727_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_33_fu_825_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_36_fu_831_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_9_fu_843_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_9_fu_839_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln67_3_cast_fu_857_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1100_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln_fu_884_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_31_fu_893_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_903_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_fu_911_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_fu_899_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_42_fu_919_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_15_fu_880_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln60_fu_929_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln60_fu_935_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln42_15_fu_925_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_23_fu_939_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_26_fu_945_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_fu_959_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_12_fu_953_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_fu_876_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_24_fu_974_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_fu_980_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_992_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_fu_988_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln67_cast_fu_1007_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1019_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1026_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1033_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1039_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1046_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1046_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1053_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1053_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1060_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1060_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1060_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1069_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1069_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1069_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1078_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1078_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1085_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1085_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1091_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1091_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1091_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1100_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1100_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1100_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_134 : BOOLEAN;
    signal ap_enable_state9_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_176 : BOOLEAN;
    signal ap_enable_state10_pp0_iter2_stage1 : BOOLEAN;
    signal ap_enable_operation_158 : BOOLEAN;
    signal ap_enable_operation_180 : BOOLEAN;
    signal ap_enable_operation_199 : BOOLEAN;
    signal ap_enable_operation_209 : BOOLEAN;
    signal ap_enable_state11_pp0_iter2_stage2 : BOOLEAN;
    signal ap_enable_operation_238 : BOOLEAN;
    signal ap_enable_state13_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_247 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1046_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1053_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1060_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1060_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1069_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1069_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1078_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1085_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1091_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1091_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1100_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1100_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NTT_mul_mul_16ns_14s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component NTT_mac_muladd_16ns_13ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16ns_14s_16_4_1_U4 : component NTT_mul_mul_16ns_14s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_buf_q1,
        din1 => grp_fu_1019_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1019_p2);

    mul_mul_16ns_14s_16_4_1_U5 : component NTT_mul_mul_16ns_14s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_buf_q0,
        din1 => grp_fu_1026_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1026_p2);

    mul_mul_16ns_14s_16_4_1_U6 : component NTT_mul_mul_16ns_14s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_buf_q1,
        din1 => grp_fu_1033_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1033_p2);

    mul_mul_16ns_14s_16_4_1_U7 : component NTT_mul_mul_16ns_14s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_buf_q0,
        din1 => grp_fu_1039_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1039_p2);

    mul_mul_16ns_14ns_30_4_1_U8 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1046_p0,
        din1 => grp_fu_1046_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1046_p2);

    mul_mul_16ns_14ns_30_4_1_U9 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1053_p0,
        din1 => grp_fu_1053_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1053_p2);

    mac_muladd_16ns_13ns_30ns_31_4_1_U10 : component NTT_mac_muladd_16ns_13ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1060_p0,
        din1 => grp_fu_1060_p1,
        din2 => grp_fu_1060_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1060_p3);

    mac_muladd_16ns_13ns_30ns_31_4_1_U11 : component NTT_mac_muladd_16ns_13ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1069_p0,
        din1 => grp_fu_1069_p1,
        din2 => grp_fu_1069_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1069_p3);

    mul_mul_16ns_14ns_30_4_1_U12 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1078_p0,
        din1 => grp_fu_1078_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1078_p2);

    mul_mul_16ns_14ns_30_4_1_U13 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1085_p0,
        din1 => grp_fu_1085_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1085_p2);

    mac_muladd_16ns_13ns_30ns_31_4_1_U14 : component NTT_mac_muladd_16ns_13ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1091_p0,
        din1 => grp_fu_1091_p1,
        din2 => grp_fu_1091_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1091_p3);

    mac_muladd_16ns_13ns_30ns_31_4_1_U15 : component NTT_mac_muladd_16ns_13ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1100_p0,
        din1 => grp_fu_1100_p1,
        din2 => grp_fu_1100_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1100_p3);

    flow_control_loop_pipe_sequential_init_U : component NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    n_01_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_265_p3 = ap_const_lv1_0))) then 
                    n_01_fu_88 <= n_fu_345_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_01_fu_88 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln67_7_reg_1285 <= add_ln67_7_fu_564_p2;
                add_ln67_8_reg_1290 <= add_ln67_8_fu_691_p2;
                    i_7_reg_1133_pp0_iter1_reg(8 downto 1) <= i_7_reg_1133(8 downto 1);
                    i_8_reg_1148_pp0_iter1_reg(0) <= i_8_reg_1148(0);    i_8_reg_1148_pp0_iter1_reg(8 downto 2) <= i_8_reg_1148(8 downto 2);
                i_reg_1120_pp0_iter1_reg <= i_reg_1120;
                i_reg_1120_pp0_iter2_reg <= i_reg_1120_pp0_iter1_reg;
                lshr_ln_reg_1127_pp0_iter1_reg <= lshr_ln_reg_1127;
                lshr_ln_reg_1127_pp0_iter2_reg <= lshr_ln_reg_1127_pp0_iter1_reg;
                tmp_1_reg_1143_pp0_iter1_reg <= tmp_1_reg_1143;
                tmp_1_reg_1143_pp0_iter2_reg <= tmp_1_reg_1143_pp0_iter1_reg;
                tmp_2_reg_1158_pp0_iter1_reg <= tmp_2_reg_1158;
                tmp_2_reg_1158_pp0_iter2_reg <= tmp_2_reg_1158_pp0_iter1_reg;
                tmp_reg_1116 <= ap_sig_allocacmp_n_9(9 downto 9);
                tmp_reg_1116_pp0_iter1_reg <= tmp_reg_1116;
                    zext_ln62_reg_1279(6 downto 0) <= zext_ln62_fu_435_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln67_9_reg_1310 <= add_ln67_9_fu_851_p2;
                    i_9_reg_1180_pp0_iter1_reg(8 downto 2) <= i_9_reg_1180(8 downto 2);
                mul_ln53_reg_1217 <= grp_fu_1033_p2;
                tmp1_reg_1305 <= grp_fu_1085_p2;
                tmp_3_reg_1190_pp0_iter1_reg <= tmp_3_reg_1190;
                tmp_3_reg_1190_pp0_iter2_reg <= tmp_3_reg_1190_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_265_p3 = ap_const_lv1_0))) then
                    i_7_reg_1133(8 downto 1) <= i_7_fu_287_p2(8 downto 1);
                    i_8_reg_1148(0) <= i_8_fu_316_p2(0);    i_8_reg_1148(8 downto 2) <= i_8_fu_316_p2(8 downto 2);
                i_reg_1120 <= i_fu_273_p1;
                lshr_ln_reg_1127 <= ap_sig_allocacmp_n_9(8 downto 2);
                tmp_1_reg_1143 <= i_7_fu_287_p2(8 downto 2);
                tmp_2_reg_1158 <= i_8_fu_316_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1116 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    i_9_reg_1180(8 downto 2) <= i_9_fu_368_p2(8 downto 2);
                tmp_3_reg_1190 <= i_9_fu_368_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1116 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                in_buf_load_2_reg_1168 <= in_buf_q1;
                in_buf_load_4_reg_1174 <= in_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1116 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                in_buf_load_6_reg_1201 <= in_buf_q0;
                in_buf_load_reg_1195 <= in_buf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                in_buf_load_reg_1195_pp0_iter1_reg <= in_buf_load_reg_1195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_253 <= in_buf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                u_8_reg_1262 <= in_buf_q0;
            end if;
        end if;
    end process;
    i_7_reg_1133(0) <= '1';
    i_7_reg_1133_pp0_iter1_reg(0) <= '1';
    i_8_reg_1148(1) <= '1';
    i_8_reg_1148_pp0_iter1_reg(1) <= '1';
    i_9_reg_1180(1 downto 0) <= "11";
    i_9_reg_1180_pp0_iter1_reg(1 downto 0) <= "11";
    zext_ln62_reg_1279(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln60_16_fu_493_p2 <= std_logic_vector(unsigned(zext_ln41_17_fu_444_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln60_18_fu_621_p2 <= std_logic_vector(unsigned(zext_ln41_19_fu_573_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln60_20_fu_780_p2 <= std_logic_vector(unsigned(zext_ln41_21_fu_731_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln60_fu_929_p2 <= std_logic_vector(unsigned(zext_ln41_15_fu_880_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln62_12_fu_953_p2 <= std_logic_vector(unsigned(in_buf_q0) + unsigned(tmp2_42_fu_919_p2));
    add_ln62_13_fu_517_p2 <= std_logic_vector(unsigned(reg_253) + unsigned(tmp2_43_fu_483_p2));
    add_ln62_14_fu_645_p2 <= std_logic_vector(unsigned(u_8_reg_1262) + unsigned(tmp2_44_fu_611_p2));
    add_ln62_15_fu_804_p2 <= std_logic_vector(unsigned(reg_253) + unsigned(tmp2_45_fu_770_p2));
    add_ln62_7_fu_531_p2 <= std_logic_vector(unsigned(select_ln62_7_fu_523_p3) + unsigned(add_ln62_13_fu_517_p2));
    add_ln62_8_fu_658_p2 <= std_logic_vector(unsigned(select_ln62_8_fu_650_p3) + unsigned(add_ln62_14_fu_645_p2));
    add_ln62_9_fu_818_p2 <= std_logic_vector(unsigned(select_ln62_9_fu_810_p3) + unsigned(add_ln62_15_fu_804_p2));
    add_ln67_7_fu_564_p2 <= std_logic_vector(unsigned(select_ln67_7_fu_556_p3) + unsigned(trunc_ln66_7_fu_552_p1));
    add_ln67_8_fu_691_p2 <= std_logic_vector(unsigned(select_ln67_8_fu_683_p3) + unsigned(trunc_ln66_8_fu_679_p1));
    add_ln67_9_fu_851_p2 <= std_logic_vector(unsigned(select_ln67_9_fu_843_p3) + unsigned(trunc_ln66_9_fu_839_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage3_subdone)) or ((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage2_subdone)) or ((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, tmp_reg_1116)
    begin
        if (((tmp_reg_1116 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_reg_1116_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_1116_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

        ap_enable_operation_134 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_158 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_176 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_180 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_199 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_209 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_238 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_247 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state10_pp0_iter2_stage1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state10_pp0_iter2_stage1 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state11_pp0_iter2_stage2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2)
    begin
                ap_enable_state11_pp0_iter2_stage2 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_enable_state13_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state13_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state9_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state9_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_01_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_9 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n_9 <= n_01_fu_88;
        end if; 
    end process;

    grp_fu_1019_p1 <= ap_const_lv16_E130(14 - 1 downto 0);
    grp_fu_1026_p1 <= ap_const_lv16_E130(14 - 1 downto 0);
    grp_fu_1033_p1 <= ap_const_lv16_E130(14 - 1 downto 0);
    grp_fu_1039_p1 <= ap_const_lv16_E130(14 - 1 downto 0);
    grp_fu_1046_p0 <= grp_fu_1046_p00(16 - 1 downto 0);
    grp_fu_1046_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln53_7_fu_396_p0),30));
    grp_fu_1046_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_1053_p0 <= grp_fu_1053_p00(16 - 1 downto 0);
    grp_fu_1053_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln53_8_fu_399_p0),30));
    grp_fu_1053_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_1060_p0 <= grp_fu_1060_p00(16 - 1 downto 0);
    grp_fu_1060_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_load_2_reg_1168),29));
    grp_fu_1060_p1 <= ap_const_lv29_1ED0(13 - 1 downto 0);
    grp_fu_1060_p2 <= grp_fu_1060_p20(30 - 1 downto 0);
    grp_fu_1060_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1046_p2),31));
    grp_fu_1069_p0 <= grp_fu_1069_p00(16 - 1 downto 0);
    grp_fu_1069_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_load_4_reg_1174),29));
    grp_fu_1069_p1 <= ap_const_lv29_1ED0(13 - 1 downto 0);
    grp_fu_1069_p2 <= grp_fu_1069_p20(30 - 1 downto 0);
    grp_fu_1069_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1053_p2),31));
    grp_fu_1078_p0 <= grp_fu_1078_p00(16 - 1 downto 0);
    grp_fu_1078_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln53_9_fu_408_p0),30));
    grp_fu_1078_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_1085_p0 <= grp_fu_1085_p00(16 - 1 downto 0);
    grp_fu_1085_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln53_reg_1217),30));
    grp_fu_1085_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_1091_p0 <= grp_fu_1091_p00(16 - 1 downto 0);
    grp_fu_1091_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_load_6_reg_1201),29));
    grp_fu_1091_p1 <= ap_const_lv29_1ED0(13 - 1 downto 0);
    grp_fu_1091_p2 <= grp_fu_1091_p20(30 - 1 downto 0);
    grp_fu_1091_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1078_p2),31));
    grp_fu_1100_p0 <= grp_fu_1100_p00(16 - 1 downto 0);
    grp_fu_1100_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_load_reg_1195_pp0_iter1_reg),29));
    grp_fu_1100_p1 <= ap_const_lv29_1ED0(13 - 1 downto 0);
    grp_fu_1100_p2 <= grp_fu_1100_p20(30 - 1 downto 0);
    grp_fu_1100_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_reg_1305),31));
    i_7_fu_287_p2 <= (i_fu_273_p1 or ap_const_lv9_1);
    i_8_fu_316_p2 <= (i_fu_273_p1 or ap_const_lv9_2);
    i_9_fu_368_p2 <= (i_reg_1120 or ap_const_lv9_3);
    i_fu_273_p1 <= ap_sig_allocacmp_n_9(9 - 1 downto 0);

    in_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln52_18_fu_330_p1, ap_block_pp0_stage1, zext_ln52_20_fu_381_p1, ap_block_pp0_stage2, zext_ln50_11_fu_418_p1, ap_block_pp0_stage3, zext_ln50_fu_869_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            in_buf_address0 <= zext_ln50_fu_869_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            in_buf_address0 <= zext_ln50_11_fu_418_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_buf_address0 <= zext_ln52_20_fu_381_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_address0 <= zext_ln52_18_fu_330_p1(10 - 1 downto 0);
        else 
            in_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln52_16_fu_301_p1, ap_block_pp0_stage0, zext_ln52_fu_363_p1, ap_block_pp0_stage1, zext_ln50_10_fu_414_p1, ap_block_pp0_stage2, zext_ln50_12_fu_431_p1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            in_buf_address1 <= zext_ln50_12_fu_431_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            in_buf_address1 <= zext_ln50_10_fu_414_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            in_buf_address1 <= zext_ln52_fu_363_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_address1 <= zext_ln52_16_fu_301_p1(10 - 1 downto 0);
        else 
            in_buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    in_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            in_buf_ce0 <= ap_const_logic_1;
        else 
            in_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            in_buf_ce1 <= ap_const_logic_1;
        else 
            in_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_345_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_9) + unsigned(ap_const_lv10_4));
    out_buf_0_address0 <= zext_ln67_fu_1014_p1(8 - 1 downto 0);
    out_buf_0_address1 <= zext_ln62_reg_1279(8 - 1 downto 0);

    out_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_0_ce0 <= ap_const_logic_1;
        else 
            out_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_0_ce1 <= ap_const_logic_1;
        else 
            out_buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_0_d0 <= std_logic_vector(unsigned(select_ln67_fu_992_p3) + unsigned(trunc_ln66_fu_988_p1));
    out_buf_0_d1 <= std_logic_vector(unsigned(select_ln62_fu_959_p3) + unsigned(add_ln62_12_fu_953_p2));

    out_buf_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_0_we0 <= ap_const_logic_1;
        else 
            out_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_0_we1 <= ap_const_logic_1;
        else 
            out_buf_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, zext_ln62_fu_435_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln67_1_fu_710_p1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_1_address0 <= zext_ln67_1_fu_710_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_buf_1_address0 <= zext_ln62_fu_435_p1(8 - 1 downto 0);
            else 
                out_buf_1_address0 <= "XXXXXXXX";
            end if;
        else 
            out_buf_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_1_ce0 <= ap_const_logic_1;
        else 
            out_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, add_ln67_7_reg_1285, ap_block_pp0_stage0, ap_block_pp0_stage1, add_ln62_7_fu_531_p2)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_1_d0 <= add_ln67_7_reg_1285;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_buf_1_d0 <= add_ln62_7_fu_531_p2;
            else 
                out_buf_1_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            out_buf_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_1_we0 <= ap_const_logic_1;
        else 
            out_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, zext_ln62_fu_435_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln67_2_fu_722_p1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_2_address0 <= zext_ln67_2_fu_722_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_buf_2_address0 <= zext_ln62_fu_435_p1(8 - 1 downto 0);
            else 
                out_buf_2_address0 <= "XXXXXXXX";
            end if;
        else 
            out_buf_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_2_ce0 <= ap_const_logic_1;
        else 
            out_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_2_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, add_ln67_8_reg_1290, ap_block_pp0_stage0, ap_block_pp0_stage1, add_ln62_8_fu_658_p2)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_2_d0 <= add_ln67_8_reg_1290;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_buf_2_d0 <= add_ln62_8_fu_658_p2;
            else 
                out_buf_2_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            out_buf_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_2_we0 <= ap_const_logic_1;
        else 
            out_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_3_address0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln62_reg_1279, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln67_3_fu_864_p1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                out_buf_3_address0 <= zext_ln67_3_fu_864_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_3_address0 <= zext_ln62_reg_1279(8 - 1 downto 0);
            else 
                out_buf_3_address0 <= "XXXXXXXX";
            end if;
        else 
            out_buf_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_buf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            out_buf_3_ce0 <= ap_const_logic_1;
        else 
            out_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_3_d0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, add_ln67_9_reg_1310, ap_block_pp0_stage1, ap_block_pp0_stage2, add_ln62_9_fu_818_p2)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                out_buf_3_d0 <= add_ln67_9_reg_1310;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_buf_3_d0 <= add_ln62_9_fu_818_p2;
            else 
                out_buf_3_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            out_buf_3_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            out_buf_3_we0 <= ap_const_logic_1;
        else 
            out_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln56_7_fu_475_p3 <= 
        ap_const_lv16_3001 when (tmp_28_fu_467_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln56_8_fu_603_p3 <= 
        ap_const_lv16_3001 when (tmp_31_fu_595_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln56_9_fu_762_p3 <= 
        ap_const_lv16_3001 when (tmp_34_fu_754_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln56_fu_911_p3 <= 
        ap_const_lv16_3001 when (tmp_25_fu_903_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln62_7_fu_523_p3 <= 
        ap_const_lv16_0 when (tmp_29_fu_509_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln62_8_fu_650_p3 <= 
        ap_const_lv16_0 when (tmp_32_fu_637_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln62_9_fu_810_p3 <= 
        ap_const_lv16_0 when (tmp_35_fu_796_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln62_fu_959_p3 <= 
        ap_const_lv16_0 when (tmp_26_fu_945_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln67_7_fu_556_p3 <= 
        ap_const_lv16_3001 when (tmp_30_fu_544_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln67_8_fu_683_p3 <= 
        ap_const_lv16_3001 when (tmp_33_fu_671_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln67_9_fu_843_p3 <= 
        ap_const_lv16_3001 when (tmp_36_fu_831_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln67_fu_992_p3 <= 
        ap_const_lv16_3001 when (tmp_27_fu_980_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln42_15_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_42_fu_919_p2),18));

        sext_ln42_16_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_34_fu_457_p2),16));

        sext_ln42_17_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_43_fu_483_p2),18));

        sext_ln42_18_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_37_fu_585_p2),16));

        sext_ln42_19_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_44_fu_611_p2),18));

        sext_ln42_20_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_40_fu_744_p2),16));

        sext_ln42_21_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_45_fu_770_p2),18));

        sext_ln42_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_31_fu_893_p2),16));

        sext_ln60_7_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_16_fu_493_p2),18));

        sext_ln60_8_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_18_fu_621_p2),18));

        sext_ln60_9_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_20_fu_780_p2),18));

        sext_ln60_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_fu_929_p2),18));

    tmp1_23_fu_939_p2 <= std_logic_vector(signed(sext_ln60_fu_935_p1) + signed(sext_ln42_15_fu_925_p1));
    tmp1_24_fu_974_p2 <= std_logic_vector(unsigned(zext_ln41_fu_876_p1) - unsigned(sext_ln42_15_fu_925_p1));
    tmp1_26_fu_503_p2 <= std_logic_vector(signed(sext_ln60_7_fu_499_p1) + signed(sext_ln42_17_fu_489_p1));
    tmp1_27_fu_538_p2 <= std_logic_vector(unsigned(zext_ln41_16_fu_440_p1) - unsigned(sext_ln42_17_fu_489_p1));
    tmp1_29_fu_631_p2 <= std_logic_vector(signed(sext_ln60_8_fu_627_p1) + signed(sext_ln42_19_fu_617_p1));
    tmp1_30_fu_665_p2 <= std_logic_vector(unsigned(zext_ln41_18_fu_570_p1) - unsigned(sext_ln42_19_fu_617_p1));
    tmp1_32_fu_790_p2 <= std_logic_vector(signed(sext_ln60_9_fu_786_p1) + signed(sext_ln42_21_fu_776_p1));
    tmp1_33_fu_825_p2 <= std_logic_vector(unsigned(zext_ln41_20_fu_727_p1) - unsigned(sext_ln42_21_fu_776_p1));
    tmp2_31_fu_893_p2 <= std_logic_vector(unsigned(trunc_ln_fu_884_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_34_fu_457_p2 <= std_logic_vector(unsigned(trunc_ln42_7_fu_448_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_37_fu_585_p2 <= std_logic_vector(unsigned(trunc_ln42_8_fu_576_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_40_fu_744_p2 <= std_logic_vector(unsigned(trunc_ln42_9_fu_735_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_42_fu_919_p2 <= std_logic_vector(unsigned(select_ln56_fu_911_p3) + unsigned(sext_ln42_fu_899_p1));
    tmp2_43_fu_483_p2 <= std_logic_vector(unsigned(select_ln56_7_fu_475_p3) + unsigned(sext_ln42_16_fu_463_p1));
    tmp2_44_fu_611_p2 <= std_logic_vector(unsigned(select_ln56_8_fu_603_p3) + unsigned(sext_ln42_18_fu_591_p1));
    tmp2_45_fu_770_p2 <= std_logic_vector(unsigned(select_ln56_9_fu_762_p3) + unsigned(sext_ln42_20_fu_750_p1));
    tmp_25_fu_903_p3 <= tmp2_31_fu_893_p2(14 downto 14);
    tmp_26_fu_945_p3 <= tmp1_23_fu_939_p2(17 downto 17);
    tmp_27_fu_980_p3 <= tmp1_24_fu_974_p2(17 downto 17);
    tmp_28_fu_467_p3 <= tmp2_34_fu_457_p2(14 downto 14);
    tmp_29_fu_509_p3 <= tmp1_26_fu_503_p2(17 downto 17);
    tmp_30_fu_544_p3 <= tmp1_27_fu_538_p2(17 downto 17);
    tmp_31_fu_595_p3 <= tmp2_37_fu_585_p2(14 downto 14);
    tmp_32_fu_637_p3 <= tmp1_29_fu_631_p2(17 downto 17);
    tmp_33_fu_671_p3 <= tmp1_30_fu_665_p2(17 downto 17);
    tmp_34_fu_754_p3 <= tmp2_40_fu_744_p2(14 downto 14);
    tmp_35_fu_796_p3 <= tmp1_32_fu_790_p2(17 downto 17);
    tmp_36_fu_831_p3 <= tmp1_33_fu_825_p2(17 downto 17);
    tmp_fu_265_p3 <= ap_sig_allocacmp_n_9(9 downto 9);
    trunc_ln42_7_fu_448_p4 <= grp_fu_1060_p3(30 downto 16);
    trunc_ln42_8_fu_576_p4 <= grp_fu_1069_p3(30 downto 16);
    trunc_ln42_9_fu_735_p4 <= grp_fu_1091_p3(30 downto 16);
    trunc_ln66_7_fu_552_p1 <= tmp1_27_fu_538_p2(16 - 1 downto 0);
    trunc_ln66_8_fu_679_p1 <= tmp1_30_fu_665_p2(16 - 1 downto 0);
    trunc_ln66_9_fu_839_p1 <= tmp1_33_fu_825_p2(16 - 1 downto 0);
    trunc_ln66_fu_988_p1 <= tmp1_24_fu_974_p2(16 - 1 downto 0);
    trunc_ln_fu_884_p4 <= grp_fu_1100_p3(30 downto 16);
    zext_ln41_15_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_q0),17));
    zext_ln41_16_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_253),18));
    zext_ln41_17_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_253),17));
    zext_ln41_18_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_8_reg_1262),18));
    zext_ln41_19_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_8_reg_1262),17));
    zext_ln41_20_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_253),18));
    zext_ln41_21_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_253),17));
    zext_ln41_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_q0),18));
    zext_ln50_10_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_1133_pp0_iter1_reg),64));
    zext_ln50_11_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_1148_pp0_iter1_reg),64));
    zext_ln50_12_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_1180_pp0_iter1_reg),64));
    zext_ln50_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_1120_pp0_iter2_reg),64));
    zext_ln52_16_cast_fu_293_p3 <= (ap_const_lv1_1 & i_7_fu_287_p2);
    zext_ln52_16_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln52_16_cast_fu_293_p3),64));
    zext_ln52_18_cast_fu_322_p3 <= (ap_const_lv1_1 & i_8_fu_316_p2);
    zext_ln52_18_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln52_18_cast_fu_322_p3),64));
    zext_ln52_20_cast_fu_373_p3 <= (ap_const_lv1_1 & i_9_fu_368_p2);
    zext_ln52_20_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln52_20_cast_fu_373_p3),64));
    zext_ln52_cast_fu_356_p3 <= (ap_const_lv1_1 & i_reg_1120);
    zext_ln52_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln52_cast_fu_356_p3),64));
    zext_ln53_7_fu_396_p0 <= grp_fu_1019_p2;
    zext_ln53_8_fu_399_p0 <= grp_fu_1026_p2;
    zext_ln53_9_fu_408_p0 <= grp_fu_1039_p2;
    zext_ln62_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1127_pp0_iter1_reg),64));
    zext_ln67_1_cast_fu_703_p3 <= (ap_const_lv1_1 & tmp_1_reg_1143_pp0_iter2_reg);
    zext_ln67_1_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln67_1_cast_fu_703_p3),64));
    zext_ln67_2_cast_fu_715_p3 <= (ap_const_lv1_1 & tmp_2_reg_1158_pp0_iter2_reg);
    zext_ln67_2_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln67_2_cast_fu_715_p3),64));
    zext_ln67_3_cast_fu_857_p3 <= (ap_const_lv1_1 & tmp_3_reg_1190_pp0_iter2_reg);
    zext_ln67_3_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln67_3_cast_fu_857_p3),64));
    zext_ln67_cast_fu_1007_p3 <= (ap_const_lv1_1 & lshr_ln_reg_1127_pp0_iter2_reg);
    zext_ln67_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln67_cast_fu_1007_p3),64));
end behav;
