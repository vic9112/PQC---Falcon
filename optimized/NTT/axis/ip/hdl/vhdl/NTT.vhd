-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    a_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    a_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_in_TVALID : IN STD_LOGIC;
    a_in_TREADY : OUT STD_LOGIC;
    a_out_TVALID : OUT STD_LOGIC;
    a_out_TREADY : IN STD_LOGIC );
end;


architecture behav of NTT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "NTT_NTT,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.410688,HLS_SYN_LAT=7471,HLS_SYN_TPT=5417,HLS_SYN_MEM=14,HLS_SYN_DSP=0,HLS_SYN_FF=5602,HLS_SYN_LUT=7814,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_buf_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_i_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal Loop_1_proc4_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc4_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc4_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc4_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc4_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc4_U0_a_in_TREADY : STD_LOGIC;
    signal Loop_1_proc4_U0_in_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_1_proc4_U0_in_buf_ce0 : STD_LOGIC;
    signal Loop_1_proc4_U0_in_buf_we0 : STD_LOGIC;
    signal Loop_1_proc4_U0_in_buf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ntt_10_stages_U0_ap_start : STD_LOGIC;
    signal ntt_10_stages_U0_ap_done : STD_LOGIC;
    signal ntt_10_stages_U0_ap_continue : STD_LOGIC;
    signal ntt_10_stages_U0_ap_idle : STD_LOGIC;
    signal ntt_10_stages_U0_ap_ready : STD_LOGIC;
    signal ntt_10_stages_U0_in_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ntt_10_stages_U0_in_buf_ce0 : STD_LOGIC;
    signal ntt_10_stages_U0_in_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ntt_10_stages_U0_in_buf_ce1 : STD_LOGIC;
    signal ntt_10_stages_U0_out_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ntt_10_stages_U0_out_buf_ce0 : STD_LOGIC;
    signal ntt_10_stages_U0_out_buf_we0 : STD_LOGIC;
    signal ntt_10_stages_U0_out_buf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ntt_10_stages_U0_out_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ntt_10_stages_U0_out_buf_ce1 : STD_LOGIC;
    signal ntt_10_stages_U0_out_buf_we1 : STD_LOGIC;
    signal ntt_10_stages_U0_out_buf_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_2_proc5_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc5_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc5_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc5_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc5_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc5_U0_out_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_2_proc5_U0_out_buf_ce0 : STD_LOGIC;
    signal Loop_2_proc5_U0_a_out_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_2_proc5_U0_a_out_TVALID : STD_LOGIC;
    signal in_buf_i_full_n : STD_LOGIC;
    signal in_buf_t_empty_n : STD_LOGIC;
    signal out_buf_i_full_n : STD_LOGIC;
    signal out_buf_t_empty_n : STD_LOGIC;

    component NTT_Loop_1_proc4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_in_TVALID : IN STD_LOGIC;
        a_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        a_in_TREADY : OUT STD_LOGIC;
        in_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_buf_ce0 : OUT STD_LOGIC;
        in_buf_we0 : OUT STD_LOGIC;
        in_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_ntt_10_stages IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_buf_ce0 : OUT STD_LOGIC;
        in_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_buf_ce1 : OUT STD_LOGIC;
        in_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_buf_ce0 : OUT STD_LOGIC;
        out_buf_we0 : OUT STD_LOGIC;
        out_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_buf_ce1 : OUT STD_LOGIC;
        out_buf_we1 : OUT STD_LOGIC;
        out_buf_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_Loop_2_proc5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_out_TREADY : IN STD_LOGIC;
        out_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_buf_ce0 : OUT STD_LOGIC;
        out_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_out_TVALID : OUT STD_LOGIC );
    end component;


    component NTT_in_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component NTT_out_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component NTT_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    in_buf_U : component NTT_in_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_1_proc4_U0_in_buf_address0,
        i_ce0 => Loop_1_proc4_U0_in_buf_ce0,
        i_we0 => Loop_1_proc4_U0_in_buf_we0,
        i_d0 => Loop_1_proc4_U0_in_buf_d0,
        i_q0 => in_buf_i_q0,
        i_address1 => ap_const_lv10_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => in_buf_i_q1,
        t_address0 => ntt_10_stages_U0_in_buf_address0,
        t_ce0 => ntt_10_stages_U0_in_buf_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv16_0,
        t_q0 => in_buf_t_q0,
        t_address1 => ntt_10_stages_U0_in_buf_address1,
        t_ce1 => ntt_10_stages_U0_in_buf_ce1,
        t_q1 => in_buf_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => in_buf_i_full_n,
        i_write => Loop_1_proc4_U0_ap_done,
        t_empty_n => in_buf_t_empty_n,
        t_read => ntt_10_stages_U0_ap_ready);

    out_buf_U : component NTT_out_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => ntt_10_stages_U0_out_buf_address0,
        i_ce0 => ntt_10_stages_U0_out_buf_ce0,
        i_we0 => ntt_10_stages_U0_out_buf_we0,
        i_d0 => ntt_10_stages_U0_out_buf_d0,
        i_q0 => out_buf_i_q0,
        i_address1 => ntt_10_stages_U0_out_buf_address1,
        i_ce1 => ntt_10_stages_U0_out_buf_ce1,
        i_we1 => ntt_10_stages_U0_out_buf_we1,
        i_d1 => ntt_10_stages_U0_out_buf_d1,
        t_address0 => Loop_2_proc5_U0_out_buf_address0,
        t_ce0 => Loop_2_proc5_U0_out_buf_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv16_0,
        t_q0 => out_buf_t_q0,
        t_address1 => ap_const_lv10_0,
        t_ce1 => ap_const_logic_0,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv16_0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => out_buf_i_full_n,
        i_write => ntt_10_stages_U0_ap_done,
        t_empty_n => out_buf_t_empty_n,
        t_read => Loop_2_proc5_U0_ap_ready);

    control_s_axi_U : component NTT_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Loop_1_proc4_U0 : component NTT_Loop_1_proc4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc4_U0_ap_start,
        ap_done => Loop_1_proc4_U0_ap_done,
        ap_continue => Loop_1_proc4_U0_ap_continue,
        ap_idle => Loop_1_proc4_U0_ap_idle,
        ap_ready => Loop_1_proc4_U0_ap_ready,
        a_in_TVALID => a_in_TVALID,
        a_in_TDATA => a_in_TDATA,
        a_in_TREADY => Loop_1_proc4_U0_a_in_TREADY,
        in_buf_address0 => Loop_1_proc4_U0_in_buf_address0,
        in_buf_ce0 => Loop_1_proc4_U0_in_buf_ce0,
        in_buf_we0 => Loop_1_proc4_U0_in_buf_we0,
        in_buf_d0 => Loop_1_proc4_U0_in_buf_d0);

    ntt_10_stages_U0 : component NTT_ntt_10_stages
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ntt_10_stages_U0_ap_start,
        ap_done => ntt_10_stages_U0_ap_done,
        ap_continue => ntt_10_stages_U0_ap_continue,
        ap_idle => ntt_10_stages_U0_ap_idle,
        ap_ready => ntt_10_stages_U0_ap_ready,
        in_buf_address0 => ntt_10_stages_U0_in_buf_address0,
        in_buf_ce0 => ntt_10_stages_U0_in_buf_ce0,
        in_buf_q0 => in_buf_t_q0,
        in_buf_address1 => ntt_10_stages_U0_in_buf_address1,
        in_buf_ce1 => ntt_10_stages_U0_in_buf_ce1,
        in_buf_q1 => in_buf_t_q1,
        out_buf_address0 => ntt_10_stages_U0_out_buf_address0,
        out_buf_ce0 => ntt_10_stages_U0_out_buf_ce0,
        out_buf_we0 => ntt_10_stages_U0_out_buf_we0,
        out_buf_d0 => ntt_10_stages_U0_out_buf_d0,
        out_buf_address1 => ntt_10_stages_U0_out_buf_address1,
        out_buf_ce1 => ntt_10_stages_U0_out_buf_ce1,
        out_buf_we1 => ntt_10_stages_U0_out_buf_we1,
        out_buf_d1 => ntt_10_stages_U0_out_buf_d1);

    Loop_2_proc5_U0 : component NTT_Loop_2_proc5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc5_U0_ap_start,
        ap_done => Loop_2_proc5_U0_ap_done,
        ap_continue => Loop_2_proc5_U0_ap_continue,
        ap_idle => Loop_2_proc5_U0_ap_idle,
        ap_ready => Loop_2_proc5_U0_ap_ready,
        a_out_TREADY => a_out_TREADY,
        out_buf_address0 => Loop_2_proc5_U0_out_buf_address0,
        out_buf_ce0 => Loop_2_proc5_U0_out_buf_ce0,
        out_buf_q0 => out_buf_t_q0,
        a_out_TDATA => Loop_2_proc5_U0_a_out_TDATA,
        a_out_TVALID => Loop_2_proc5_U0_a_out_TVALID);




    Loop_1_proc4_U0_ap_continue <= in_buf_i_full_n;
    Loop_1_proc4_U0_ap_start <= ap_start;
    Loop_2_proc5_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc5_U0_ap_start <= out_buf_t_empty_n;
    a_in_TREADY <= Loop_1_proc4_U0_a_in_TREADY;
    a_out_TDATA <= Loop_2_proc5_U0_a_out_TDATA;
    a_out_TVALID <= Loop_2_proc5_U0_a_out_TVALID;
    ap_done <= Loop_2_proc5_U0_ap_done;
    ap_idle <= (ntt_10_stages_U0_ap_idle and (out_buf_t_empty_n xor ap_const_logic_1) and (in_buf_t_empty_n xor ap_const_logic_1) and Loop_2_proc5_U0_ap_idle and Loop_1_proc4_U0_ap_idle);
    ap_ready <= Loop_1_proc4_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ntt_10_stages_U0_ap_continue <= out_buf_i_full_n;
    ntt_10_stages_U0_ap_start <= in_buf_t_empty_n;
end behav;
