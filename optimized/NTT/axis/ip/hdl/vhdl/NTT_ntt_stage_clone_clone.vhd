-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NTT_ntt_stage_clone_clone is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_buf_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_buf_0_ce0 : OUT STD_LOGIC;
    in_buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_buf_0_ce1 : OUT STD_LOGIC;
    in_buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_buf_1_ce0 : OUT STD_LOGIC;
    in_buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_buf_1_ce1 : OUT STD_LOGIC;
    in_buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_buf_2_ce0 : OUT STD_LOGIC;
    in_buf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_buf_2_ce1 : OUT STD_LOGIC;
    in_buf_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_buf_3_ce0 : OUT STD_LOGIC;
    in_buf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_buf_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_buf_3_ce1 : OUT STD_LOGIC;
    in_buf_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_ce0 : OUT STD_LOGIC;
    out_buf_we0 : OUT STD_LOGIC;
    out_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_ce1 : OUT STD_LOGIC;
    out_buf_we1 : OUT STD_LOGIC;
    out_buf_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of NTT_ntt_stage_clone_clone is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_4FFF : STD_LOGIC_VECTOR (14 downto 0) := "100111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_3001 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_1CFFF : STD_LOGIC_VECTOR (16 downto 0) := "11100111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv16_2FFF : STD_LOGIC_VECTOR (15 downto 0) := "0010111111111111";
    constant ap_const_lv30_3001 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000011000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal tmp_reg_1222 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal GMb6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal GMb6_ce0 : STD_LOGIC;
    signal GMb6_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_2_reg_1217 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal n_2_reg_1217_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal n_2_reg_1217_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1222_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1222_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_gm_fu_320_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_reg_1226 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_1_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_1236 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_1236_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_gm_2_fu_353_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_2_reg_1252 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_2_reg_1252_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_2_reg_1252_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_4_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_4_reg_1258 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_4_reg_1258_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_gm_3_fu_374_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_3_reg_1268 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_3_reg_1268_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_3_reg_1268_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_3_reg_1268_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln50_6_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_6_reg_1274 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_6_reg_1274_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_6_reg_1274_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal i_gm_1_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_1_reg_1294 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_1_reg_1294_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_gm_1_reg_1294_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal in_buf_3_load_reg_1304 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_1_load_1_reg_1309 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_buf_3_load_1_reg_1314 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_1118_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_1349 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_reg_1349_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1125_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_3_reg_1369 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_3_reg_1369_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1132_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_6_reg_1379 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_6_reg_1379_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1146_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_9_reg_1394 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp2_9_reg_1394_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal u_reg_1424 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_1_reg_1436 : STD_LOGIC_VECTOR (15 downto 0);
    signal u_2_reg_1443 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln48_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln48_1_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln48_2_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln48_3_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln50_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_2_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_2_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_3_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_4_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_5_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_6_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_90 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_3_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln62_fu_610_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_fu_643_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_1_fu_767_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_1_fu_800_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_2_fu_921_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_2_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_3_fu_1078_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_3_fu_1111_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln48_cast_fu_324_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_fu_337_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln50_1_fu_359_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln50_2_fu_380_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln48_1_cast_fu_419_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln48_2_cast_fu_439_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln48_3_cast_fu_458_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln53_fu_486_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1139_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln53_1_fu_492_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1153_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln53_2_fu_498_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1160_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_501_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln52_fu_517_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1167_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1_fu_528_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_1_fu_537_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_fu_555_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_fu_543_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_12_fu_563_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_1_fu_514_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln60_fu_573_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln60_fu_579_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln42_1_fu_569_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_1_fu_583_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_fu_602_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_4_fu_597_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_fu_511_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_2_fu_617_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_635_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_fu_631_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln53_3_fu_653_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1176_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_fu_656_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln52_1_fu_674_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1183_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln42_1_fu_685_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_4_fu_694_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_1_fu_712_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_2_fu_700_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_13_fu_720_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_3_fu_671_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln60_2_fu_730_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln60_1_fu_736_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln42_3_fu_726_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_4_fu_740_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_746_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_1_fu_759_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_5_fu_754_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_2_fu_668_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_5_fu_774_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_fu_780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_1_fu_792_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_1_fu_788_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_fu_810_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln52_2_fu_828_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1192_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln42_2_fu_839_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_7_fu_848_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_858_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_2_fu_866_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_4_fu_854_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_14_fu_874_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_5_fu_825_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln60_4_fu_884_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln60_2_fu_890_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln42_5_fu_880_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_7_fu_894_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_fu_900_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_2_fu_913_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_6_fu_908_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_4_fu_822_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_8_fu_928_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_fu_934_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_2_fu_946_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_2_fu_942_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_fu_964_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln52_3_fu_984_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1201_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln42_3_fu_995_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_10_fu_1004_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_fu_1014_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_3_fu_1022_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_6_fu_1010_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_15_fu_1030_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_7_fu_980_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln60_6_fu_1040_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln60_3_fu_1046_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln42_7_fu_1036_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_10_fu_1050_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_1056_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_3_fu_1070_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_7_fu_1064_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln41_6_fu_976_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_11_fu_1085_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_fu_1091_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_3_fu_1103_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln66_3_fu_1099_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1118_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1118_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1125_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1125_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1132_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1132_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1139_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1139_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1146_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1146_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1153_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1153_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1160_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1160_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1167_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1167_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1167_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1176_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1176_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1183_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1183_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1183_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1192_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1192_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1192_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1201_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1201_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1201_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1118_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1118_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1125_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1125_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1132_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1132_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1146_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1146_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1167_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1167_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1183_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1183_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1192_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1192_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1201_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1201_p20 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component NTT_mul_mul_16ns_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component NTT_mul_mul_16s_14ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NTT_mac_muladd_16ns_14ns_30ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component NTT_ntt_stage_clone_GMb_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component NTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    GMb6_U : component NTT_ntt_stage_clone_GMb_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => GMb6_address0,
        ce0 => GMb6_ce0,
        q0 => GMb6_q0);

    mul_mul_16ns_14ns_30_4_1_U70 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1118_p0,
        din1 => grp_fu_1118_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1118_p2);

    mul_mul_16ns_14ns_30_4_1_U71 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1125_p0,
        din1 => grp_fu_1125_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1125_p2);

    mul_mul_16ns_14ns_30_4_1_U72 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1132_p0,
        din1 => grp_fu_1132_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1132_p2);

    mul_mul_16s_14ns_16_4_1_U73 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1139_p0,
        din1 => grp_fu_1139_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1139_p2);

    mul_mul_16ns_14ns_30_4_1_U74 : component NTT_mul_mul_16ns_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1146_p0,
        din1 => grp_fu_1146_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1146_p2);

    mul_mul_16s_14ns_16_4_1_U75 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1153_p0,
        din1 => grp_fu_1153_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1153_p2);

    mul_mul_16s_14ns_16_4_1_U76 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1160_p0,
        din1 => grp_fu_1160_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1160_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U77 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1167_p0,
        din1 => grp_fu_1167_p1,
        din2 => grp_fu_1167_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1167_p3);

    mul_mul_16s_14ns_16_4_1_U78 : component NTT_mul_mul_16s_14ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1176_p0,
        din1 => grp_fu_1176_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1176_p2);

    mac_muladd_16ns_14ns_30ns_31_4_1_U79 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1183_p0,
        din1 => grp_fu_1183_p1,
        din2 => grp_fu_1183_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1183_p3);

    mac_muladd_16ns_14ns_30ns_31_4_1_U80 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1192_p0,
        din1 => grp_fu_1192_p1,
        din2 => grp_fu_1192_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1192_p3);

    mac_muladd_16ns_14ns_30ns_31_4_1_U81 : component NTT_mac_muladd_16ns_14ns_30ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1201_p0,
        din1 => grp_fu_1201_p1,
        din2 => grp_fu_1201_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1201_p3);

    flow_control_loop_pipe_sequential_init_U : component NTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    n_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_312_p3 = ap_const_lv1_0))) then 
                    n_fu_90 <= n_3_fu_395_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_90 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    i_gm_1_reg_1294(8 downto 1) <= i_gm_1_fu_414_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    i_gm_1_reg_1294_pp0_iter1_reg(8 downto 1) <= i_gm_1_reg_1294(8 downto 1);
                    i_gm_1_reg_1294_pp0_iter2_reg(8 downto 1) <= i_gm_1_reg_1294_pp0_iter1_reg(8 downto 1);
                tmp2_3_reg_1369 <= grp_fu_1125_p2;
                tmp2_3_reg_1369_pp0_iter2_reg <= tmp2_3_reg_1369;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_312_p3 = ap_const_lv1_0))) then
                    i_gm_2_reg_1252(0) <= i_gm_2_fu_353_p2(0);    i_gm_2_reg_1252(8 downto 2) <= i_gm_2_fu_353_p2(8 downto 2);
                    i_gm_3_reg_1268(8 downto 2) <= i_gm_3_fu_374_p2(8 downto 2);
                i_gm_reg_1226 <= i_gm_fu_320_p1;
                    zext_ln50_1_reg_1236(7 downto 0) <= zext_ln50_1_fu_347_p1(7 downto 0);
                    zext_ln50_4_reg_1258(7 downto 1) <= zext_ln50_4_fu_369_p1(7 downto 1);
                    zext_ln50_6_reg_1274(7 downto 1) <= zext_ln50_6_fu_390_p1(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_gm_2_reg_1252_pp0_iter1_reg(0) <= i_gm_2_reg_1252(0);    i_gm_2_reg_1252_pp0_iter1_reg(8 downto 2) <= i_gm_2_reg_1252(8 downto 2);
                    i_gm_2_reg_1252_pp0_iter2_reg(0) <= i_gm_2_reg_1252_pp0_iter1_reg(0);    i_gm_2_reg_1252_pp0_iter2_reg(8 downto 2) <= i_gm_2_reg_1252_pp0_iter1_reg(8 downto 2);
                    i_gm_3_reg_1268_pp0_iter1_reg(8 downto 2) <= i_gm_3_reg_1268(8 downto 2);
                    i_gm_3_reg_1268_pp0_iter2_reg(8 downto 2) <= i_gm_3_reg_1268_pp0_iter1_reg(8 downto 2);
                    i_gm_3_reg_1268_pp0_iter3_reg(8 downto 2) <= i_gm_3_reg_1268_pp0_iter2_reg(8 downto 2);
                n_2_reg_1217 <= ap_sig_allocacmp_n_2;
                n_2_reg_1217_pp0_iter1_reg <= n_2_reg_1217;
                n_2_reg_1217_pp0_iter2_reg <= n_2_reg_1217_pp0_iter1_reg;
                tmp2_reg_1349 <= grp_fu_1118_p2;
                tmp2_reg_1349_pp0_iter2_reg <= tmp2_reg_1349;
                tmp_reg_1222 <= ap_sig_allocacmp_n_2(9 downto 9);
                tmp_reg_1222_pp0_iter1_reg <= tmp_reg_1222;
                tmp_reg_1222_pp0_iter2_reg <= tmp_reg_1222_pp0_iter1_reg;
                    zext_ln50_1_reg_1236_pp0_iter1_reg(7 downto 0) <= zext_ln50_1_reg_1236(7 downto 0);
                    zext_ln50_4_reg_1258_pp0_iter1_reg(7 downto 1) <= zext_ln50_4_reg_1258(7 downto 1);
                    zext_ln50_6_reg_1274_pp0_iter1_reg(7 downto 1) <= zext_ln50_6_reg_1274(7 downto 1);
                    zext_ln50_6_reg_1274_pp0_iter2_reg(7 downto 1) <= zext_ln50_6_reg_1274_pp0_iter1_reg(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                in_buf_1_load_1_reg_1309 <= in_buf_1_q0;
                in_buf_3_load_1_reg_1314 <= in_buf_3_q0;
                in_buf_3_load_reg_1304 <= in_buf_3_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp2_6_reg_1379 <= grp_fu_1132_p2;
                tmp2_6_reg_1379_pp0_iter2_reg <= tmp2_6_reg_1379;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp2_9_reg_1394 <= grp_fu_1146_p2;
                tmp2_9_reg_1394_pp0_iter2_reg <= tmp2_9_reg_1394;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                u_1_reg_1436 <= in_buf_2_q1;
                u_2_reg_1443 <= in_buf_0_q0;
                u_reg_1424 <= in_buf_0_q1;
            end if;
        end if;
    end process;
    zext_ln50_1_reg_1236(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln50_1_reg_1236_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    i_gm_2_reg_1252(1) <= '1';
    i_gm_2_reg_1252_pp0_iter1_reg(1) <= '1';
    i_gm_2_reg_1252_pp0_iter2_reg(1) <= '1';
    zext_ln50_4_reg_1258(0) <= '1';
    zext_ln50_4_reg_1258(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln50_4_reg_1258_pp0_iter1_reg(0) <= '1';
    zext_ln50_4_reg_1258_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    i_gm_3_reg_1268(1 downto 0) <= "11";
    i_gm_3_reg_1268_pp0_iter1_reg(1 downto 0) <= "11";
    i_gm_3_reg_1268_pp0_iter2_reg(1 downto 0) <= "11";
    i_gm_3_reg_1268_pp0_iter3_reg(1 downto 0) <= "11";
    zext_ln50_6_reg_1274(0) <= '1';
    zext_ln50_6_reg_1274(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln50_6_reg_1274_pp0_iter1_reg(0) <= '1';
    zext_ln50_6_reg_1274_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln50_6_reg_1274_pp0_iter2_reg(0) <= '1';
    zext_ln50_6_reg_1274_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    i_gm_1_reg_1294(0) <= '1';
    i_gm_1_reg_1294_pp0_iter1_reg(0) <= '1';
    i_gm_1_reg_1294_pp0_iter2_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter2_stage1, ap_idle_pp0_0to1, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    GMb6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln48_fu_332_p1, ap_block_pp0_stage0, zext_ln48_1_fu_427_p1, ap_block_pp0_stage1, zext_ln48_2_fu_446_p1, ap_block_pp0_stage2, zext_ln48_3_fu_465_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                GMb6_address0 <= zext_ln48_3_fu_465_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                GMb6_address0 <= zext_ln48_2_fu_446_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                GMb6_address0 <= zext_ln48_1_fu_427_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                GMb6_address0 <= zext_ln48_fu_332_p1(10 - 1 downto 0);
            else 
                GMb6_address0 <= "XXXXXXXXXX";
            end if;
        else 
            GMb6_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    GMb6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            GMb6_ce0 <= ap_const_logic_1;
        else 
            GMb6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln60_2_fu_730_p2 <= std_logic_vector(unsigned(zext_ln41_3_fu_671_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln60_4_fu_884_p2 <= std_logic_vector(unsigned(zext_ln41_5_fu_825_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln60_6_fu_1040_p2 <= std_logic_vector(unsigned(zext_ln41_7_fu_980_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln60_fu_573_p2 <= std_logic_vector(unsigned(zext_ln41_1_fu_514_p1) + unsigned(ap_const_lv17_1CFFF));
    add_ln62_1_fu_767_p2 <= std_logic_vector(unsigned(select_ln62_1_fu_759_p3) + unsigned(add_ln62_5_fu_754_p2));
    add_ln62_2_fu_921_p2 <= std_logic_vector(unsigned(select_ln62_2_fu_913_p3) + unsigned(add_ln62_6_fu_908_p2));
    add_ln62_3_fu_1078_p2 <= std_logic_vector(unsigned(select_ln62_3_fu_1070_p3) + unsigned(add_ln62_7_fu_1064_p2));
    add_ln62_4_fu_597_p2 <= std_logic_vector(unsigned(u_reg_1424) + unsigned(tmp2_12_fu_563_p2));
    add_ln62_5_fu_754_p2 <= std_logic_vector(unsigned(u_1_reg_1436) + unsigned(tmp2_13_fu_720_p2));
    add_ln62_6_fu_908_p2 <= std_logic_vector(unsigned(u_2_reg_1443) + unsigned(tmp2_14_fu_874_p2));
    add_ln62_7_fu_1064_p2 <= std_logic_vector(unsigned(in_buf_2_q0) + unsigned(tmp2_15_fu_1030_p2));
    add_ln62_fu_610_p2 <= std_logic_vector(unsigned(select_ln62_fu_602_p3) + unsigned(add_ln62_4_fu_597_p2));
    add_ln67_1_fu_800_p2 <= std_logic_vector(unsigned(select_ln67_1_fu_792_p3) + unsigned(trunc_ln66_1_fu_788_p1));
    add_ln67_2_fu_954_p2 <= std_logic_vector(unsigned(select_ln67_2_fu_946_p3) + unsigned(trunc_ln66_2_fu_942_p1));
    add_ln67_3_fu_1111_p2 <= std_logic_vector(unsigned(select_ln67_3_fu_1103_p3) + unsigned(trunc_ln66_3_fu_1099_p1));
    add_ln67_fu_643_p2 <= std_logic_vector(unsigned(select_ln67_fu_635_p3) + unsigned(trunc_ln66_fu_631_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, tmp_reg_1222)
    begin
        if (((tmp_reg_1222 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage1_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_1222_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1222_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_90, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_2 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_n_2 <= n_fu_90;
        end if; 
    end process;

    grp_fu_1118_p0 <= grp_fu_1118_p00(16 - 1 downto 0);
    grp_fu_1118_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_1_q1),30));
    grp_fu_1118_p1 <= grp_fu_1118_p10(14 - 1 downto 0);
    grp_fu_1118_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb6_q0),30));
    grp_fu_1125_p0 <= grp_fu_1125_p00(16 - 1 downto 0);
    grp_fu_1125_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_3_load_reg_1304),30));
    grp_fu_1125_p1 <= grp_fu_1125_p10(14 - 1 downto 0);
    grp_fu_1125_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb6_q0),30));
    grp_fu_1132_p0 <= grp_fu_1132_p00(16 - 1 downto 0);
    grp_fu_1132_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_1_load_1_reg_1309),30));
    grp_fu_1132_p1 <= grp_fu_1132_p10(14 - 1 downto 0);
    grp_fu_1132_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb6_q0),30));
    grp_fu_1139_p0 <= grp_fu_1118_p2(16 - 1 downto 0);
    grp_fu_1139_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_1146_p0 <= grp_fu_1146_p00(16 - 1 downto 0);
    grp_fu_1146_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_3_load_1_reg_1314),30));
    grp_fu_1146_p1 <= grp_fu_1146_p10(14 - 1 downto 0);
    grp_fu_1146_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GMb6_q0),30));
    grp_fu_1153_p0 <= grp_fu_1125_p2(16 - 1 downto 0);
    grp_fu_1153_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_1160_p0 <= grp_fu_1132_p2(16 - 1 downto 0);
    grp_fu_1160_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_1167_p0 <= grp_fu_1167_p00(16 - 1 downto 0);
    grp_fu_1167_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln53_fu_486_p0),30));
    grp_fu_1167_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_1167_p2 <= grp_fu_1167_p20(30 - 1 downto 0);
    grp_fu_1167_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_1349_pp0_iter2_reg),31));
    grp_fu_1176_p0 <= grp_fu_1146_p2(16 - 1 downto 0);
    grp_fu_1176_p1 <= ap_const_lv16_2FFF(14 - 1 downto 0);
    grp_fu_1183_p0 <= grp_fu_1183_p00(16 - 1 downto 0);
    grp_fu_1183_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln53_1_fu_492_p0),30));
    grp_fu_1183_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_1183_p2 <= grp_fu_1183_p20(30 - 1 downto 0);
    grp_fu_1183_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_3_reg_1369_pp0_iter2_reg),31));
    grp_fu_1192_p0 <= grp_fu_1192_p00(16 - 1 downto 0);
    grp_fu_1192_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln53_2_fu_498_p0),30));
    grp_fu_1192_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_1192_p2 <= grp_fu_1192_p20(30 - 1 downto 0);
    grp_fu_1192_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_6_reg_1379_pp0_iter2_reg),31));
    grp_fu_1201_p0 <= grp_fu_1201_p00(16 - 1 downto 0);
    grp_fu_1201_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln53_3_fu_653_p0),30));
    grp_fu_1201_p1 <= ap_const_lv30_3001(14 - 1 downto 0);
    grp_fu_1201_p2 <= grp_fu_1201_p20(30 - 1 downto 0);
    grp_fu_1201_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_9_reg_1394_pp0_iter2_reg),31));
    i_1_fu_656_p3 <= (i_gm_1_reg_1294_pp0_iter2_reg & ap_const_lv1_0);
    i_2_fu_810_p3 <= (i_gm_2_reg_1252_pp0_iter2_reg & ap_const_lv1_0);
    i_3_fu_964_p3 <= (i_gm_3_reg_1268_pp0_iter3_reg & ap_const_lv1_0);
    i_fu_501_p2 <= std_logic_vector(shift_left(unsigned(n_2_reg_1217_pp0_iter2_reg),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    i_gm_1_fu_414_p2 <= (i_gm_reg_1226 or ap_const_lv9_1);
    i_gm_2_fu_353_p2 <= (i_gm_fu_320_p1 or ap_const_lv9_2);
    i_gm_3_fu_374_p2 <= (i_gm_fu_320_p1 or ap_const_lv9_3);
    i_gm_fu_320_p1 <= ap_sig_allocacmp_n_2(9 - 1 downto 0);
    in_buf_0_address0 <= zext_ln50_4_reg_1258_pp0_iter1_reg(8 - 1 downto 0);
    in_buf_0_address1 <= zext_ln50_1_reg_1236_pp0_iter1_reg(8 - 1 downto 0);

    in_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_0_ce0 <= ap_const_logic_1;
        else 
            in_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_0_ce1 <= ap_const_logic_1;
        else 
            in_buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    in_buf_1_address0 <= zext_ln50_4_fu_369_p1(8 - 1 downto 0);
    in_buf_1_address1 <= zext_ln50_1_fu_347_p1(8 - 1 downto 0);

    in_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_1_ce0 <= ap_const_logic_1;
        else 
            in_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_1_ce1 <= ap_const_logic_1;
        else 
            in_buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    in_buf_2_address0 <= zext_ln50_6_reg_1274_pp0_iter2_reg(8 - 1 downto 0);
    in_buf_2_address1 <= zext_ln50_1_reg_1236_pp0_iter1_reg(8 - 1 downto 0);

    in_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_2_ce0 <= ap_const_logic_1;
        else 
            in_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_2_ce1 <= ap_const_logic_1;
        else 
            in_buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    in_buf_3_address0 <= zext_ln50_6_fu_390_p1(8 - 1 downto 0);
    in_buf_3_address1 <= zext_ln50_1_fu_347_p1(8 - 1 downto 0);

    in_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_3_ce0 <= ap_const_logic_1;
        else 
            in_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_buf_3_ce1 <= ap_const_logic_1;
        else 
            in_buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln50_1_fu_359_p4 <= i_gm_2_fu_353_p2(8 downto 1);
    lshr_ln50_2_fu_380_p4 <= i_gm_3_fu_374_p2(8 downto 1);
    lshr_ln_fu_337_p4 <= ap_sig_allocacmp_n_2(8 downto 1);
    n_3_fu_395_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_2) + unsigned(ap_const_lv10_4));
    or_ln52_1_fu_674_p2 <= (i_1_fu_656_p3 or ap_const_lv10_1);
    or_ln52_2_fu_828_p2 <= (i_2_fu_810_p3 or ap_const_lv10_1);
    or_ln52_3_fu_984_p2 <= (i_3_fu_964_p3 or ap_const_lv10_1);
    or_ln52_fu_517_p2 <= (i_fu_501_p2 or ap_const_lv10_1);

    out_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln52_fu_523_p1, zext_ln52_2_fu_680_p1, zext_ln52_4_fu_834_p1, zext_ln52_6_fu_990_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_buf_address0 <= zext_ln52_6_fu_990_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_address0 <= zext_ln52_4_fu_834_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            out_buf_address0 <= zext_ln52_2_fu_680_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            out_buf_address0 <= zext_ln52_fu_523_p1(10 - 1 downto 0);
        else 
            out_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln50_fu_506_p1, zext_ln50_2_fu_663_p1, zext_ln50_3_fu_817_p1, zext_ln50_5_fu_971_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_buf_address1 <= zext_ln50_5_fu_971_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_address1 <= zext_ln50_3_fu_817_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            out_buf_address1 <= zext_ln50_2_fu_663_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            out_buf_address1 <= zext_ln50_fu_506_p1(10 - 1 downto 0);
        else 
            out_buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_ce0 <= ap_const_logic_1;
        else 
            out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_ce1 <= ap_const_logic_1;
        else 
            out_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, add_ln67_fu_643_p2, add_ln67_1_fu_800_p2, add_ln67_2_fu_954_p2, add_ln67_3_fu_1111_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_buf_d0 <= add_ln67_3_fu_1111_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_d0 <= add_ln67_2_fu_954_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            out_buf_d0 <= add_ln67_1_fu_800_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            out_buf_d0 <= add_ln67_fu_643_p2;
        else 
            out_buf_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, add_ln62_fu_610_p2, add_ln62_1_fu_767_p2, add_ln62_2_fu_921_p2, add_ln62_3_fu_1078_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_buf_d1 <= add_ln62_3_fu_1078_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_buf_d1 <= add_ln62_2_fu_921_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            out_buf_d1 <= add_ln62_1_fu_767_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            out_buf_d1 <= add_ln62_fu_610_p2;
        else 
            out_buf_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_we0 <= ap_const_logic_1;
        else 
            out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_buf_we1 <= ap_const_logic_1;
        else 
            out_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln56_1_fu_712_p3 <= 
        ap_const_lv16_3001 when (tmp_4_fu_704_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln56_2_fu_866_p3 <= 
        ap_const_lv16_3001 when (tmp_7_fu_858_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln56_3_fu_1022_p3 <= 
        ap_const_lv16_3001 when (tmp_10_fu_1014_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln56_fu_555_p3 <= 
        ap_const_lv16_3001 when (tmp_1_fu_547_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln62_1_fu_759_p3 <= 
        ap_const_lv16_0 when (tmp_5_fu_746_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln62_2_fu_913_p3 <= 
        ap_const_lv16_0 when (tmp_8_fu_900_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln62_3_fu_1070_p3 <= 
        ap_const_lv16_0 when (tmp_11_fu_1056_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln62_fu_602_p3 <= 
        ap_const_lv16_0 when (tmp_2_fu_589_p3(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln67_1_fu_792_p3 <= 
        ap_const_lv16_3001 when (tmp_6_fu_780_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln67_2_fu_946_p3 <= 
        ap_const_lv16_3001 when (tmp_9_fu_934_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln67_3_fu_1103_p3 <= 
        ap_const_lv16_3001 when (tmp_12_fu_1091_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln67_fu_635_p3 <= 
        ap_const_lv16_3001 when (tmp_3_fu_623_p3(0) = '1') else 
        ap_const_lv16_0;
        sext_ln42_1_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_12_fu_563_p2),18));

        sext_ln42_2_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_4_fu_694_p2),16));

        sext_ln42_3_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_13_fu_720_p2),18));

        sext_ln42_4_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_7_fu_848_p2),16));

        sext_ln42_5_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_14_fu_874_p2),18));

        sext_ln42_6_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_10_fu_1004_p2),16));

        sext_ln42_7_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_15_fu_1030_p2),18));

        sext_ln42_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_1_fu_537_p2),16));

        sext_ln60_1_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_2_fu_730_p2),18));

        sext_ln60_2_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_4_fu_884_p2),18));

        sext_ln60_3_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_6_fu_1040_p2),18));

        sext_ln60_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_fu_573_p2),18));

    tmp1_10_fu_1050_p2 <= std_logic_vector(signed(sext_ln60_3_fu_1046_p1) + signed(sext_ln42_7_fu_1036_p1));
    tmp1_11_fu_1085_p2 <= std_logic_vector(unsigned(zext_ln41_6_fu_976_p1) - unsigned(sext_ln42_7_fu_1036_p1));
    tmp1_1_fu_583_p2 <= std_logic_vector(signed(sext_ln60_fu_579_p1) + signed(sext_ln42_1_fu_569_p1));
    tmp1_2_fu_617_p2 <= std_logic_vector(unsigned(zext_ln41_fu_511_p1) - unsigned(sext_ln42_1_fu_569_p1));
    tmp1_4_fu_740_p2 <= std_logic_vector(signed(sext_ln60_1_fu_736_p1) + signed(sext_ln42_3_fu_726_p1));
    tmp1_5_fu_774_p2 <= std_logic_vector(unsigned(zext_ln41_2_fu_668_p1) - unsigned(sext_ln42_3_fu_726_p1));
    tmp1_7_fu_894_p2 <= std_logic_vector(signed(sext_ln60_2_fu_890_p1) + signed(sext_ln42_5_fu_880_p1));
    tmp1_8_fu_928_p2 <= std_logic_vector(unsigned(zext_ln41_4_fu_822_p1) - unsigned(sext_ln42_5_fu_880_p1));
    tmp2_10_fu_1004_p2 <= std_logic_vector(unsigned(trunc_ln42_3_fu_995_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_12_fu_563_p2 <= std_logic_vector(unsigned(select_ln56_fu_555_p3) + unsigned(sext_ln42_fu_543_p1));
    tmp2_13_fu_720_p2 <= std_logic_vector(unsigned(select_ln56_1_fu_712_p3) + unsigned(sext_ln42_2_fu_700_p1));
    tmp2_14_fu_874_p2 <= std_logic_vector(unsigned(select_ln56_2_fu_866_p3) + unsigned(sext_ln42_4_fu_854_p1));
    tmp2_15_fu_1030_p2 <= std_logic_vector(unsigned(select_ln56_3_fu_1022_p3) + unsigned(sext_ln42_6_fu_1010_p1));
    tmp2_1_fu_537_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_528_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_4_fu_694_p2 <= std_logic_vector(unsigned(trunc_ln42_1_fu_685_p4) + unsigned(ap_const_lv15_4FFF));
    tmp2_7_fu_848_p2 <= std_logic_vector(unsigned(trunc_ln42_2_fu_839_p4) + unsigned(ap_const_lv15_4FFF));
    tmp_10_fu_1014_p3 <= tmp2_10_fu_1004_p2(14 downto 14);
    tmp_11_fu_1056_p3 <= tmp1_10_fu_1050_p2(17 downto 17);
    tmp_12_fu_1091_p3 <= tmp1_11_fu_1085_p2(17 downto 17);
    tmp_1_fu_547_p3 <= tmp2_1_fu_537_p2(14 downto 14);
    tmp_2_fu_589_p3 <= tmp1_1_fu_583_p2(17 downto 17);
    tmp_3_fu_623_p3 <= tmp1_2_fu_617_p2(17 downto 17);
    tmp_4_fu_704_p3 <= tmp2_4_fu_694_p2(14 downto 14);
    tmp_5_fu_746_p3 <= tmp1_4_fu_740_p2(17 downto 17);
    tmp_6_fu_780_p3 <= tmp1_5_fu_774_p2(17 downto 17);
    tmp_7_fu_858_p3 <= tmp2_7_fu_848_p2(14 downto 14);
    tmp_8_fu_900_p3 <= tmp1_7_fu_894_p2(17 downto 17);
    tmp_9_fu_934_p3 <= tmp1_8_fu_928_p2(17 downto 17);
    tmp_fu_312_p3 <= ap_sig_allocacmp_n_2(9 downto 9);
    trunc_ln1_fu_528_p4 <= grp_fu_1167_p3(30 downto 16);
    trunc_ln42_1_fu_685_p4 <= grp_fu_1183_p3(30 downto 16);
    trunc_ln42_2_fu_839_p4 <= grp_fu_1192_p3(30 downto 16);
    trunc_ln42_3_fu_995_p4 <= grp_fu_1201_p3(30 downto 16);
    trunc_ln66_1_fu_788_p1 <= tmp1_5_fu_774_p2(16 - 1 downto 0);
    trunc_ln66_2_fu_942_p1 <= tmp1_8_fu_928_p2(16 - 1 downto 0);
    trunc_ln66_3_fu_1099_p1 <= tmp1_11_fu_1085_p2(16 - 1 downto 0);
    trunc_ln66_fu_631_p1 <= tmp1_2_fu_617_p2(16 - 1 downto 0);
    zext_ln41_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_1424),17));
    zext_ln41_2_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_1_reg_1436),18));
    zext_ln41_3_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_1_reg_1436),17));
    zext_ln41_4_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_2_reg_1443),18));
    zext_ln41_5_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_2_reg_1443),17));
    zext_ln41_6_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_2_q0),18));
    zext_ln41_7_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_buf_2_q0),17));
    zext_ln41_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_reg_1424),18));
    zext_ln48_1_cast_fu_419_p3 <= (ap_const_lv1_1 & i_gm_1_fu_414_p2);
    zext_ln48_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln48_1_cast_fu_419_p3),64));
    zext_ln48_2_cast_fu_439_p3 <= (ap_const_lv1_1 & i_gm_2_reg_1252);
    zext_ln48_2_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln48_2_cast_fu_439_p3),64));
    zext_ln48_3_cast_fu_458_p3 <= (ap_const_lv1_1 & i_gm_3_reg_1268);
    zext_ln48_3_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln48_3_cast_fu_458_p3),64));
    zext_ln48_cast_fu_324_p3 <= (ap_const_lv1_1 & i_gm_fu_320_p1);
    zext_ln48_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln48_cast_fu_324_p3),64));
    zext_ln50_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_337_p4),64));
    zext_ln50_2_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_656_p3),64));
    zext_ln50_3_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_810_p3),64));
    zext_ln50_4_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln50_1_fu_359_p4),64));
    zext_ln50_5_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_fu_964_p3),64));
    zext_ln50_6_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln50_2_fu_380_p4),64));
    zext_ln50_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_501_p2),64));
    zext_ln52_2_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_1_fu_674_p2),64));
    zext_ln52_4_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_2_fu_828_p2),64));
    zext_ln52_6_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_3_fu_984_p2),64));
    zext_ln52_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_fu_517_p2),64));
    zext_ln53_1_fu_492_p0 <= grp_fu_1153_p2;
    zext_ln53_2_fu_498_p0 <= grp_fu_1160_p2;
    zext_ln53_3_fu_653_p0 <= grp_fu_1176_p2;
    zext_ln53_fu_486_p0 <= grp_fu_1139_p2;
end behav;
