-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_complex_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_re : IN STD_LOGIC_VECTOR (63 downto 0);
    x_im : IN STD_LOGIC_VECTOR (63 downto 0);
    y_re : IN STD_LOGIC_VECTOR (63 downto 0);
    y_im : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of FFT_complex_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal y_im_read_reg_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal y_im_read_reg_86_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_im_read_reg_86_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_im_read_reg_86_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_im_read_reg_86_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_read_reg_99 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_read_reg_99_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_read_reg_99_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_read_reg_99_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_read_reg_99_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_re_read_reg_105 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_re_read_reg_105_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_re_read_reg_105_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_re_read_reg_105_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_re_read_reg_105_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_36_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_y_reg_111 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_42_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_y_reg_116 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_48_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_x_reg_121 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_62_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul1_reg_126 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_66_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_131 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_70_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul3_reg_136 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_54_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_58_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_36_ce : STD_LOGIC;
    signal grp_fu_42_ce : STD_LOGIC;
    signal grp_fu_48_ce : STD_LOGIC;
    signal grp_fu_54_ce : STD_LOGIC;
    signal grp_fu_58_ce : STD_LOGIC;
    signal grp_fu_62_ce : STD_LOGIC;
    signal grp_fu_66_ce : STD_LOGIC;
    signal grp_fu_70_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal x_re_int_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_im_int_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_re_int_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_im_int_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (63 downto 0);

    component FFT_dsub_64ns_64ns_64_5_full_dsp_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_dadd_64ns_64ns_64_5_full_dsp_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_dmul_64ns_64ns_64_5_max_dsp_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dsub_64ns_64ns_64_5_full_dsp_0_U7 : component FFT_dsub_64ns_64ns_64_5_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_re_int_reg,
        din1 => y_im_int_reg,
        ce => grp_fu_36_ce,
        dout => grp_fu_36_p2);

    dadd_64ns_64ns_64_5_full_dsp_0_U8 : component FFT_dadd_64ns_64ns_64_5_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_re_int_reg,
        din1 => y_im_int_reg,
        ce => grp_fu_42_ce,
        dout => grp_fu_42_p2);

    dsub_64ns_64ns_64_5_full_dsp_0_U9 : component FFT_dsub_64ns_64ns_64_5_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_re_int_reg,
        din1 => x_im_int_reg,
        ce => grp_fu_48_ce,
        dout => grp_fu_48_p2);

    dadd_64ns_64ns_64_5_full_dsp_0_U10 : component FFT_dadd_64ns_64ns_64_5_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul1_reg_126,
        din1 => mul3_reg_136,
        ce => grp_fu_54_ce,
        dout => grp_fu_54_p2);

    dadd_64ns_64ns_64_5_full_dsp_0_U11 : component FFT_dadd_64ns_64ns_64_5_full_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul2_reg_131,
        din1 => mul3_reg_136,
        ce => grp_fu_58_ce,
        dout => grp_fu_58_p2);

    dmul_64ns_64ns_64_5_max_dsp_0_U12 : component FFT_dmul_64ns_64ns_64_5_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_y_reg_111,
        din1 => x_re_read_reg_105_pp0_iter4_reg,
        ce => grp_fu_62_ce,
        dout => grp_fu_62_p2);

    dmul_64ns_64ns_64_5_max_dsp_0_U13 : component FFT_dmul_64ns_64ns_64_5_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_y_reg_116,
        din1 => x_im_read_reg_99_pp0_iter4_reg,
        ce => grp_fu_66_ce,
        dout => grp_fu_66_p2);

    dmul_64ns_64ns_64_5_max_dsp_0_U14 : component FFT_dmul_64ns_64ns_64_5_max_dsp_0
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_x_reg_121,
        din1 => y_im_read_reg_86_pp0_iter4_reg,
        ce => grp_fu_70_ce,
        dout => grp_fu_70_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                add_y_reg_116 <= grp_fu_42_p2;
                mul1_reg_126 <= grp_fu_62_p2;
                mul2_reg_131 <= grp_fu_66_p2;
                mul3_reg_136 <= grp_fu_70_p2;
                sub_x_reg_121 <= grp_fu_48_p2;
                sub_y_reg_111 <= grp_fu_36_p2;
                x_im_read_reg_99 <= x_im_int_reg;
                x_im_read_reg_99_pp0_iter1_reg <= x_im_read_reg_99;
                x_im_read_reg_99_pp0_iter2_reg <= x_im_read_reg_99_pp0_iter1_reg;
                x_im_read_reg_99_pp0_iter3_reg <= x_im_read_reg_99_pp0_iter2_reg;
                x_im_read_reg_99_pp0_iter4_reg <= x_im_read_reg_99_pp0_iter3_reg;
                x_re_read_reg_105 <= x_re_int_reg;
                x_re_read_reg_105_pp0_iter1_reg <= x_re_read_reg_105;
                x_re_read_reg_105_pp0_iter2_reg <= x_re_read_reg_105_pp0_iter1_reg;
                x_re_read_reg_105_pp0_iter3_reg <= x_re_read_reg_105_pp0_iter2_reg;
                x_re_read_reg_105_pp0_iter4_reg <= x_re_read_reg_105_pp0_iter3_reg;
                y_im_read_reg_86 <= y_im_int_reg;
                y_im_read_reg_86_pp0_iter1_reg <= y_im_read_reg_86;
                y_im_read_reg_86_pp0_iter2_reg <= y_im_read_reg_86_pp0_iter1_reg;
                y_im_read_reg_86_pp0_iter3_reg <= y_im_read_reg_86_pp0_iter2_reg;
                y_im_read_reg_86_pp0_iter4_reg <= y_im_read_reg_86_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= grp_fu_54_p2;
                ap_return_1_int_reg <= grp_fu_58_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                x_im_int_reg <= x_im;
                x_re_int_reg <= x_re;
                y_im_int_reg <= y_im;
                y_re_int_reg <= y_re;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(grp_fu_54_p2, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= grp_fu_54_p2;
        else 
            ap_return_0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(grp_fu_58_p2, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= grp_fu_58_p2;
        else 
            ap_return_1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_36_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_36_ce <= ap_const_logic_1;
        else 
            grp_fu_36_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_42_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_42_ce <= ap_const_logic_1;
        else 
            grp_fu_42_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_48_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_48_ce <= ap_const_logic_1;
        else 
            grp_fu_48_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_54_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_54_ce <= ap_const_logic_1;
        else 
            grp_fu_54_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_58_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_58_ce <= ap_const_logic_1;
        else 
            grp_fu_58_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_62_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_62_ce <= ap_const_logic_1;
        else 
            grp_fu_62_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_66_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_66_ce <= ap_const_logic_1;
        else 
            grp_fu_66_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_70_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_70_ce <= ap_const_logic_1;
        else 
            grp_fu_70_ce <= ap_const_logic_0;
        end if; 
    end process;

end behav;
