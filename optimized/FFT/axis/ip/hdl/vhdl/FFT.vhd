-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    f_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    f_in_TVALID : IN STD_LOGIC;
    f_in_TREADY : OUT STD_LOGIC;
    f_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    f_out_TVALID : OUT STD_LOGIC;
    f_out_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of FFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFT_FFT,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.042000,HLS_SYN_LAT=4676,HLS_SYN_TPT=none,HLS_SYN_MEM=88,HLS_SYN_DSP=0,HLS_SYN_FF=20387,HLS_SYN_LUT=19904,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_buf_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_buf_r_ce0 : STD_LOGIC;
    signal in_buf_r_we0 : STD_LOGIC;
    signal in_buf_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_buf_r_ce1 : STD_LOGIC;
    signal in_buf_r_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_buf_i_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_buf_i_ce0 : STD_LOGIC;
    signal in_buf_i_we0 : STD_LOGIC;
    signal in_buf_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_buf_i_ce1 : STD_LOGIC;
    signal in_buf_i_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_buf_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_buf_r_ce0 : STD_LOGIC;
    signal out_buf_r_we0 : STD_LOGIC;
    signal out_buf_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_buf_r_ce1 : STD_LOGIC;
    signal out_buf_r_we1 : STD_LOGIC;
    signal out_buf_i_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_buf_i_ce0 : STD_LOGIC;
    signal out_buf_i_we0 : STD_LOGIC;
    signal out_buf_i_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_buf_i_ce1 : STD_LOGIC;
    signal out_buf_i_we1 : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_ap_start : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_ap_done : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_ap_idle : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_ap_ready : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_f_in_TREADY : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_in_buf_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_FFT_Pipeline_1_fu_64_in_buf_r_ce0 : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_in_buf_r_we0 : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_in_buf_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_Pipeline_2_fu_71_ap_start : STD_LOGIC;
    signal grp_FFT_Pipeline_2_fu_71_ap_done : STD_LOGIC;
    signal grp_FFT_Pipeline_2_fu_71_ap_idle : STD_LOGIC;
    signal grp_FFT_Pipeline_2_fu_71_ap_ready : STD_LOGIC;
    signal grp_FFT_Pipeline_2_fu_71_f_in_TREADY : STD_LOGIC;
    signal grp_FFT_Pipeline_2_fu_71_in_buf_i_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_FFT_Pipeline_2_fu_71_in_buf_i_ce0 : STD_LOGIC;
    signal grp_FFT_Pipeline_2_fu_71_in_buf_i_we0 : STD_LOGIC;
    signal grp_FFT_Pipeline_2_fu_71_in_buf_i_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_10_stages_fu_78_ap_start : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_ap_done : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_ap_idle : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_ap_ready : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_in_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_10_stages_fu_78_in_r_ce0 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_in_r_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_10_stages_fu_78_in_r_ce1 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_in_i_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_10_stages_fu_78_in_i_ce0 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_in_i_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_10_stages_fu_78_in_i_ce1 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_10_stages_fu_78_out_r_ce0 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_r_we0 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_10_stages_fu_78_out_r_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_10_stages_fu_78_out_r_ce1 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_r_we1 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_r_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_10_stages_fu_78_out_i_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_10_stages_fu_78_out_i_ce0 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_i_we0 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_i_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_10_stages_fu_78_out_i_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fft_10_stages_fu_78_out_i_ce1 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_i_we1 : STD_LOGIC;
    signal grp_fft_10_stages_fu_78_out_i_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_Pipeline_3_fu_90_ap_start : STD_LOGIC;
    signal grp_FFT_Pipeline_3_fu_90_ap_done : STD_LOGIC;
    signal grp_FFT_Pipeline_3_fu_90_ap_idle : STD_LOGIC;
    signal grp_FFT_Pipeline_3_fu_90_ap_ready : STD_LOGIC;
    signal grp_FFT_Pipeline_3_fu_90_f_out_TREADY : STD_LOGIC;
    signal grp_FFT_Pipeline_3_fu_90_out_buf_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_FFT_Pipeline_3_fu_90_out_buf_r_ce0 : STD_LOGIC;
    signal grp_FFT_Pipeline_3_fu_90_f_out_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_Pipeline_3_fu_90_f_out_TVALID : STD_LOGIC;
    signal grp_FFT_Pipeline_4_fu_97_ap_start : STD_LOGIC;
    signal grp_FFT_Pipeline_4_fu_97_ap_done : STD_LOGIC;
    signal grp_FFT_Pipeline_4_fu_97_ap_idle : STD_LOGIC;
    signal grp_FFT_Pipeline_4_fu_97_ap_ready : STD_LOGIC;
    signal grp_FFT_Pipeline_4_fu_97_f_out_TREADY : STD_LOGIC;
    signal grp_FFT_Pipeline_4_fu_97_out_buf_i_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_FFT_Pipeline_4_fu_97_out_buf_i_ce0 : STD_LOGIC;
    signal grp_FFT_Pipeline_4_fu_97_f_out_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_FFT_Pipeline_4_fu_97_f_out_TVALID : STD_LOGIC;
    signal grp_FFT_Pipeline_1_fu_64_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_FFT_Pipeline_2_fu_71_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fft_10_stages_fu_78_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_FFT_Pipeline_3_fu_90_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_FFT_Pipeline_4_fu_97_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal regslice_both_f_out_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal regslice_both_f_in_U_apdone_blk : STD_LOGIC;
    signal f_in_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal f_in_TVALID_int_regslice : STD_LOGIC;
    signal f_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_f_in_U_ack_in : STD_LOGIC;
    signal f_out_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal f_out_TVALID_int_regslice : STD_LOGIC;
    signal f_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_f_out_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_FFT_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_in_TVALID : IN STD_LOGIC;
        f_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        f_in_TREADY : OUT STD_LOGIC;
        in_buf_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_buf_r_ce0 : OUT STD_LOGIC;
        in_buf_r_we0 : OUT STD_LOGIC;
        in_buf_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_FFT_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_in_TVALID : IN STD_LOGIC;
        f_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        f_in_TREADY : OUT STD_LOGIC;
        in_buf_i_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_buf_i_ce0 : OUT STD_LOGIC;
        in_buf_i_we0 : OUT STD_LOGIC;
        in_buf_i_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_fft_10_stages IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_i_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_i_ce0 : OUT STD_LOGIC;
        in_i_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_i_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_i_ce1 : OUT STD_LOGIC;
        in_i_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_i_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_i_ce0 : OUT STD_LOGIC;
        out_i_we0 : OUT STD_LOGIC;
        out_i_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_i_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_i_ce1 : OUT STD_LOGIC;
        out_i_we1 : OUT STD_LOGIC;
        out_i_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_FFT_Pipeline_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_out_TREADY : IN STD_LOGIC;
        out_buf_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_buf_r_ce0 : OUT STD_LOGIC;
        out_buf_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        f_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        f_out_TVALID : OUT STD_LOGIC );
    end component;


    component FFT_FFT_Pipeline_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_out_TREADY : IN STD_LOGIC;
        out_buf_i_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_buf_i_ce0 : OUT STD_LOGIC;
        out_buf_i_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        f_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        f_out_TVALID : OUT STD_LOGIC );
    end component;


    component FFT_in_buf_r_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_out_buf_r_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FFT_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component FFT_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    in_buf_r_U : component FFT_in_buf_r_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_buf_r_address0,
        ce0 => in_buf_r_ce0,
        we0 => in_buf_r_we0,
        d0 => grp_FFT_Pipeline_1_fu_64_in_buf_r_d0,
        q0 => in_buf_r_q0,
        address1 => grp_fft_10_stages_fu_78_in_r_address1,
        ce1 => in_buf_r_ce1,
        q1 => in_buf_r_q1);

    in_buf_i_U : component FFT_in_buf_r_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_buf_i_address0,
        ce0 => in_buf_i_ce0,
        we0 => in_buf_i_we0,
        d0 => grp_FFT_Pipeline_2_fu_71_in_buf_i_d0,
        q0 => in_buf_i_q0,
        address1 => grp_fft_10_stages_fu_78_in_i_address1,
        ce1 => in_buf_i_ce1,
        q1 => in_buf_i_q1);

    out_buf_r_U : component FFT_out_buf_r_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_r_address0,
        ce0 => out_buf_r_ce0,
        we0 => out_buf_r_we0,
        d0 => grp_fft_10_stages_fu_78_out_r_d0,
        q0 => out_buf_r_q0,
        address1 => grp_fft_10_stages_fu_78_out_r_address1,
        ce1 => out_buf_r_ce1,
        we1 => out_buf_r_we1,
        d1 => grp_fft_10_stages_fu_78_out_r_d1);

    out_buf_i_U : component FFT_out_buf_r_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_i_address0,
        ce0 => out_buf_i_ce0,
        we0 => out_buf_i_we0,
        d0 => grp_fft_10_stages_fu_78_out_i_d0,
        q0 => out_buf_i_q0,
        address1 => grp_fft_10_stages_fu_78_out_i_address1,
        ce1 => out_buf_i_ce1,
        we1 => out_buf_i_we1,
        d1 => grp_fft_10_stages_fu_78_out_i_d1);

    grp_FFT_Pipeline_1_fu_64 : component FFT_FFT_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT_Pipeline_1_fu_64_ap_start,
        ap_done => grp_FFT_Pipeline_1_fu_64_ap_done,
        ap_idle => grp_FFT_Pipeline_1_fu_64_ap_idle,
        ap_ready => grp_FFT_Pipeline_1_fu_64_ap_ready,
        f_in_TVALID => f_in_TVALID_int_regslice,
        f_in_TDATA => f_in_TDATA_int_regslice,
        f_in_TREADY => grp_FFT_Pipeline_1_fu_64_f_in_TREADY,
        in_buf_r_address0 => grp_FFT_Pipeline_1_fu_64_in_buf_r_address0,
        in_buf_r_ce0 => grp_FFT_Pipeline_1_fu_64_in_buf_r_ce0,
        in_buf_r_we0 => grp_FFT_Pipeline_1_fu_64_in_buf_r_we0,
        in_buf_r_d0 => grp_FFT_Pipeline_1_fu_64_in_buf_r_d0);

    grp_FFT_Pipeline_2_fu_71 : component FFT_FFT_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT_Pipeline_2_fu_71_ap_start,
        ap_done => grp_FFT_Pipeline_2_fu_71_ap_done,
        ap_idle => grp_FFT_Pipeline_2_fu_71_ap_idle,
        ap_ready => grp_FFT_Pipeline_2_fu_71_ap_ready,
        f_in_TVALID => f_in_TVALID_int_regslice,
        f_in_TDATA => f_in_TDATA_int_regslice,
        f_in_TREADY => grp_FFT_Pipeline_2_fu_71_f_in_TREADY,
        in_buf_i_address0 => grp_FFT_Pipeline_2_fu_71_in_buf_i_address0,
        in_buf_i_ce0 => grp_FFT_Pipeline_2_fu_71_in_buf_i_ce0,
        in_buf_i_we0 => grp_FFT_Pipeline_2_fu_71_in_buf_i_we0,
        in_buf_i_d0 => grp_FFT_Pipeline_2_fu_71_in_buf_i_d0);

    grp_fft_10_stages_fu_78 : component FFT_fft_10_stages
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fft_10_stages_fu_78_ap_start,
        ap_done => grp_fft_10_stages_fu_78_ap_done,
        ap_idle => grp_fft_10_stages_fu_78_ap_idle,
        ap_ready => grp_fft_10_stages_fu_78_ap_ready,
        in_r_address0 => grp_fft_10_stages_fu_78_in_r_address0,
        in_r_ce0 => grp_fft_10_stages_fu_78_in_r_ce0,
        in_r_q0 => in_buf_r_q0,
        in_r_address1 => grp_fft_10_stages_fu_78_in_r_address1,
        in_r_ce1 => grp_fft_10_stages_fu_78_in_r_ce1,
        in_r_q1 => in_buf_r_q1,
        in_i_address0 => grp_fft_10_stages_fu_78_in_i_address0,
        in_i_ce0 => grp_fft_10_stages_fu_78_in_i_ce0,
        in_i_q0 => in_buf_i_q0,
        in_i_address1 => grp_fft_10_stages_fu_78_in_i_address1,
        in_i_ce1 => grp_fft_10_stages_fu_78_in_i_ce1,
        in_i_q1 => in_buf_i_q1,
        out_r_address0 => grp_fft_10_stages_fu_78_out_r_address0,
        out_r_ce0 => grp_fft_10_stages_fu_78_out_r_ce0,
        out_r_we0 => grp_fft_10_stages_fu_78_out_r_we0,
        out_r_d0 => grp_fft_10_stages_fu_78_out_r_d0,
        out_r_address1 => grp_fft_10_stages_fu_78_out_r_address1,
        out_r_ce1 => grp_fft_10_stages_fu_78_out_r_ce1,
        out_r_we1 => grp_fft_10_stages_fu_78_out_r_we1,
        out_r_d1 => grp_fft_10_stages_fu_78_out_r_d1,
        out_i_address0 => grp_fft_10_stages_fu_78_out_i_address0,
        out_i_ce0 => grp_fft_10_stages_fu_78_out_i_ce0,
        out_i_we0 => grp_fft_10_stages_fu_78_out_i_we0,
        out_i_d0 => grp_fft_10_stages_fu_78_out_i_d0,
        out_i_address1 => grp_fft_10_stages_fu_78_out_i_address1,
        out_i_ce1 => grp_fft_10_stages_fu_78_out_i_ce1,
        out_i_we1 => grp_fft_10_stages_fu_78_out_i_we1,
        out_i_d1 => grp_fft_10_stages_fu_78_out_i_d1);

    grp_FFT_Pipeline_3_fu_90 : component FFT_FFT_Pipeline_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT_Pipeline_3_fu_90_ap_start,
        ap_done => grp_FFT_Pipeline_3_fu_90_ap_done,
        ap_idle => grp_FFT_Pipeline_3_fu_90_ap_idle,
        ap_ready => grp_FFT_Pipeline_3_fu_90_ap_ready,
        f_out_TREADY => grp_FFT_Pipeline_3_fu_90_f_out_TREADY,
        out_buf_r_address0 => grp_FFT_Pipeline_3_fu_90_out_buf_r_address0,
        out_buf_r_ce0 => grp_FFT_Pipeline_3_fu_90_out_buf_r_ce0,
        out_buf_r_q0 => out_buf_r_q0,
        f_out_TDATA => grp_FFT_Pipeline_3_fu_90_f_out_TDATA,
        f_out_TVALID => grp_FFT_Pipeline_3_fu_90_f_out_TVALID);

    grp_FFT_Pipeline_4_fu_97 : component FFT_FFT_Pipeline_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FFT_Pipeline_4_fu_97_ap_start,
        ap_done => grp_FFT_Pipeline_4_fu_97_ap_done,
        ap_idle => grp_FFT_Pipeline_4_fu_97_ap_idle,
        ap_ready => grp_FFT_Pipeline_4_fu_97_ap_ready,
        f_out_TREADY => grp_FFT_Pipeline_4_fu_97_f_out_TREADY,
        out_buf_i_address0 => grp_FFT_Pipeline_4_fu_97_out_buf_i_address0,
        out_buf_i_ce0 => grp_FFT_Pipeline_4_fu_97_out_buf_i_ce0,
        out_buf_i_q0 => out_buf_i_q0,
        f_out_TDATA => grp_FFT_Pipeline_4_fu_97_f_out_TDATA,
        f_out_TVALID => grp_FFT_Pipeline_4_fu_97_f_out_TVALID);

    control_s_axi_U : component FFT_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_f_in_U : component FFT_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => f_in_TDATA,
        vld_in => f_in_TVALID,
        ack_in => regslice_both_f_in_U_ack_in,
        data_out => f_in_TDATA_int_regslice,
        vld_out => f_in_TVALID_int_regslice,
        ack_out => f_in_TREADY_int_regslice,
        apdone_blk => regslice_both_f_in_U_apdone_blk);

    regslice_both_f_out_U : component FFT_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => f_out_TDATA_int_regslice,
        vld_in => f_out_TVALID_int_regslice,
        ack_in => f_out_TREADY_int_regslice,
        data_out => f_out_TDATA,
        vld_out => regslice_both_f_out_U_vld_out,
        ack_out => f_out_TREADY,
        apdone_blk => regslice_both_f_out_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_FFT_Pipeline_1_fu_64_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT_Pipeline_1_fu_64_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_FFT_Pipeline_1_fu_64_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT_Pipeline_1_fu_64_ap_ready = ap_const_logic_1)) then 
                    grp_FFT_Pipeline_1_fu_64_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FFT_Pipeline_2_fu_71_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT_Pipeline_2_fu_71_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_FFT_Pipeline_2_fu_71_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT_Pipeline_2_fu_71_ap_ready = ap_const_logic_1)) then 
                    grp_FFT_Pipeline_2_fu_71_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FFT_Pipeline_3_fu_90_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT_Pipeline_3_fu_90_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_FFT_Pipeline_3_fu_90_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT_Pipeline_3_fu_90_ap_ready = ap_const_logic_1)) then 
                    grp_FFT_Pipeline_3_fu_90_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FFT_Pipeline_4_fu_97_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FFT_Pipeline_4_fu_97_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_FFT_Pipeline_4_fu_97_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT_Pipeline_4_fu_97_ap_ready = ap_const_logic_1)) then 
                    grp_FFT_Pipeline_4_fu_97_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_10_stages_fu_78_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fft_10_stages_fu_78_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_fft_10_stages_fu_78_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_10_stages_fu_78_ap_ready = ap_const_logic_1)) then 
                    grp_fft_10_stages_fu_78_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_FFT_Pipeline_1_fu_64_ap_done, grp_FFT_Pipeline_2_fu_71_ap_done, grp_fft_10_stages_fu_78_ap_done, grp_FFT_Pipeline_3_fu_90_ap_done, grp_FFT_Pipeline_4_fu_97_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, regslice_both_f_out_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_FFT_Pipeline_1_fu_64_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_FFT_Pipeline_2_fu_71_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_fft_10_stages_fu_78_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_FFT_Pipeline_3_fu_90_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_FFT_Pipeline_4_fu_97_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((regslice_both_f_out_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_FFT_Pipeline_3_fu_90_ap_done)
    begin
        if ((grp_FFT_Pipeline_3_fu_90_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_FFT_Pipeline_4_fu_97_ap_done)
    begin
        if ((grp_FFT_Pipeline_4_fu_97_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(regslice_both_f_out_U_apdone_blk)
    begin
        if ((regslice_both_f_out_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_FFT_Pipeline_1_fu_64_ap_done)
    begin
        if ((grp_FFT_Pipeline_1_fu_64_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_FFT_Pipeline_2_fu_71_ap_done)
    begin
        if ((grp_FFT_Pipeline_2_fu_71_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_fft_10_stages_fu_78_ap_done)
    begin
        if ((grp_fft_10_stages_fu_78_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state14, regslice_both_f_out_U_apdone_blk)
    begin
        if (((regslice_both_f_out_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, regslice_both_f_out_U_apdone_blk)
    begin
        if (((regslice_both_f_out_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    f_in_TREADY <= regslice_both_f_in_U_ack_in;

    f_in_TREADY_int_regslice_assign_proc : process(grp_FFT_Pipeline_1_fu_64_f_in_TREADY, grp_FFT_Pipeline_2_fu_71_f_in_TREADY, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            f_in_TREADY_int_regslice <= grp_FFT_Pipeline_2_fu_71_f_in_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            f_in_TREADY_int_regslice <= grp_FFT_Pipeline_1_fu_64_f_in_TREADY;
        else 
            f_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    f_out_TDATA_int_regslice_assign_proc : process(grp_FFT_Pipeline_3_fu_90_f_out_TDATA, grp_FFT_Pipeline_3_fu_90_f_out_TVALID, grp_FFT_Pipeline_4_fu_97_f_out_TDATA, grp_FFT_Pipeline_4_fu_97_f_out_TVALID, ap_CS_fsm_state10, ap_CS_fsm_state13)
    begin
        if (((grp_FFT_Pipeline_4_fu_97_f_out_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            f_out_TDATA_int_regslice <= grp_FFT_Pipeline_4_fu_97_f_out_TDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_FFT_Pipeline_3_fu_90_f_out_TVALID = ap_const_logic_1))) then 
            f_out_TDATA_int_regslice <= grp_FFT_Pipeline_3_fu_90_f_out_TDATA;
        else 
            f_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    f_out_TVALID <= regslice_both_f_out_U_vld_out;

    f_out_TVALID_int_regslice_assign_proc : process(grp_FFT_Pipeline_3_fu_90_f_out_TVALID, grp_FFT_Pipeline_4_fu_97_f_out_TVALID, ap_CS_fsm_state10, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            f_out_TVALID_int_regslice <= grp_FFT_Pipeline_4_fu_97_f_out_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_out_TVALID_int_regslice <= grp_FFT_Pipeline_3_fu_90_f_out_TVALID;
        else 
            f_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    grp_FFT_Pipeline_1_fu_64_ap_start <= grp_FFT_Pipeline_1_fu_64_ap_start_reg;
    grp_FFT_Pipeline_2_fu_71_ap_start <= grp_FFT_Pipeline_2_fu_71_ap_start_reg;
    grp_FFT_Pipeline_3_fu_90_ap_start <= grp_FFT_Pipeline_3_fu_90_ap_start_reg;
    grp_FFT_Pipeline_3_fu_90_f_out_TREADY <= (f_out_TREADY_int_regslice and ap_CS_fsm_state10);
    grp_FFT_Pipeline_4_fu_97_ap_start <= grp_FFT_Pipeline_4_fu_97_ap_start_reg;
    grp_FFT_Pipeline_4_fu_97_f_out_TREADY <= (f_out_TREADY_int_regslice and ap_CS_fsm_state13);
    grp_fft_10_stages_fu_78_ap_start <= grp_fft_10_stages_fu_78_ap_start_reg;

    in_buf_i_address0_assign_proc : process(grp_FFT_Pipeline_2_fu_71_in_buf_i_address0, grp_fft_10_stages_fu_78_in_i_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_buf_i_address0 <= grp_fft_10_stages_fu_78_in_i_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_buf_i_address0 <= grp_FFT_Pipeline_2_fu_71_in_buf_i_address0;
        else 
            in_buf_i_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    in_buf_i_ce0_assign_proc : process(grp_FFT_Pipeline_2_fu_71_in_buf_i_ce0, grp_fft_10_stages_fu_78_in_i_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_buf_i_ce0 <= grp_fft_10_stages_fu_78_in_i_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_buf_i_ce0 <= grp_FFT_Pipeline_2_fu_71_in_buf_i_ce0;
        else 
            in_buf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_i_ce1_assign_proc : process(grp_fft_10_stages_fu_78_in_i_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_buf_i_ce1 <= grp_fft_10_stages_fu_78_in_i_ce1;
        else 
            in_buf_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_i_we0_assign_proc : process(grp_FFT_Pipeline_2_fu_71_in_buf_i_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_buf_i_we0 <= grp_FFT_Pipeline_2_fu_71_in_buf_i_we0;
        else 
            in_buf_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_r_address0_assign_proc : process(grp_FFT_Pipeline_1_fu_64_in_buf_r_address0, grp_fft_10_stages_fu_78_in_r_address0, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_buf_r_address0 <= grp_fft_10_stages_fu_78_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_buf_r_address0 <= grp_FFT_Pipeline_1_fu_64_in_buf_r_address0;
        else 
            in_buf_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    in_buf_r_ce0_assign_proc : process(grp_FFT_Pipeline_1_fu_64_in_buf_r_ce0, grp_fft_10_stages_fu_78_in_r_ce0, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_buf_r_ce0 <= grp_fft_10_stages_fu_78_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_buf_r_ce0 <= grp_FFT_Pipeline_1_fu_64_in_buf_r_ce0;
        else 
            in_buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_r_ce1_assign_proc : process(grp_fft_10_stages_fu_78_in_r_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            in_buf_r_ce1 <= grp_fft_10_stages_fu_78_in_r_ce1;
        else 
            in_buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_buf_r_we0_assign_proc : process(grp_FFT_Pipeline_1_fu_64_in_buf_r_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_buf_r_we0 <= grp_FFT_Pipeline_1_fu_64_in_buf_r_we0;
        else 
            in_buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_i_address0_assign_proc : process(grp_fft_10_stages_fu_78_out_i_address0, grp_FFT_Pipeline_4_fu_97_out_buf_i_address0, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_buf_i_address0 <= grp_FFT_Pipeline_4_fu_97_out_buf_i_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_i_address0 <= grp_fft_10_stages_fu_78_out_i_address0;
        else 
            out_buf_i_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    out_buf_i_ce0_assign_proc : process(grp_fft_10_stages_fu_78_out_i_ce0, grp_FFT_Pipeline_4_fu_97_out_buf_i_ce0, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_buf_i_ce0 <= grp_FFT_Pipeline_4_fu_97_out_buf_i_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_i_ce0 <= grp_fft_10_stages_fu_78_out_i_ce0;
        else 
            out_buf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_i_ce1_assign_proc : process(grp_fft_10_stages_fu_78_out_i_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_i_ce1 <= grp_fft_10_stages_fu_78_out_i_ce1;
        else 
            out_buf_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_i_we0_assign_proc : process(grp_fft_10_stages_fu_78_out_i_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_i_we0 <= grp_fft_10_stages_fu_78_out_i_we0;
        else 
            out_buf_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_i_we1_assign_proc : process(grp_fft_10_stages_fu_78_out_i_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_i_we1 <= grp_fft_10_stages_fu_78_out_i_we1;
        else 
            out_buf_i_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_r_address0_assign_proc : process(grp_fft_10_stages_fu_78_out_r_address0, grp_FFT_Pipeline_3_fu_90_out_buf_r_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_buf_r_address0 <= grp_FFT_Pipeline_3_fu_90_out_buf_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_r_address0 <= grp_fft_10_stages_fu_78_out_r_address0;
        else 
            out_buf_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    out_buf_r_ce0_assign_proc : process(grp_fft_10_stages_fu_78_out_r_ce0, grp_FFT_Pipeline_3_fu_90_out_buf_r_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_buf_r_ce0 <= grp_FFT_Pipeline_3_fu_90_out_buf_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_r_ce0 <= grp_fft_10_stages_fu_78_out_r_ce0;
        else 
            out_buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_r_ce1_assign_proc : process(grp_fft_10_stages_fu_78_out_r_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_r_ce1 <= grp_fft_10_stages_fu_78_out_r_ce1;
        else 
            out_buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_r_we0_assign_proc : process(grp_fft_10_stages_fu_78_out_r_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_r_we0 <= grp_fft_10_stages_fu_78_out_r_we0;
        else 
            out_buf_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_r_we1_assign_proc : process(grp_fft_10_stages_fu_78_out_r_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_buf_r_we1 <= grp_fft_10_stages_fu_78_out_r_we1;
        else 
            out_buf_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
