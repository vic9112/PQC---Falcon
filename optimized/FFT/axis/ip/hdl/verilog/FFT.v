// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FFT_FFT,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.042000,HLS_SYN_LAT=4676,HLS_SYN_TPT=none,HLS_SYN_MEM=88,HLS_SYN_DSP=0,HLS_SYN_FF=20387,HLS_SYN_LUT=19904,HLS_VERSION=2022_1}" *)

module FFT (
        ap_clk,
        ap_rst_n,
        f_in_TDATA,
        f_in_TVALID,
        f_in_TREADY,
        f_out_TDATA,
        f_out_TVALID,
        f_out_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] f_in_TDATA;
input   f_in_TVALID;
output   f_in_TREADY;
output  [63:0] f_out_TDATA;
output   f_out_TVALID;
input   f_out_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [8:0] in_buf_r_address0;
reg    in_buf_r_ce0;
reg    in_buf_r_we0;
wire   [63:0] in_buf_r_q0;
reg    in_buf_r_ce1;
wire   [63:0] in_buf_r_q1;
reg   [8:0] in_buf_i_address0;
reg    in_buf_i_ce0;
reg    in_buf_i_we0;
wire   [63:0] in_buf_i_q0;
reg    in_buf_i_ce1;
wire   [63:0] in_buf_i_q1;
reg   [8:0] out_buf_r_address0;
reg    out_buf_r_ce0;
reg    out_buf_r_we0;
wire   [63:0] out_buf_r_q0;
reg    out_buf_r_ce1;
reg    out_buf_r_we1;
reg   [8:0] out_buf_i_address0;
reg    out_buf_i_ce0;
reg    out_buf_i_we0;
wire   [63:0] out_buf_i_q0;
reg    out_buf_i_ce1;
reg    out_buf_i_we1;
wire    grp_FFT_Pipeline_1_fu_64_ap_start;
wire    grp_FFT_Pipeline_1_fu_64_ap_done;
wire    grp_FFT_Pipeline_1_fu_64_ap_idle;
wire    grp_FFT_Pipeline_1_fu_64_ap_ready;
wire    grp_FFT_Pipeline_1_fu_64_f_in_TREADY;
wire   [8:0] grp_FFT_Pipeline_1_fu_64_in_buf_r_address0;
wire    grp_FFT_Pipeline_1_fu_64_in_buf_r_ce0;
wire    grp_FFT_Pipeline_1_fu_64_in_buf_r_we0;
wire   [63:0] grp_FFT_Pipeline_1_fu_64_in_buf_r_d0;
wire    grp_FFT_Pipeline_2_fu_71_ap_start;
wire    grp_FFT_Pipeline_2_fu_71_ap_done;
wire    grp_FFT_Pipeline_2_fu_71_ap_idle;
wire    grp_FFT_Pipeline_2_fu_71_ap_ready;
wire    grp_FFT_Pipeline_2_fu_71_f_in_TREADY;
wire   [8:0] grp_FFT_Pipeline_2_fu_71_in_buf_i_address0;
wire    grp_FFT_Pipeline_2_fu_71_in_buf_i_ce0;
wire    grp_FFT_Pipeline_2_fu_71_in_buf_i_we0;
wire   [63:0] grp_FFT_Pipeline_2_fu_71_in_buf_i_d0;
wire    grp_fft_10_stages_fu_78_ap_start;
wire    grp_fft_10_stages_fu_78_ap_done;
wire    grp_fft_10_stages_fu_78_ap_idle;
wire    grp_fft_10_stages_fu_78_ap_ready;
wire   [8:0] grp_fft_10_stages_fu_78_in_r_address0;
wire    grp_fft_10_stages_fu_78_in_r_ce0;
wire   [8:0] grp_fft_10_stages_fu_78_in_r_address1;
wire    grp_fft_10_stages_fu_78_in_r_ce1;
wire   [8:0] grp_fft_10_stages_fu_78_in_i_address0;
wire    grp_fft_10_stages_fu_78_in_i_ce0;
wire   [8:0] grp_fft_10_stages_fu_78_in_i_address1;
wire    grp_fft_10_stages_fu_78_in_i_ce1;
wire   [8:0] grp_fft_10_stages_fu_78_out_r_address0;
wire    grp_fft_10_stages_fu_78_out_r_ce0;
wire    grp_fft_10_stages_fu_78_out_r_we0;
wire   [63:0] grp_fft_10_stages_fu_78_out_r_d0;
wire   [8:0] grp_fft_10_stages_fu_78_out_r_address1;
wire    grp_fft_10_stages_fu_78_out_r_ce1;
wire    grp_fft_10_stages_fu_78_out_r_we1;
wire   [63:0] grp_fft_10_stages_fu_78_out_r_d1;
wire   [8:0] grp_fft_10_stages_fu_78_out_i_address0;
wire    grp_fft_10_stages_fu_78_out_i_ce0;
wire    grp_fft_10_stages_fu_78_out_i_we0;
wire   [63:0] grp_fft_10_stages_fu_78_out_i_d0;
wire   [8:0] grp_fft_10_stages_fu_78_out_i_address1;
wire    grp_fft_10_stages_fu_78_out_i_ce1;
wire    grp_fft_10_stages_fu_78_out_i_we1;
wire   [63:0] grp_fft_10_stages_fu_78_out_i_d1;
wire    grp_FFT_Pipeline_3_fu_90_ap_start;
wire    grp_FFT_Pipeline_3_fu_90_ap_done;
wire    grp_FFT_Pipeline_3_fu_90_ap_idle;
wire    grp_FFT_Pipeline_3_fu_90_ap_ready;
wire    grp_FFT_Pipeline_3_fu_90_f_out_TREADY;
wire   [8:0] grp_FFT_Pipeline_3_fu_90_out_buf_r_address0;
wire    grp_FFT_Pipeline_3_fu_90_out_buf_r_ce0;
wire   [63:0] grp_FFT_Pipeline_3_fu_90_f_out_TDATA;
wire    grp_FFT_Pipeline_3_fu_90_f_out_TVALID;
wire    grp_FFT_Pipeline_4_fu_97_ap_start;
wire    grp_FFT_Pipeline_4_fu_97_ap_done;
wire    grp_FFT_Pipeline_4_fu_97_ap_idle;
wire    grp_FFT_Pipeline_4_fu_97_ap_ready;
wire    grp_FFT_Pipeline_4_fu_97_f_out_TREADY;
wire   [8:0] grp_FFT_Pipeline_4_fu_97_out_buf_i_address0;
wire    grp_FFT_Pipeline_4_fu_97_out_buf_i_ce0;
wire   [63:0] grp_FFT_Pipeline_4_fu_97_f_out_TDATA;
wire    grp_FFT_Pipeline_4_fu_97_f_out_TVALID;
reg    grp_FFT_Pipeline_1_fu_64_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_FFT_Pipeline_2_fu_71_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_fft_10_stages_fu_78_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_FFT_Pipeline_3_fu_90_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_FFT_Pipeline_4_fu_97_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    regslice_both_f_out_U_apdone_blk;
reg   [13:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    regslice_both_f_in_U_apdone_blk;
wire   [63:0] f_in_TDATA_int_regslice;
wire    f_in_TVALID_int_regslice;
reg    f_in_TREADY_int_regslice;
wire    regslice_both_f_in_U_ack_in;
reg   [63:0] f_out_TDATA_int_regslice;
reg    f_out_TVALID_int_regslice;
wire    f_out_TREADY_int_regslice;
wire    regslice_both_f_out_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 grp_FFT_Pipeline_1_fu_64_ap_start_reg = 1'b0;
#0 grp_FFT_Pipeline_2_fu_71_ap_start_reg = 1'b0;
#0 grp_fft_10_stages_fu_78_ap_start_reg = 1'b0;
#0 grp_FFT_Pipeline_3_fu_90_ap_start_reg = 1'b0;
#0 grp_FFT_Pipeline_4_fu_97_ap_start_reg = 1'b0;
end

FFT_in_buf_r_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
in_buf_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_buf_r_address0),
    .ce0(in_buf_r_ce0),
    .we0(in_buf_r_we0),
    .d0(grp_FFT_Pipeline_1_fu_64_in_buf_r_d0),
    .q0(in_buf_r_q0),
    .address1(grp_fft_10_stages_fu_78_in_r_address1),
    .ce1(in_buf_r_ce1),
    .q1(in_buf_r_q1)
);

FFT_in_buf_r_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
in_buf_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(in_buf_i_address0),
    .ce0(in_buf_i_ce0),
    .we0(in_buf_i_we0),
    .d0(grp_FFT_Pipeline_2_fu_71_in_buf_i_d0),
    .q0(in_buf_i_q0),
    .address1(grp_fft_10_stages_fu_78_in_i_address1),
    .ce1(in_buf_i_ce1),
    .q1(in_buf_i_q1)
);

FFT_out_buf_r_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
out_buf_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_buf_r_address0),
    .ce0(out_buf_r_ce0),
    .we0(out_buf_r_we0),
    .d0(grp_fft_10_stages_fu_78_out_r_d0),
    .q0(out_buf_r_q0),
    .address1(grp_fft_10_stages_fu_78_out_r_address1),
    .ce1(out_buf_r_ce1),
    .we1(out_buf_r_we1),
    .d1(grp_fft_10_stages_fu_78_out_r_d1)
);

FFT_out_buf_r_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
out_buf_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_buf_i_address0),
    .ce0(out_buf_i_ce0),
    .we0(out_buf_i_we0),
    .d0(grp_fft_10_stages_fu_78_out_i_d0),
    .q0(out_buf_i_q0),
    .address1(grp_fft_10_stages_fu_78_out_i_address1),
    .ce1(out_buf_i_ce1),
    .we1(out_buf_i_we1),
    .d1(grp_fft_10_stages_fu_78_out_i_d1)
);

FFT_FFT_Pipeline_1 grp_FFT_Pipeline_1_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FFT_Pipeline_1_fu_64_ap_start),
    .ap_done(grp_FFT_Pipeline_1_fu_64_ap_done),
    .ap_idle(grp_FFT_Pipeline_1_fu_64_ap_idle),
    .ap_ready(grp_FFT_Pipeline_1_fu_64_ap_ready),
    .f_in_TVALID(f_in_TVALID_int_regslice),
    .f_in_TDATA(f_in_TDATA_int_regslice),
    .f_in_TREADY(grp_FFT_Pipeline_1_fu_64_f_in_TREADY),
    .in_buf_r_address0(grp_FFT_Pipeline_1_fu_64_in_buf_r_address0),
    .in_buf_r_ce0(grp_FFT_Pipeline_1_fu_64_in_buf_r_ce0),
    .in_buf_r_we0(grp_FFT_Pipeline_1_fu_64_in_buf_r_we0),
    .in_buf_r_d0(grp_FFT_Pipeline_1_fu_64_in_buf_r_d0)
);

FFT_FFT_Pipeline_2 grp_FFT_Pipeline_2_fu_71(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FFT_Pipeline_2_fu_71_ap_start),
    .ap_done(grp_FFT_Pipeline_2_fu_71_ap_done),
    .ap_idle(grp_FFT_Pipeline_2_fu_71_ap_idle),
    .ap_ready(grp_FFT_Pipeline_2_fu_71_ap_ready),
    .f_in_TVALID(f_in_TVALID_int_regslice),
    .f_in_TDATA(f_in_TDATA_int_regslice),
    .f_in_TREADY(grp_FFT_Pipeline_2_fu_71_f_in_TREADY),
    .in_buf_i_address0(grp_FFT_Pipeline_2_fu_71_in_buf_i_address0),
    .in_buf_i_ce0(grp_FFT_Pipeline_2_fu_71_in_buf_i_ce0),
    .in_buf_i_we0(grp_FFT_Pipeline_2_fu_71_in_buf_i_we0),
    .in_buf_i_d0(grp_FFT_Pipeline_2_fu_71_in_buf_i_d0)
);

FFT_fft_10_stages grp_fft_10_stages_fu_78(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fft_10_stages_fu_78_ap_start),
    .ap_done(grp_fft_10_stages_fu_78_ap_done),
    .ap_idle(grp_fft_10_stages_fu_78_ap_idle),
    .ap_ready(grp_fft_10_stages_fu_78_ap_ready),
    .in_r_address0(grp_fft_10_stages_fu_78_in_r_address0),
    .in_r_ce0(grp_fft_10_stages_fu_78_in_r_ce0),
    .in_r_q0(in_buf_r_q0),
    .in_r_address1(grp_fft_10_stages_fu_78_in_r_address1),
    .in_r_ce1(grp_fft_10_stages_fu_78_in_r_ce1),
    .in_r_q1(in_buf_r_q1),
    .in_i_address0(grp_fft_10_stages_fu_78_in_i_address0),
    .in_i_ce0(grp_fft_10_stages_fu_78_in_i_ce0),
    .in_i_q0(in_buf_i_q0),
    .in_i_address1(grp_fft_10_stages_fu_78_in_i_address1),
    .in_i_ce1(grp_fft_10_stages_fu_78_in_i_ce1),
    .in_i_q1(in_buf_i_q1),
    .out_r_address0(grp_fft_10_stages_fu_78_out_r_address0),
    .out_r_ce0(grp_fft_10_stages_fu_78_out_r_ce0),
    .out_r_we0(grp_fft_10_stages_fu_78_out_r_we0),
    .out_r_d0(grp_fft_10_stages_fu_78_out_r_d0),
    .out_r_address1(grp_fft_10_stages_fu_78_out_r_address1),
    .out_r_ce1(grp_fft_10_stages_fu_78_out_r_ce1),
    .out_r_we1(grp_fft_10_stages_fu_78_out_r_we1),
    .out_r_d1(grp_fft_10_stages_fu_78_out_r_d1),
    .out_i_address0(grp_fft_10_stages_fu_78_out_i_address0),
    .out_i_ce0(grp_fft_10_stages_fu_78_out_i_ce0),
    .out_i_we0(grp_fft_10_stages_fu_78_out_i_we0),
    .out_i_d0(grp_fft_10_stages_fu_78_out_i_d0),
    .out_i_address1(grp_fft_10_stages_fu_78_out_i_address1),
    .out_i_ce1(grp_fft_10_stages_fu_78_out_i_ce1),
    .out_i_we1(grp_fft_10_stages_fu_78_out_i_we1),
    .out_i_d1(grp_fft_10_stages_fu_78_out_i_d1)
);

FFT_FFT_Pipeline_3 grp_FFT_Pipeline_3_fu_90(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FFT_Pipeline_3_fu_90_ap_start),
    .ap_done(grp_FFT_Pipeline_3_fu_90_ap_done),
    .ap_idle(grp_FFT_Pipeline_3_fu_90_ap_idle),
    .ap_ready(grp_FFT_Pipeline_3_fu_90_ap_ready),
    .f_out_TREADY(grp_FFT_Pipeline_3_fu_90_f_out_TREADY),
    .out_buf_r_address0(grp_FFT_Pipeline_3_fu_90_out_buf_r_address0),
    .out_buf_r_ce0(grp_FFT_Pipeline_3_fu_90_out_buf_r_ce0),
    .out_buf_r_q0(out_buf_r_q0),
    .f_out_TDATA(grp_FFT_Pipeline_3_fu_90_f_out_TDATA),
    .f_out_TVALID(grp_FFT_Pipeline_3_fu_90_f_out_TVALID)
);

FFT_FFT_Pipeline_4 grp_FFT_Pipeline_4_fu_97(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FFT_Pipeline_4_fu_97_ap_start),
    .ap_done(grp_FFT_Pipeline_4_fu_97_ap_done),
    .ap_idle(grp_FFT_Pipeline_4_fu_97_ap_idle),
    .ap_ready(grp_FFT_Pipeline_4_fu_97_ap_ready),
    .f_out_TREADY(grp_FFT_Pipeline_4_fu_97_f_out_TREADY),
    .out_buf_i_address0(grp_FFT_Pipeline_4_fu_97_out_buf_i_address0),
    .out_buf_i_ce0(grp_FFT_Pipeline_4_fu_97_out_buf_i_ce0),
    .out_buf_i_q0(out_buf_i_q0),
    .f_out_TDATA(grp_FFT_Pipeline_4_fu_97_f_out_TDATA),
    .f_out_TVALID(grp_FFT_Pipeline_4_fu_97_f_out_TVALID)
);

FFT_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

FFT_regslice_both #(
    .DataWidth( 64 ))
regslice_both_f_in_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(f_in_TDATA),
    .vld_in(f_in_TVALID),
    .ack_in(regslice_both_f_in_U_ack_in),
    .data_out(f_in_TDATA_int_regslice),
    .vld_out(f_in_TVALID_int_regslice),
    .ack_out(f_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_f_in_U_apdone_blk)
);

FFT_regslice_both #(
    .DataWidth( 64 ))
regslice_both_f_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(f_out_TDATA_int_regslice),
    .vld_in(f_out_TVALID_int_regslice),
    .ack_in(f_out_TREADY_int_regslice),
    .data_out(f_out_TDATA),
    .vld_out(regslice_both_f_out_U_vld_out),
    .ack_out(f_out_TREADY),
    .apdone_blk(regslice_both_f_out_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FFT_Pipeline_1_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_FFT_Pipeline_1_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_FFT_Pipeline_1_fu_64_ap_ready == 1'b1)) begin
            grp_FFT_Pipeline_1_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FFT_Pipeline_2_fu_71_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_FFT_Pipeline_2_fu_71_ap_start_reg <= 1'b1;
        end else if ((grp_FFT_Pipeline_2_fu_71_ap_ready == 1'b1)) begin
            grp_FFT_Pipeline_2_fu_71_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FFT_Pipeline_3_fu_90_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_FFT_Pipeline_3_fu_90_ap_start_reg <= 1'b1;
        end else if ((grp_FFT_Pipeline_3_fu_90_ap_ready == 1'b1)) begin
            grp_FFT_Pipeline_3_fu_90_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FFT_Pipeline_4_fu_97_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_FFT_Pipeline_4_fu_97_ap_start_reg <= 1'b1;
        end else if ((grp_FFT_Pipeline_4_fu_97_ap_ready == 1'b1)) begin
            grp_FFT_Pipeline_4_fu_97_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fft_10_stages_fu_78_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_fft_10_stages_fu_78_ap_start_reg <= 1'b1;
        end else if ((grp_fft_10_stages_fu_78_ap_ready == 1'b1)) begin
            grp_fft_10_stages_fu_78_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((grp_FFT_Pipeline_3_fu_90_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_FFT_Pipeline_4_fu_97_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_f_out_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_FFT_Pipeline_1_fu_64_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_FFT_Pipeline_2_fu_71_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((grp_fft_10_stages_fu_78_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((regslice_both_f_out_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_f_out_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        f_in_TREADY_int_regslice = grp_FFT_Pipeline_2_fu_71_f_in_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        f_in_TREADY_int_regslice = grp_FFT_Pipeline_1_fu_64_f_in_TREADY;
    end else begin
        f_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((grp_FFT_Pipeline_4_fu_97_f_out_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        f_out_TDATA_int_regslice = grp_FFT_Pipeline_4_fu_97_f_out_TDATA;
    end else if (((1'b1 == ap_CS_fsm_state10) & (grp_FFT_Pipeline_3_fu_90_f_out_TVALID == 1'b1))) begin
        f_out_TDATA_int_regslice = grp_FFT_Pipeline_3_fu_90_f_out_TDATA;
    end else begin
        f_out_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        f_out_TVALID_int_regslice = grp_FFT_Pipeline_4_fu_97_f_out_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        f_out_TVALID_int_regslice = grp_FFT_Pipeline_3_fu_90_f_out_TVALID;
    end else begin
        f_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_buf_i_address0 = grp_fft_10_stages_fu_78_in_i_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        in_buf_i_address0 = grp_FFT_Pipeline_2_fu_71_in_buf_i_address0;
    end else begin
        in_buf_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_buf_i_ce0 = grp_fft_10_stages_fu_78_in_i_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        in_buf_i_ce0 = grp_FFT_Pipeline_2_fu_71_in_buf_i_ce0;
    end else begin
        in_buf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_buf_i_ce1 = grp_fft_10_stages_fu_78_in_i_ce1;
    end else begin
        in_buf_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_buf_i_we0 = grp_FFT_Pipeline_2_fu_71_in_buf_i_we0;
    end else begin
        in_buf_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_buf_r_address0 = grp_fft_10_stages_fu_78_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_buf_r_address0 = grp_FFT_Pipeline_1_fu_64_in_buf_r_address0;
    end else begin
        in_buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_buf_r_ce0 = grp_fft_10_stages_fu_78_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_buf_r_ce0 = grp_FFT_Pipeline_1_fu_64_in_buf_r_ce0;
    end else begin
        in_buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_buf_r_ce1 = grp_fft_10_stages_fu_78_in_r_ce1;
    end else begin
        in_buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_buf_r_we0 = grp_FFT_Pipeline_1_fu_64_in_buf_r_we0;
    end else begin
        in_buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_buf_i_address0 = grp_FFT_Pipeline_4_fu_97_out_buf_i_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_i_address0 = grp_fft_10_stages_fu_78_out_i_address0;
    end else begin
        out_buf_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_buf_i_ce0 = grp_FFT_Pipeline_4_fu_97_out_buf_i_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_i_ce0 = grp_fft_10_stages_fu_78_out_i_ce0;
    end else begin
        out_buf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_i_ce1 = grp_fft_10_stages_fu_78_out_i_ce1;
    end else begin
        out_buf_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_i_we0 = grp_fft_10_stages_fu_78_out_i_we0;
    end else begin
        out_buf_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_i_we1 = grp_fft_10_stages_fu_78_out_i_we1;
    end else begin
        out_buf_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_buf_r_address0 = grp_FFT_Pipeline_3_fu_90_out_buf_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_r_address0 = grp_fft_10_stages_fu_78_out_r_address0;
    end else begin
        out_buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_buf_r_ce0 = grp_FFT_Pipeline_3_fu_90_out_buf_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_r_ce0 = grp_fft_10_stages_fu_78_out_r_ce0;
    end else begin
        out_buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_r_ce1 = grp_fft_10_stages_fu_78_out_r_ce1;
    end else begin
        out_buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_r_we0 = grp_fft_10_stages_fu_78_out_r_we0;
    end else begin
        out_buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_buf_r_we1 = grp_fft_10_stages_fu_78_out_r_we1;
    end else begin
        out_buf_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_FFT_Pipeline_1_fu_64_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_FFT_Pipeline_2_fu_71_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_fft_10_stages_fu_78_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_FFT_Pipeline_3_fu_90_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_FFT_Pipeline_4_fu_97_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((regslice_both_f_out_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign f_in_TREADY = regslice_both_f_in_U_ack_in;

assign f_out_TVALID = regslice_both_f_out_U_vld_out;

assign grp_FFT_Pipeline_1_fu_64_ap_start = grp_FFT_Pipeline_1_fu_64_ap_start_reg;

assign grp_FFT_Pipeline_2_fu_71_ap_start = grp_FFT_Pipeline_2_fu_71_ap_start_reg;

assign grp_FFT_Pipeline_3_fu_90_ap_start = grp_FFT_Pipeline_3_fu_90_ap_start_reg;

assign grp_FFT_Pipeline_3_fu_90_f_out_TREADY = (f_out_TREADY_int_regslice & ap_CS_fsm_state10);

assign grp_FFT_Pipeline_4_fu_97_ap_start = grp_FFT_Pipeline_4_fu_97_ap_start_reg;

assign grp_FFT_Pipeline_4_fu_97_f_out_TREADY = (f_out_TREADY_int_regslice & ap_CS_fsm_state13);

assign grp_fft_10_stages_fu_78_ap_start = grp_fft_10_stages_fu_78_ap_start_reg;


reg find_kernel_block = 0;
// synthesis translate_off
`include "FFT_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //FFT

