// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module userdma_streamtoparallelwithburst_Pipeline_VITIS_LOOP_29_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inbuf_dout,
        inbuf_num_data_valid,
        inbuf_fifo_cap,
        inbuf_empty_n,
        inbuf_read,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        tmp,
        even,
        out_memory_assign,
        zext_ln34_1,
        shl_ln34_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [32:0] inbuf_dout;
input  [6:0] inbuf_num_data_valid;
input  [6:0] inbuf_fifo_cap;
input   inbuf_empty_n;
output   inbuf_read;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [63:0] m_axi_gmem0_WDATA;
output  [7:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [63:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [31:0] tmp;
input  [0:0] even;
input  [63:0] out_memory_assign;
input  [5:0] zext_ln34_1;
input  [7:0] shl_ln34_1;

reg ap_idle;
reg inbuf_read;
reg m_axi_gmem0_AWVALID;
reg[63:0] m_axi_gmem0_AWADDR;
reg m_axi_gmem0_WVALID;
reg[63:0] m_axi_gmem0_WDATA;
reg[7:0] m_axi_gmem0_WSTRB;
reg m_axi_gmem0_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] high_reg_161;
reg   [0:0] high_reg_161_pp0_iter1_reg;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] high_reg_161_pp0_iter2_reg;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
reg   [0:0] high_reg_161_pp0_iter16_reg;
reg    ap_block_state18_pp0_stage0_iter17;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_193_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_W;
reg    gmem0_blk_n_B;
reg    inbuf_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] high_reg_161_pp0_iter3_reg;
reg   [0:0] high_reg_161_pp0_iter4_reg;
reg   [0:0] high_reg_161_pp0_iter5_reg;
reg   [0:0] high_reg_161_pp0_iter6_reg;
reg   [0:0] high_reg_161_pp0_iter7_reg;
reg   [0:0] high_reg_161_pp0_iter8_reg;
reg   [0:0] high_reg_161_pp0_iter9_reg;
reg   [0:0] high_reg_161_pp0_iter10_reg;
reg   [0:0] high_reg_161_pp0_iter11_reg;
reg   [0:0] high_reg_161_pp0_iter12_reg;
reg   [0:0] high_reg_161_pp0_iter13_reg;
reg   [0:0] high_reg_161_pp0_iter14_reg;
reg   [0:0] high_reg_161_pp0_iter15_reg;
wire   [63:0] zext_ln34_1_cast_fu_172_p1;
reg   [63:0] zext_ln34_1_cast_reg_384;
reg   [0:0] icmp_ln29_reg_389;
wire   [0:0] high_1_fu_211_p3;
reg   [0:0] high_1_reg_393;
wire   [31:0] in_val_data_filed_V_fu_224_p1;
reg   [31:0] in_val_data_filed_V_reg_399;
reg   [60:0] trunc_ln2_reg_404;
reg   [60:0] trunc_ln34_1_reg_409;
wire   [63:0] zext_ln36_fu_325_p1;
reg   [63:0] zext_ln36_reg_414;
wire   [63:0] shl_ln34_fu_338_p2;
reg   [63:0] shl_ln34_reg_425;
reg   [0:0] ap_phi_mux_high_phi_fu_164_p4;
wire    ap_loop_init;
wire  signed [63:0] sext_ln36_1_fu_328_p1;
wire  signed [63:0] sext_ln34_1_fu_343_p1;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] a_fu_86;
wire   [31:0] a_1_fu_313_p3;
reg   [30:0] i_fu_90;
wire   [30:0] add_ln29_fu_199_p2;
reg   [30:0] ap_sig_allocacmp_i_load;
wire   [31:0] zext_ln29_fu_189_p1;
wire   [0:0] xor_ln37_fu_205_p2;
wire   [34:0] shl_ln2_fu_231_p3;
wire  signed [63:0] sext_ln36_fu_239_p1;
wire   [63:0] add_ln36_fu_243_p2;
wire   [31:0] add_ln34_fu_258_p2;
wire   [34:0] shl_ln1_fu_264_p3;
wire   [34:0] or_ln34_fu_272_p2;
wire  signed [63:0] sext_ln34_fu_278_p1;
wire   [63:0] add_ln34_1_fu_282_p2;
wire   [31:0] add_ln39_fu_300_p2;
wire   [31:0] select_ln39_fu_306_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_541;
reg    ap_condition_545;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_done_reg = 1'b0;
end

userdma_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            a_fu_86 <= 32'd0;
        end else if (((icmp_ln29_reg_389 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            a_fu_86 <= a_1_fu_313_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_545)) begin
            high_reg_161 <= high_1_reg_393;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            high_reg_161 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_193_p2 == 1'd1))) begin
            i_fu_90 <= add_ln29_fu_199_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_90 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        high_reg_161_pp0_iter10_reg <= high_reg_161_pp0_iter9_reg;
        high_reg_161_pp0_iter11_reg <= high_reg_161_pp0_iter10_reg;
        high_reg_161_pp0_iter12_reg <= high_reg_161_pp0_iter11_reg;
        high_reg_161_pp0_iter13_reg <= high_reg_161_pp0_iter12_reg;
        high_reg_161_pp0_iter14_reg <= high_reg_161_pp0_iter13_reg;
        high_reg_161_pp0_iter15_reg <= high_reg_161_pp0_iter14_reg;
        high_reg_161_pp0_iter16_reg <= high_reg_161_pp0_iter15_reg;
        high_reg_161_pp0_iter2_reg <= high_reg_161_pp0_iter1_reg;
        high_reg_161_pp0_iter3_reg <= high_reg_161_pp0_iter2_reg;
        high_reg_161_pp0_iter4_reg <= high_reg_161_pp0_iter3_reg;
        high_reg_161_pp0_iter5_reg <= high_reg_161_pp0_iter4_reg;
        high_reg_161_pp0_iter6_reg <= high_reg_161_pp0_iter5_reg;
        high_reg_161_pp0_iter7_reg <= high_reg_161_pp0_iter6_reg;
        high_reg_161_pp0_iter8_reg <= high_reg_161_pp0_iter7_reg;
        high_reg_161_pp0_iter9_reg <= high_reg_161_pp0_iter8_reg;
        zext_ln36_reg_414[31 : 0] <= zext_ln36_fu_325_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        high_reg_161_pp0_iter1_reg <= high_reg_161;
        icmp_ln29_reg_389 <= icmp_ln29_fu_193_p2;
        in_val_data_filed_V_reg_399 <= in_val_data_filed_V_fu_224_p1;
        zext_ln34_1_cast_reg_384[5 : 0] <= zext_ln34_1_cast_fu_172_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        high_1_reg_393 <= high_1_fu_211_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161_pp0_iter1_reg == 1'd1))) begin
        shl_ln34_reg_425 <= shl_ln34_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161 == 1'd0))) begin
        trunc_ln2_reg_404 <= {{add_ln36_fu_243_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161 == 1'd1))) begin
        trunc_ln34_1_reg_409 <= {{add_ln34_1_fu_282_p2[63:3]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln29_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_541)) begin
            ap_phi_mux_high_phi_fu_164_p4 = high_1_reg_393;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_high_phi_fu_164_p4 = 1'd0;
        end else begin
            ap_phi_mux_high_phi_fu_164_p4 = high_1_reg_393;
        end
    end else begin
        ap_phi_mux_high_phi_fu_164_p4 = high_1_reg_393;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 31'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_90;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (high_reg_161_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (high_reg_161_pp0_iter1_reg == 1'd0)))) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (high_reg_161_pp0_iter16_reg == 1'd1)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (high_reg_161_pp0_iter16_reg == 1'd0)))) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (high_reg_161_pp0_iter2_reg == 1'd1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (high_reg_161_pp0_iter2_reg == 1'd0)))) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        inbuf_blk_n = inbuf_empty_n;
    end else begin
        inbuf_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inbuf_read = 1'b1;
    end else begin
        inbuf_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((high_reg_161_pp0_iter1_reg == 1'd1)) begin
            m_axi_gmem0_AWADDR = sext_ln34_1_fu_343_p1;
        end else if ((high_reg_161_pp0_iter1_reg == 1'd0)) begin
            m_axi_gmem0_AWADDR = sext_ln36_1_fu_328_p1;
        end else begin
            m_axi_gmem0_AWADDR = 'bx;
        end
    end else begin
        m_axi_gmem0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161_pp0_iter1_reg == 1'd0)))) begin
        m_axi_gmem0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161_pp0_iter16_reg == 1'd1)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161_pp0_iter16_reg == 1'd0)))) begin
        m_axi_gmem0_BREADY = 1'b1;
    end else begin
        m_axi_gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((high_reg_161_pp0_iter2_reg == 1'd1)) begin
            m_axi_gmem0_WDATA = shl_ln34_reg_425;
        end else if ((high_reg_161_pp0_iter2_reg == 1'd0)) begin
            m_axi_gmem0_WDATA = zext_ln36_reg_414;
        end else begin
            m_axi_gmem0_WDATA = 'bx;
        end
    end else begin
        m_axi_gmem0_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((high_reg_161_pp0_iter2_reg == 1'd1)) begin
            m_axi_gmem0_WSTRB = shl_ln34_1;
        end else if ((high_reg_161_pp0_iter2_reg == 1'd0)) begin
            m_axi_gmem0_WSTRB = 8'd15;
        end else begin
            m_axi_gmem0_WSTRB = 'bx;
        end
    end else begin
        m_axi_gmem0_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161_pp0_iter2_reg == 1'd1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (high_reg_161_pp0_iter2_reg == 1'd0)))) begin
        m_axi_gmem0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_fu_313_p3 = ((even[0:0] == 1'b1) ? select_ln39_fu_306_p3 : add_ln39_fu_300_p2);

assign add_ln29_fu_199_p2 = (ap_sig_allocacmp_i_load + 31'd1);

assign add_ln34_1_fu_282_p2 = ($signed(sext_ln34_fu_278_p1) + $signed(out_memory_assign));

assign add_ln34_fu_258_p2 = ($signed(a_fu_86) + $signed(32'd4294967295));

assign add_ln36_fu_243_p2 = ($signed(out_memory_assign) + $signed(sext_ln36_fu_239_p1));

assign add_ln39_fu_300_p2 = (a_fu_86 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((inbuf_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (((high_reg_161_pp0_iter16_reg == 1'd1) & (m_axi_gmem0_BVALID == 1'b0)) | ((high_reg_161_pp0_iter16_reg == 1'd0) & (m_axi_gmem0_BVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((inbuf_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (((high_reg_161_pp0_iter16_reg == 1'd1) & (m_axi_gmem0_BVALID == 1'b0)) | ((high_reg_161_pp0_iter16_reg == 1'd0) & (m_axi_gmem0_BVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((inbuf_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (((high_reg_161_pp0_iter16_reg == 1'd1) & (m_axi_gmem0_BVALID == 1'b0)) | ((high_reg_161_pp0_iter16_reg == 1'd0) & (m_axi_gmem0_BVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter17 = (((high_reg_161_pp0_iter16_reg == 1'd1) & (m_axi_gmem0_BVALID == 1'b0)) | ((high_reg_161_pp0_iter16_reg == 1'd0) & (m_axi_gmem0_BVALID == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (inbuf_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_io = (((m_axi_gmem0_AWREADY == 1'b0) & (high_reg_161_pp0_iter1_reg == 1'd1)) | ((m_axi_gmem0_AWREADY == 1'b0) & (high_reg_161_pp0_iter1_reg == 1'd0)));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((high_reg_161_pp0_iter2_reg == 1'd1) & (m_axi_gmem0_WREADY == 1'b0)) | ((high_reg_161_pp0_iter2_reg == 1'd0) & (m_axi_gmem0_WREADY == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_541 = ((icmp_ln29_reg_389 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_545 = ((icmp_ln29_reg_389 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign high_1_fu_211_p3 = ((even[0:0] == 1'b1) ? xor_ln37_fu_205_p2 : ap_phi_mux_high_phi_fu_164_p4);

assign icmp_ln29_fu_193_p2 = (($signed(zext_ln29_fu_189_p1) < $signed(tmp)) ? 1'b1 : 1'b0);

assign in_val_data_filed_V_fu_224_p1 = inbuf_dout[31:0];

assign m_axi_gmem0_ARADDR = 64'd0;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_ARVALID = 1'b0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd1;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_RREADY = 1'b0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WUSER = 1'd0;

assign or_ln34_fu_272_p2 = (shl_ln1_fu_264_p3 | 35'd4);

assign select_ln39_fu_306_p3 = ((high_1_reg_393[0:0] == 1'b1) ? add_ln39_fu_300_p2 : a_fu_86);

assign sext_ln34_1_fu_343_p1 = $signed(trunc_ln34_1_reg_409);

assign sext_ln34_fu_278_p1 = $signed(or_ln34_fu_272_p2);

assign sext_ln36_1_fu_328_p1 = $signed(trunc_ln2_reg_404);

assign sext_ln36_fu_239_p1 = $signed(shl_ln2_fu_231_p3);

assign shl_ln1_fu_264_p3 = {{add_ln34_fu_258_p2}, {3'd0}};

assign shl_ln2_fu_231_p3 = {{a_fu_86}, {3'd0}};

assign shl_ln34_fu_338_p2 = zext_ln36_fu_325_p1 << zext_ln34_1_cast_reg_384;

assign xor_ln37_fu_205_p2 = (ap_phi_mux_high_phi_fu_164_p4 ^ 1'd1);

assign zext_ln29_fu_189_p1 = ap_sig_allocacmp_i_load;

assign zext_ln34_1_cast_fu_172_p1 = zext_ln34_1;

assign zext_ln36_fu_325_p1 = in_val_data_filed_V_reg_399;

always @ (posedge ap_clk) begin
    zext_ln34_1_cast_reg_384[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_414[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //userdma_streamtoparallelwithburst_Pipeline_VITIS_LOOP_29_2
