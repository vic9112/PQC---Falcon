-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity userdma_paralleltostreamwithburst_Pipeline_VITIS_LOOP_138_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    outbuf_din : OUT STD_LOGIC_VECTOR (34 downto 0);
    outbuf_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    outbuf_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    outbuf_full_n : IN STD_LOGIC;
    outbuf_write : OUT STD_LOGIC;
    final_m2s_len_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    count_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    even : IN STD_LOGIC_VECTOR (0 downto 0);
    sub50 : IN STD_LOGIC_VECTOR (31 downto 0);
    select_ln119 : IN STD_LOGIC_VECTOR (11 downto 0);
    in_memory_addr_0_idx : IN STD_LOGIC_VECTOR (60 downto 0);
    in_memory : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln142 : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of userdma_paralleltostreamwithburst_Pipeline_VITIS_LOOP_138_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal icmp_ln138_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op76_readreq_state4 : BOOLEAN;
    signal ap_predicate_op79_readreq_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal icmp_ln138_reg_507_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op110_read_state20 : BOOLEAN;
    signal ap_predicate_op111_read_state20 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal icmp_ln138_reg_507_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln138_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal outbuf_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem1_blk_n_AR : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal high_reg_185_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal high_reg_185_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln142_cast_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_cast_reg_497 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln119_cast_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln119_cast_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln138_reg_507_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_507_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal a_load_2_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln142_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln142_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_high_phi_fu_189_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal high_2_fu_265_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal high_2_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_526_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_reg_531 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln142_2_reg_536 : STD_LOGIC_VECTOR (60 downto 0);
    signal gmem1_addr_1_read_reg_553 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_addr_read_reg_558 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln142_fu_396_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter3_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter4_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter5_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter6_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter7_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter8_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter9_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter10_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter11_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter12_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter13_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter14_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter15_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter16_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter17_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter18_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter19_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter20_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter21_phi_ln112_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln144_1_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln142_1_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal final_m2s_len_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal final_m2s_len_1_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_fu_286_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_102 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_fu_241_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln138_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln142_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln145_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln147_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln147_fu_278_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln144_fu_308_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln144_fu_311_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln3_fu_316_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln144_1_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln142_fu_339_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln142_1_fu_342_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal shl_ln_fu_347_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln142_fu_355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln142_2_fu_361_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln150_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_data_filed_V_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component userdma_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component userdma_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    a_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    a_fu_98 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln138_fu_236_p2 = ap_const_lv1_1))) then 
                    a_fu_98 <= a_2_fu_286_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter21_phi_ln112_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln138_reg_507_pp0_iter19_reg = ap_const_lv1_1) and (high_reg_185_pp0_iter19_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter21_phi_ln112_reg_197 <= gmem1_addr_1_read_reg_553;
                elsif (((icmp_ln138_reg_507_pp0_iter19_reg = ap_const_lv1_1) and (high_reg_185_pp0_iter19_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter21_phi_ln112_reg_197 <= lshr_ln142_fu_396_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter21_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter20_phi_ln112_reg_197;
                end if;
            end if; 
        end if;
    end process;

    final_m2s_len_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    final_m2s_len_fu_94 <= final_m2s_len_4;
                elsif (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (icmp_ln138_reg_507_pp0_iter20_reg = ap_const_lv1_1))) then 
                    final_m2s_len_fu_94 <= final_m2s_len_1_fu_436_p2;
                end if;
            end if; 
        end if;
    end process;

    high_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln138_reg_507 = ap_const_lv1_1))) then 
                high_reg_185 <= high_2_reg_521;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                high_reg_185 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_102 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln138_fu_236_p2 = ap_const_lv1_1))) then 
                    i_fu_102 <= i_2_fu_241_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_236_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_load_2_reg_511 <= a_fu_98;
                icmp_ln150_1_reg_526 <= icmp_ln150_1_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_high_phi_fu_189_p4 = ap_const_lv1_1) and (icmp_ln138_fu_236_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln142_reg_516 <= add_ln142_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                high_reg_185_pp0_iter10_reg <= high_reg_185_pp0_iter9_reg;
                high_reg_185_pp0_iter11_reg <= high_reg_185_pp0_iter10_reg;
                high_reg_185_pp0_iter12_reg <= high_reg_185_pp0_iter11_reg;
                high_reg_185_pp0_iter13_reg <= high_reg_185_pp0_iter12_reg;
                high_reg_185_pp0_iter14_reg <= high_reg_185_pp0_iter13_reg;
                high_reg_185_pp0_iter15_reg <= high_reg_185_pp0_iter14_reg;
                high_reg_185_pp0_iter16_reg <= high_reg_185_pp0_iter15_reg;
                high_reg_185_pp0_iter17_reg <= high_reg_185_pp0_iter16_reg;
                high_reg_185_pp0_iter18_reg <= high_reg_185_pp0_iter17_reg;
                high_reg_185_pp0_iter19_reg <= high_reg_185_pp0_iter18_reg;
                high_reg_185_pp0_iter2_reg <= high_reg_185;
                high_reg_185_pp0_iter3_reg <= high_reg_185_pp0_iter2_reg;
                high_reg_185_pp0_iter4_reg <= high_reg_185_pp0_iter3_reg;
                high_reg_185_pp0_iter5_reg <= high_reg_185_pp0_iter4_reg;
                high_reg_185_pp0_iter6_reg <= high_reg_185_pp0_iter5_reg;
                high_reg_185_pp0_iter7_reg <= high_reg_185_pp0_iter6_reg;
                high_reg_185_pp0_iter8_reg <= high_reg_185_pp0_iter7_reg;
                high_reg_185_pp0_iter9_reg <= high_reg_185_pp0_iter8_reg;
                icmp_ln138_reg_507_pp0_iter10_reg <= icmp_ln138_reg_507_pp0_iter9_reg;
                icmp_ln138_reg_507_pp0_iter11_reg <= icmp_ln138_reg_507_pp0_iter10_reg;
                icmp_ln138_reg_507_pp0_iter12_reg <= icmp_ln138_reg_507_pp0_iter11_reg;
                icmp_ln138_reg_507_pp0_iter13_reg <= icmp_ln138_reg_507_pp0_iter12_reg;
                icmp_ln138_reg_507_pp0_iter14_reg <= icmp_ln138_reg_507_pp0_iter13_reg;
                icmp_ln138_reg_507_pp0_iter15_reg <= icmp_ln138_reg_507_pp0_iter14_reg;
                icmp_ln138_reg_507_pp0_iter16_reg <= icmp_ln138_reg_507_pp0_iter15_reg;
                icmp_ln138_reg_507_pp0_iter17_reg <= icmp_ln138_reg_507_pp0_iter16_reg;
                icmp_ln138_reg_507_pp0_iter18_reg <= icmp_ln138_reg_507_pp0_iter17_reg;
                icmp_ln138_reg_507_pp0_iter19_reg <= icmp_ln138_reg_507_pp0_iter18_reg;
                icmp_ln138_reg_507_pp0_iter20_reg <= icmp_ln138_reg_507_pp0_iter19_reg;
                icmp_ln138_reg_507_pp0_iter2_reg <= icmp_ln138_reg_507;
                icmp_ln138_reg_507_pp0_iter3_reg <= icmp_ln138_reg_507_pp0_iter2_reg;
                icmp_ln138_reg_507_pp0_iter4_reg <= icmp_ln138_reg_507_pp0_iter3_reg;
                icmp_ln138_reg_507_pp0_iter5_reg <= icmp_ln138_reg_507_pp0_iter4_reg;
                icmp_ln138_reg_507_pp0_iter6_reg <= icmp_ln138_reg_507_pp0_iter5_reg;
                icmp_ln138_reg_507_pp0_iter7_reg <= icmp_ln138_reg_507_pp0_iter6_reg;
                icmp_ln138_reg_507_pp0_iter8_reg <= icmp_ln138_reg_507_pp0_iter7_reg;
                icmp_ln138_reg_507_pp0_iter9_reg <= icmp_ln138_reg_507_pp0_iter8_reg;
                icmp_ln150_1_reg_526_pp0_iter10_reg <= icmp_ln150_1_reg_526_pp0_iter9_reg;
                icmp_ln150_1_reg_526_pp0_iter11_reg <= icmp_ln150_1_reg_526_pp0_iter10_reg;
                icmp_ln150_1_reg_526_pp0_iter12_reg <= icmp_ln150_1_reg_526_pp0_iter11_reg;
                icmp_ln150_1_reg_526_pp0_iter13_reg <= icmp_ln150_1_reg_526_pp0_iter12_reg;
                icmp_ln150_1_reg_526_pp0_iter14_reg <= icmp_ln150_1_reg_526_pp0_iter13_reg;
                icmp_ln150_1_reg_526_pp0_iter15_reg <= icmp_ln150_1_reg_526_pp0_iter14_reg;
                icmp_ln150_1_reg_526_pp0_iter16_reg <= icmp_ln150_1_reg_526_pp0_iter15_reg;
                icmp_ln150_1_reg_526_pp0_iter17_reg <= icmp_ln150_1_reg_526_pp0_iter16_reg;
                icmp_ln150_1_reg_526_pp0_iter18_reg <= icmp_ln150_1_reg_526_pp0_iter17_reg;
                icmp_ln150_1_reg_526_pp0_iter19_reg <= icmp_ln150_1_reg_526_pp0_iter18_reg;
                icmp_ln150_1_reg_526_pp0_iter20_reg <= icmp_ln150_1_reg_526_pp0_iter19_reg;
                icmp_ln150_1_reg_526_pp0_iter2_reg <= icmp_ln150_1_reg_526;
                icmp_ln150_1_reg_526_pp0_iter3_reg <= icmp_ln150_1_reg_526_pp0_iter2_reg;
                icmp_ln150_1_reg_526_pp0_iter4_reg <= icmp_ln150_1_reg_526_pp0_iter3_reg;
                icmp_ln150_1_reg_526_pp0_iter5_reg <= icmp_ln150_1_reg_526_pp0_iter4_reg;
                icmp_ln150_1_reg_526_pp0_iter6_reg <= icmp_ln150_1_reg_526_pp0_iter5_reg;
                icmp_ln150_1_reg_526_pp0_iter7_reg <= icmp_ln150_1_reg_526_pp0_iter6_reg;
                icmp_ln150_1_reg_526_pp0_iter8_reg <= icmp_ln150_1_reg_526_pp0_iter7_reg;
                icmp_ln150_1_reg_526_pp0_iter9_reg <= icmp_ln150_1_reg_526_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln138_reg_507 <= icmp_ln138_fu_236_p2;
                    select_ln119_cast_reg_502(11 downto 0) <= select_ln119_cast_fu_210_p1(11 downto 0);
                    zext_ln142_cast_reg_497(5 downto 0) <= zext_ln142_cast_fu_206_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter9_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter10_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter11_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter12_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter13_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter14_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter15_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter16_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter17_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter18_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter0_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter19_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter1_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter2_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter3_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter4_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter5_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter6_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter7_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_phi_ln112_reg_197 <= ap_phi_reg_pp0_iter8_phi_ln112_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op110_read_state20 = ap_const_boolean_1))) then
                gmem1_addr_1_read_reg_553 <= m_axi_gmem1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op111_read_state20 = ap_const_boolean_1))) then
                gmem1_addr_read_reg_558 <= m_axi_gmem1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln138_fu_236_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                high_2_reg_521 <= high_2_fu_265_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_185 = ap_const_lv1_1) and (icmp_ln138_reg_507 = ap_const_lv1_1))) then
                trunc_ln142_2_reg_536 <= add_ln142_2_fu_361_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (high_reg_185 = ap_const_lv1_0) and (icmp_ln138_reg_507 = ap_const_lv1_1))) then
                trunc_ln4_reg_531 <= add_ln144_1_fu_324_p2(63 downto 3);
            end if;
        end if;
    end process;
    zext_ln142_cast_reg_497(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    select_ln119_cast_reg_502(31 downto 12) <= "00000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_2_fu_286_p3 <= 
        select_ln147_fu_278_p3 when (even(0) = '1') else 
        add_ln147_fu_272_p2;
    add_ln142_1_fu_342_p2 <= std_logic_vector(unsigned(in_memory_addr_0_idx) + unsigned(sext_ln142_fu_339_p1));
    add_ln142_2_fu_361_p2 <= std_logic_vector(unsigned(or_ln142_fu_355_p2) + unsigned(in_memory));
    add_ln142_fu_250_p0 <= a_fu_98;
    add_ln142_fu_250_p2 <= std_logic_vector(signed(add_ln142_fu_250_p0) + signed(ap_const_lv32_FFFFFFFF));
    add_ln144_1_fu_324_p2 <= std_logic_vector(unsigned(shl_ln3_fu_316_p3) + unsigned(in_memory));
    add_ln144_fu_311_p2 <= std_logic_vector(unsigned(in_memory_addr_0_idx) + unsigned(sext_ln144_fu_308_p1));
    add_ln147_fu_272_p2 <= std_logic_vector(unsigned(a_fu_98) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter21, m_axi_gmem1_RVALID, ap_predicate_op110_read_state20, ap_predicate_op111_read_state20, outbuf_full_n, icmp_ln138_reg_507_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (icmp_ln138_reg_507_pp0_iter20_reg = ap_const_lv1_1) and (outbuf_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((ap_predicate_op111_read_state20 = ap_const_boolean_1) and (m_axi_gmem1_RVALID = ap_const_logic_0)) or ((ap_predicate_op110_read_state20 = ap_const_boolean_1) and (m_axi_gmem1_RVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter21, m_axi_gmem1_RVALID, ap_block_state4_io, ap_predicate_op110_read_state20, ap_predicate_op111_read_state20, outbuf_full_n, icmp_ln138_reg_507_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (icmp_ln138_reg_507_pp0_iter20_reg = ap_const_lv1_1) and (outbuf_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((ap_predicate_op111_read_state20 = ap_const_boolean_1) and (m_axi_gmem1_RVALID = ap_const_logic_0)) or ((ap_predicate_op110_read_state20 = ap_const_boolean_1) and (m_axi_gmem1_RVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter21, m_axi_gmem1_RVALID, ap_block_state4_io, ap_predicate_op110_read_state20, ap_predicate_op111_read_state20, outbuf_full_n, icmp_ln138_reg_507_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (icmp_ln138_reg_507_pp0_iter20_reg = ap_const_lv1_1) and (outbuf_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((ap_predicate_op111_read_state20 = ap_const_boolean_1) and (m_axi_gmem1_RVALID = ap_const_logic_0)) or ((ap_predicate_op110_read_state20 = ap_const_boolean_1) and (m_axi_gmem1_RVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage0_iter19_assign_proc : process(m_axi_gmem1_RVALID, ap_predicate_op110_read_state20, ap_predicate_op111_read_state20)
    begin
                ap_block_state20_pp0_stage0_iter19 <= (((ap_predicate_op111_read_state20 = ap_const_boolean_1) and (m_axi_gmem1_RVALID = ap_const_logic_0)) or ((ap_predicate_op110_read_state20 = ap_const_boolean_1) and (m_axi_gmem1_RVALID = ap_const_logic_0)));
    end process;

        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp0_stage0_iter21_assign_proc : process(outbuf_full_n, icmp_ln138_reg_507_pp0_iter20_reg)
    begin
                ap_block_state22_pp0_stage0_iter21 <= ((icmp_ln138_reg_507_pp0_iter20_reg = ap_const_lv1_1) and (outbuf_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_gmem1_ARREADY, ap_predicate_op76_readreq_state4, ap_predicate_op79_readreq_state4)
    begin
                ap_block_state4_io <= (((ap_predicate_op79_readreq_state4 = ap_const_boolean_1) and (m_axi_gmem1_ARREADY = ap_const_logic_0)) or ((ap_predicate_op76_readreq_state4 = ap_const_boolean_1) and (m_axi_gmem1_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln138_fu_236_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln138_fu_236_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_high_phi_fu_189_p4_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln138_reg_507, high_reg_185, ap_block_pp0_stage0, high_2_reg_521)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln138_reg_507 = ap_const_lv1_1))) then 
            ap_phi_mux_high_phi_fu_189_p4 <= high_2_reg_521;
        else 
            ap_phi_mux_high_phi_fu_189_p4 <= high_reg_185;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_phi_ln112_reg_197 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op110_read_state20_assign_proc : process(icmp_ln138_reg_507_pp0_iter18_reg, high_reg_185_pp0_iter18_reg)
    begin
                ap_predicate_op110_read_state20 <= ((high_reg_185_pp0_iter18_reg = ap_const_lv1_0) and (icmp_ln138_reg_507_pp0_iter18_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op111_read_state20_assign_proc : process(icmp_ln138_reg_507_pp0_iter18_reg, high_reg_185_pp0_iter18_reg)
    begin
                ap_predicate_op111_read_state20 <= ((high_reg_185_pp0_iter18_reg = ap_const_lv1_1) and (icmp_ln138_reg_507_pp0_iter18_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op76_readreq_state4_assign_proc : process(icmp_ln138_reg_507_pp0_iter2_reg, high_reg_185_pp0_iter2_reg)
    begin
                ap_predicate_op76_readreq_state4 <= ((high_reg_185_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln138_reg_507_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op79_readreq_state4_assign_proc : process(icmp_ln138_reg_507_pp0_iter2_reg, high_reg_185_pp0_iter2_reg)
    begin
                ap_predicate_op79_readreq_state4 <= ((high_reg_185_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln138_reg_507_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    final_m2s_len_1_fu_436_p2 <= std_logic_vector(unsigned(final_m2s_len_fu_94) + unsigned(ap_const_lv32_FFFFFFFF));

    gmem1_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem1_ARREADY, ap_predicate_op76_readreq_state4, ap_predicate_op79_readreq_state4, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op79_readreq_state4 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op76_readreq_state4 = ap_const_boolean_1)))) then 
            gmem1_blk_n_AR <= m_axi_gmem1_ARREADY;
        else 
            gmem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter19, m_axi_gmem1_RVALID, ap_predicate_op110_read_state20, ap_predicate_op111_read_state20, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op111_read_state20 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op110_read_state20 = ap_const_boolean_1)))) then 
            gmem1_blk_n_R <= m_axi_gmem1_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    high_2_fu_265_p3 <= 
        xor_ln145_fu_259_p2 when (even(0) = '1') else 
        ap_phi_mux_high_phi_fu_189_p4;
    i_2_fu_241_p2 <= std_logic_vector(unsigned(i_fu_102) + unsigned(ap_const_lv6_1));
    icmp_ln138_fu_236_p2 <= "1" when (signed(zext_ln138_fu_232_p1) < signed(count_1)) else "0";
    icmp_ln150_1_fu_293_p2 <= "1" when (zext_ln138_fu_232_p1 = sub50) else "0";
    icmp_ln150_fu_407_p2 <= "1" when (signed(final_m2s_len_fu_94) < signed(ap_const_lv32_21)) else "0";
    icmp_ln155_fu_418_p2 <= "1" when (final_m2s_len_fu_94 = select_ln119_cast_reg_502) else "0";
    lshr_ln142_fu_396_p2 <= std_logic_vector(shift_right(unsigned(gmem1_addr_read_reg_558),to_integer(unsigned('0' & zext_ln142_cast_reg_497(31-1 downto 0)))));

    m_axi_gmem1_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op76_readreq_state4, ap_predicate_op79_readreq_state4, ap_block_pp0_stage0_11001, sext_ln144_1_fu_376_p1, sext_ln142_1_fu_386_p1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
            if ((ap_predicate_op79_readreq_state4 = ap_const_boolean_1)) then 
                m_axi_gmem1_ARADDR <= sext_ln142_1_fu_386_p1;
            elsif ((ap_predicate_op76_readreq_state4 = ap_const_boolean_1)) then 
                m_axi_gmem1_ARADDR <= sext_ln144_1_fu_376_p1;
            else 
                m_axi_gmem1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_1;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;

    m_axi_gmem1_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_predicate_op76_readreq_state4, ap_predicate_op79_readreq_state4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op79_readreq_state4 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op76_readreq_state4 = ap_const_boolean_1)))) then 
            m_axi_gmem1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;

    m_axi_gmem1_RREADY_assign_proc : process(ap_enable_reg_pp0_iter19, ap_predicate_op110_read_state20, ap_predicate_op111_read_state20, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op111_read_state20 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op110_read_state20 = ap_const_boolean_1)))) then 
            m_axi_gmem1_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_WDATA <= ap_const_lv64_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv8_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    or_ln142_fu_355_p2 <= (shl_ln_fu_347_p3 or ap_const_lv64_4);
    out_val_data_filed_V_fu_403_p1 <= ap_phi_reg_pp0_iter21_phi_ln112_reg_197(32 - 1 downto 0);
    out_val_last_V_fu_413_p2 <= (icmp_ln150_fu_407_p2 and icmp_ln150_1_reg_526_pp0_iter20_reg);

    outbuf_blk_n_assign_proc : process(ap_enable_reg_pp0_iter21, outbuf_full_n, icmp_ln138_reg_507_pp0_iter20_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln138_reg_507_pp0_iter20_reg = ap_const_lv1_1))) then 
            outbuf_blk_n <= outbuf_full_n;
        else 
            outbuf_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outbuf_din <= (((out_val_last_V_fu_413_p2 & ap_const_lv1_0) & icmp_ln155_fu_418_p2) & out_val_data_filed_V_fu_403_p1);

    outbuf_write_assign_proc : process(ap_enable_reg_pp0_iter21, icmp_ln138_reg_507_pp0_iter20_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln138_reg_507_pp0_iter20_reg = ap_const_lv1_1))) then 
            outbuf_write <= ap_const_logic_1;
        else 
            outbuf_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln119_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln119),32));
    select_ln147_fu_278_p3 <= 
        add_ln147_fu_272_p2 when (high_2_fu_265_p3(0) = '1') else 
        a_fu_98;
        sext_ln142_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln142_2_reg_536),64));

        sext_ln142_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln142_reg_516),61));

        sext_ln144_1_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_531),64));

        sext_ln144_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_load_2_reg_511),61));

    shl_ln3_fu_316_p3 <= (add_ln144_fu_311_p2 & ap_const_lv3_0);
    shl_ln_fu_347_p3 <= (add_ln142_1_fu_342_p2 & ap_const_lv3_0);
    xor_ln145_fu_259_p2 <= (ap_phi_mux_high_phi_fu_189_p4 xor ap_const_lv1_1);
    zext_ln138_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_102),32));
    zext_ln142_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln142),64));
end behav;
